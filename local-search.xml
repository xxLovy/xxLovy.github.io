<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>IBSLover1.0</title>
    <link href="/2024/04/01/IBSLover1-0/"/>
    <url>/2024/04/01/IBSLover1-0/</url>
    
    <content type="html"><![CDATA[<h1 id="IBS-Lover-1-0"><a href="#IBS-Lover-1-0" class="headerlink" title="IBS Lover 1.0"></a>IBS Lover 1.0</h1><p>Now all the basic features of this app are fully developed. Here are some instructions on how to use this app.</p><h2 id="Basic-UI"><a href="#Basic-UI" class="headerlink" title="Basic UI"></a>Basic UI</h2><img src="https://github.com/xxLovy/BlogRepo/blob/main/HexoBlog/source/img/simulator_screenshot_C229F6C0-7C25-4E9E-8B58-0CECC126A0AA.png?raw=true" alt="simulator_screenshot_C229F6C0-7C25-4E9E-8B58-0CECC126A0AA" style="zoom: 33%;" /><h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><h3 id="PANIC-—-Find-the-Nearest-Toilet"><a href="#PANIC-—-Find-the-Nearest-Toilet" class="headerlink" title="PANIC! — Find the Nearest Toilet"></a>PANIC! — Find the Nearest Toilet</h3><p>By clicking this button at the bottom, your map will quickly navigate you to the nearest toilet (currently only searched by the Google Maps API, without user-created positions).</p><img src="https://github.com/xxLovy/BlogRepo/blob/main/HexoBlog/source/img/image-20240401201458130.png?raw=true" alt="image-20240401201458130" style="zoom:33%;" /><p>After clicking:</p><img src="https://github.com/xxLovy/BlogRepo/blob/main/HexoBlog/source/img/image-20240401201525864.png?raw=true" alt="image-20240401201525864" style="zoom:33%;" /><h3 id="All-Places-with-Toilets-Shown-on-Map"><a href="#All-Places-with-Toilets-Shown-on-Map" class="headerlink" title="All Places with Toilets Shown on Map"></a>All Places with Toilets Shown on Map</h3><p>All of the places with toilets nearby will be displayed on the map.</p><ul><li><p>A red marker indicates the location has been queried by the Google Maps API, which is usually more precise.</p><p><img src="https://github.com/xxLovy/BlogRepo/blob/main/HexoBlog/source/img/ToiletMarker0.png?raw=true" alt="ToiletMarker0"></p></li><li><p>A blue marker indicates the location has been added by a user with an associated vote count.</p><p><img src="https://github.com/xxLovy/BlogRepo/blob/main/HexoBlog/source/img/ToiletByUser.png?raw=true" alt="ToiletByUser"></p></li></ul><p>Clicking on these markers will provide detailed information about the location.</p><img src="https://github.com/xxLovy/BlogRepo/blob/main/HexoBlog/source/img/image-20240401201130130.png?raw=true" alt="image-20240401201130130" style="zoom:33%;" /><img src="https://github.com/xxLovy/BlogRepo/blob/main/HexoBlog/source/img/image-20240401201150359.png?raw=true" alt="image-20240401201150359" style="zoom:33%;" /><p>You can select <code>Click to navigate</code> to get directions to the chosen location, similar to using the <code>PANIC!</code> feature.</p><h3 id="ListView"><a href="#ListView" class="headerlink" title="ListView"></a>ListView</h3><p>Users can opt for a list view to see places with toilets. The list can be hidden if not needed. The places are sorted in ascending order of their distance from the user.</p><p>Showing the list -&gt; Hiding the list:</p><img src="https://github.com/xxLovy/BlogRepo/blob/main/HexoBlog/source/img/image-20240401200256391.png?raw=true" alt="image-20240401200256391" style="zoom: 33%;" /><p>Hiding the list -&gt; Showing the list:</p><img src="https://github.com/xxLovy/BlogRepo/blob/main/HexoBlog/source/img/image-20240401200314839.png?raw=true" alt="image-20240401200314839" style="zoom:33%;" /><p>Clicking an item in <code>ListView</code> will yield the same result as selecting the location directly.</p><h3 id="Current-Location"><a href="#Current-Location" class="headerlink" title="Current Location"></a>Current Location</h3><p>This feature allows users to return to their current location on the map if they lose track of where they are.</p><img src="https://github.com/xxLovy/BlogRepo/blob/main/HexoBlog/source/img/image-20240401200607890.png?raw=true" alt="image-20240401200607890" style="zoom:33%;" /><p>After clicking:</p><img src="https://github.com/xxLovy/BlogRepo/blob/main/HexoBlog/source/img/image-20240401200629314.png?raw=true" alt="image-20240401200629314" style="zoom:33%;" /><h3 id="Add-Toilet"><a href="#Add-Toilet" class="headerlink" title="Add Toilet"></a>Add Toilet</h3><p>Users can add a new toilet location, making it public to all users. Some measures have been taken to ensure accuracy. When adding a new location, if it’s close to an existing one on the toilet list, it will be considered the same location, and the vote count will increase by one. The user’s position is added to the toilet list, and the location is updated to the average position of all contributors. Currently, <code>Name</code> and <code>Description</code> are not being utilized effectively (That’s probably not a good solution, I’m still figuring that out, maybe I can add that to DB as well and even voting for the Name??? that’s a little bit insane).</p><p>Add a toilet that has already in the list:</p><img src="https://github.com/xxLovy/BlogRepo/blob/main/HexoBlog/source/img/image-20240401202551791.png?raw=true" alt="image-20240401202551791" style="zoom:33%;" /><img src="https://github.com/xxLovy/BlogRepo/blob/main/HexoBlog/source/img/image-20240401202801228.png?raw=true" alt="image-20240401202801228" style="zoom:33%;" /><img src="https://github.com/xxLovy/BlogRepo/blob/main/HexoBlog/source/img/image-20240401202830334.png?raw=true" alt="image-20240401202830334" style="zoom:33%;" /><p>Before adding:</p><img src="https://github.com/xxLovy/BlogRepo/blob/main/HexoBlog/source/img/image-20240401202857205.png?raw=true" alt="image-20240401202857205" style="zoom: 50%;" /><p>After adding(voting):</p><img src="https://github.com/xxLovy/BlogRepo/blob/main/HexoBlog/source/img/image-20240401203035773.png?raw=true" alt="image-20240401203035773" style="zoom:33%;" /><h3 id="Filters"><a href="#Filters" class="headerlink" title="Filters"></a>Filters</h3><p>Users can apply two types of filters to streamline their search:</p><h4 id="General-Filter"><a href="#General-Filter" class="headerlink" title="General Filter"></a>General Filter</h4><ul><li>Exclude specific locations from the map display by selecting them in the filter settings.</li></ul><h4 id="Voting-Count-Filter"><a href="#Voting-Count-Filter" class="headerlink" title="Voting Count Filter"></a>Voting Count Filter</h4><ul><li>Set a minimum vote count threshold to assess the reliability of a toilet location.</li><li>Locations with a vote count below the threshold will not appear in the search results.</li></ul><img src="https://github.com/xxLovy/BlogRepo/blob/main/HexoBlog/source/img/image-20240401203229720.png?raw=true" alt="image-20240401203229720" style="zoom:33%;" /><p>Before filtering:</p><img src="https://github.com/xxLovy/BlogRepo/blob/main/HexoBlog/source/img/image-20240401203309545.png?raw=true" alt="image-20240401203309545" style="zoom:33%;" /><img src="https://github.com/xxLovy/BlogRepo/blob/main/HexoBlog/source/img/image-20240401203326784.png?raw=true" alt="image-20240401203326784" style="zoom:33%;" /><p>After filtering:</p><img src="https://github.com/xxLovy/BlogRepo/blob/main/HexoBlog/source/img/image-20240401203356523.png?raw=true" alt="image-20240401203356523" style="zoom:33%;" /><h3 id="Refresher"><a href="#Refresher" class="headerlink" title="Refresher"></a>Refresher</h3><p>A simple refresh function—nothing special to mention here.</p><h3 id="Toggle-Bar"><a href="#Toggle-Bar" class="headerlink" title="Toggle Bar"></a>Toggle Bar</h3><p>A toggle bar contains all the features listed above for easy access.</p><img src="https://github.com/xxLovy/BlogRepo/blob/main/HexoBlog/source/img/image-20240401203600125.png?raw=true" alt="image-20240401203600125" style="zoom:50%;" /><img src="https://github.com/xxLovy/BlogRepo/blob/main/HexoBlog/source/img/image-20240401203616666.png?raw=true" alt="image-20240401203616666" style="zoom:50%;" /><h2 id="Limitations"><a href="#Limitations" class="headerlink" title="Limitations"></a>Limitations</h2><h3 id="Location-accuracy"><a href="#Location-accuracy" class="headerlink" title="Location accuracy"></a>Location accuracy</h3><p>Location accuracy issues have been noted on real iPhones, particularly with Expo’s location services in China. Various platforms, including Stack Overflow and GitHub, have not provided solutions that address this issue. It appears that Expo’s location services may not be reliable in China, which has hindered testing on an actual iPhone.</p><p>On my iPhone 11:(not accurate)</p><img src="https://github.com/xxLovy/BlogRepo/blob/main/HexoBlog/source/img/IMG_7165.PNG?raw=true" alt="IMG_7165" style="zoom:33%;" /><img src="https://github.com/xxLovy/BlogRepo/blob/main/HexoBlog/source/img/IMG_7166.PNG?raw=true" alt="IMG_7166" style="zoom:33%;" /><p>On simulator iPhone 15:(accurate)</p><img src="https://github.com/xxLovy/BlogRepo/blob/main/HexoBlog/source/img/image-20240401204820793.png?raw=true" alt="image-20240401204820793" style="zoom:33%;" /><img src="https://github.com/xxLovy/BlogRepo/blob/main/HexoBlog/source/img/image-20240401204906872.png?raw=true" alt="image-20240401204906872" style="zoom:33%;" /><h3 id="Incomplete-Keyword-Range"><a href="#Incomplete-Keyword-Range" class="headerlink" title="Incomplete Keyword Range"></a>Incomplete Keyword Range</h3><p>The current compendium of keywords is somewhat limited, only enabling the query of certain likely toilet locations. This decision was taken to conserve the number of queries made to the Google Maps API, with an eye to efficiency and cost-effectiveness. Future updates are expected to broaden this keyword list.</p>]]></content>
    
    
    <categories>
      
      <category>App Develop</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>React Native</tag>
      
      <tag>Google Maps API</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Computer Network</title>
    <link href="/2023/06/11/ComputerNetwork/"/>
    <url>/2023/06/11/ComputerNetwork/</url>
    
    <content type="html"><![CDATA[<p>Todo：</p><p>第三章</p><p>UDP检验和</p><p>第四章视频</p><p>IP分组转发演示视频</p><p>问一下chat<strong>最长前缀匹配算法</strong></p><p>RIP协议如何更新</p><p>NAT</p><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><p>三种交换的区别</p><p>分组交换的性能：shiyan，利用率</p><p>封装和解封、复用和分用</p><h3 id="1-1-交换"><a href="#1-1-交换" class="headerlink" title="1.1  交换"></a>1.1  交换</h3><h4 id="1-1-1-电路交换"><a href="#1-1-1-电路交换" class="headerlink" title="1.1.1 电路交换"></a>1.1.1 电路交换</h4><ul><li><p>电路交换属于<strong>通信资源的预分配系统</strong>。</p></li><li><p>电路交换方式是<strong>面向连接</strong>的交换方式。必须经过：</p></li></ul><ol><li><p>建立连接：例如打电话拨号；</p></li><li><p>数据传输：例如通话；</p></li><li><p>释放连接：例如挂断电话。</p></li></ol><ul><li><p>中继线中多路电话信号可以通过<strong>频分多路复用</strong>、<strong>时分多路复用</strong>等信道复用技术共享通信线路资源。</p></li><li><p><strong>特点</strong>：</p></li><li><p>固定分配资源：通信资源在建立连接阶段已经预先分配给通话的双方了，在通话的全部时间内，通话的两个终端始终占用端到端的通信资源。</p></li></ul><h4 id="1-1-2-分组交换"><a href="#1-1-2-分组交换" class="headerlink" title="1.1.2 分组交换"></a>1.1.2 分组交换</h4><ul><li><p>计算机网络数据具有突发特性，如果使用电路交换方式，通信资源的利用率将极低。</p></li><li><p>因此，计算机网络采用<strong>分组交换</strong>方式。分组交换技术的出现奠定了互联网发展的基础。</p></li><li><p>分组交换属于<strong>通信资源的动态分配系统。</strong></p></li><li><p><strong>特点：</strong><br>分组；<br>存储转发；<br>逐段占用通信链路资源；<br>虚电路或数据报。</p></li></ul><p>虚电路方式：</p><ul><li><p><strong>虚电路方式是面向连接的</strong>，虚电路中连接，不是物理连接，只是一条<strong>逻辑连接</strong>。</p></li><li><p>建立虚电路后，在数据通信阶段，路由器根据虚电路标识转发分组，属于相同虚电路的数据分组将<strong>沿着相同的路径、按序</strong>通过网络，到达目的结点。</p></li></ul><p>数据报方式：</p><ul><li><p><strong>数据报方式是无连接的</strong>，即发送数据之前不需要先建立连接。</p></li><li><p>数据报方式中，路由器为每个分组独立选择转发接口，从相同源结点发往相同目的结点的数据分组，有可能<strong>沿着不同的路径</strong>，也有可能<strong>失序</strong>通过网络，到达目的结点。</p></li></ul><h4 id="1-1-3-报文交换"><a href="#1-1-3-报文交换" class="headerlink" title="1.1.3 报文交换"></a>1.1.3 报文交换</h4><ul><li><p>报文交换方式也采用存储转发方式。</p></li><li><p>报文交换与分组交换的区别在于：<strong>报文交换传输的数据单元是一个完整的报文</strong>，而分组交换传输的数据单元是较小的分组。</p></li></ul><h4 id="1-1-4-三种交换方式的对比"><a href="#1-1-4-三种交换方式的对比" class="headerlink" title="1.1.4 三种交换方式的对比"></a>1.1.4 三种交换方式的对比</h4><p><img src="/../img/image-20230524141951564.png" alt="image-20230524141951564"></p><p><img src="/../img/image-20230524142012420.png" alt="image-20230524142012420"></p><h3 id="1-2-性能指标"><a href="#1-2-性能指标" class="headerlink" title="1.2 性能指标"></a>1.2 性能指标</h3><h4 id="1-带宽"><a href="#1-带宽" class="headerlink" title="1. 带宽"></a>1. 带宽</h4><p><strong>数据传输的速率</strong></p><p>带宽是“频带宽度”的简称，单位是赫兹（Hz）。</p><p>信号的带宽指该信号所包含的各种不同频率成分所占据的频率范围；</p><p>信道的带宽指该信道允许通过的信号的频带范围。</p><p>如：传统的电话信号的标准带宽是3.1kHz（从300Hz到3.4kHz），传统的电话信道的标准带宽是4kHz（从0Hz到4kHz）。</p><p>在计算机网络中，带宽是指在单位时间内能传输的最大数据量，也称为最高数据率，用来表示网络中某信道的数据传送能力，单位是比特每秒（b&#x2F;s）。</p><p>如：传统以太网的带宽是10Mb&#x2F;s。</p><p>在带宽的两种表述中，其本质是相同的，前者是其频域称谓，后者是其时域称谓。</p><h4 id="2-吞吐量"><a href="#2-吞吐量" class="headerlink" title="2. 吞吐量"></a>2. 吞吐量</h4><p>吞吐量表示在单位时间内通过某个网络或接口的实际数据量，单位是比特每秒（b&#x2F;s）。</p><p>以文件传输应用为例，主机在任何瞬间接收到该文件的速率称为瞬时吞吐量，主机收到完整文件后计算的平均速率称为平均吞吐量。</p><p>端到端吞吐量是衡量计算机网络性能的一个重要指标。</p><p>端到端吞吐量受到网络带宽的限制。</p><p>端到端吞吐量也会受到网络中其他通信量的影响。</p><h4 id="3-延迟"><a href="#3-延迟" class="headerlink" title="3. 延迟"></a>3. 延迟</h4><p>分组从源主机出发，经过一系列路由器，最终到达目的主机，在这个过程中所花费的时间称为端到端延迟。端到端延迟由处理延迟（processing delay）、排队延迟（queuing delay）、传输延迟（transmission delay）和传播延迟（propagation delay）等几个部分组成。</p><p>处理延迟：结点在收到分组后，结点处理分组所花费的时间，称为处理延迟。</p><p>排队延迟：分组进入路由器后，在输入队列或输出队列中排队所产生的延迟称为排队延迟。</p><p><img src="/../img/image-20230524142705023.png" alt="image-20230524142705023"></p><p><img src="/../img/image-20230524142727900.png" alt="image-20230524142727900"></p><p><strong>往返的端到端延迟通常称为往返时间（Round-Trip Time，RTT）</strong></p><h4 id="4-丢包率"><a href="#4-丢包率" class="headerlink" title="4. 丢包率"></a>4. 丢包率</h4><p>当分组到达路由器的速率超过路由器发送分组的速率时，路由器有可能丢弃到达的分组，这种现象称为丢包。</p><p>丢包代表网络出现了拥塞。丢包率在很大程度上反映网络的阻塞程度，常被用于评价和衡量网络性能。</p><p><img src="/../img/image-20230524142927451.png" alt="image-20230524142927451"></p><p>其中N<sub>s</sub>代表发送的分组总数，N<sub>r</sub>代表收到的分组总数，N<sub>s</sub>-N<sub>r</sub>代表丢失的分组总数。</p><h4 id="5-利用率"><a href="#5-利用率" class="headerlink" title="5. 利用率"></a>5. 利用率</h4><p>利用率包括信道利用率和网络利用率两种。</p><p>信道利用率指出某信道被利用(有数据通过)的时间占全部时间的百分比。</p><p>网络利用率则是全网络的信道利用率的加权平均值。</p><p>信道利用率并非越高越好。当某信道的利用率增大时，该信道引起的延迟也会迅速增加。</p><p>在适当的假定条件下，延迟和网络利用率之间的关系如下式：</p><p><img src="/../img/image-20230524143105957.png" alt="image-20230524143105957"></p><p>其中，D表示网络当前的延迟，D<sub>0</sub>表示网络空闲时的延迟，U是网络的利用率。</p><p>信道或网络的利用率过高会产生非常大的延迟。</p><h4 id="6-延迟带宽积"><a href="#6-延迟带宽积" class="headerlink" title="6. 延迟带宽积"></a>6. 延迟带宽积</h4><p><strong>延迟带宽积&#x3D;延迟×带宽</strong></p><p>当采用不同种类的延迟时，延迟带宽积有不同的含义。</p><p>采用相邻结点间的传播延迟，则延迟带宽积的含义：信道的容量，或者说当接收结点收到第1个比特时，发送结点可以发送的比特数。（最常见）</p><p>类比：如果我们把信道看成中空的管道，则延迟相当于管道的长度，带宽相当于管道的截面积，那么延迟带宽积相当于管道的容积。</p><p>采用单向端到端延迟，则延迟带宽积的含义：逻辑信道的容量，或者说当最终的接收方收到第1个比特时，发送方可以发送的比特数。</p><p>采用往返时间RTT，则延迟带宽积的含义：当发送方收到来自接收方的确认信息时，发送方可以发送的比特数。（最有用）</p><p>用途：在可靠传输协议设计中，通常要求发送方收到对上一批数据的确认后，才能继续发送下一批数据。在这类协议中，为了充分利用网络带宽资源，不让发送方因为等待确认信息而暂停发送，就应该允许发送方每一批发送的数据都大于RTT×带宽。重要参数</p><h3 id="1-3-例题"><a href="#1-3-例题" class="headerlink" title="1.3 例题"></a>1.3 例题</h3><p><img src="/../img/image-20230524144354989.png" alt="image-20230524144354989"></p><p><img src="/../img/image-20230524144410784.png" alt="image-20230524144410784"></p><p><img src="/../img/image-20230524144427536.png" alt="image-20230524144427536"></p><h2 id="第二章：IP地址"><a href="#第二章：IP地址" class="headerlink" title="第二章：IP地址"></a>第二章：IP地址</h2><p>理解：点分十进制、分类编制</p><p>*应用：子网划分、无分类编址（两个三个定长的，几个不定长的）、IP地址规划和分配</p><h3 id="2-1-点分十进制"><a href="#2-1-点分十进制" class="headerlink" title="2.1 点分十进制"></a>2.1 点分十进制</h3><p>把32位的IP地址分为4组，每组8位，然后将每组数字用十进制表示，并且在这些数字之间加上一个点，就称为IP地址的点分十进制记法。</p><p><img src="/../img/image-20230524155816606.png" alt="image-20230524155816606"></p><p><img src="/../img/image-20230524160525019.png" alt="image-20230524160525019"></p><h3 id="2-2-IP网络的分层结构"><a href="#2-2-IP网络的分层结构" class="headerlink" title="2.2 IP网络的分层结构"></a>2.2 IP网络的分层结构</h3><ul><li>IP地址采用了<strong>分层</strong>（hierarchical）结构，即IP地址由与互联网特定层次结构对应的几部分构成。 </li><li>IP地址包括两部分：<strong>网络部分</strong>和<strong>主机部分</strong>。</li><li>IP地址的网络部分指明了主机所连网络，同一网络中，所有主机的IP地址的网络部分相同。</li><li>IP地址的主机部分唯一标识了特定网络中的特定的主机。</li><li>采用分层结构的IP地址后，路由器可以仅根据IP地址的网络部分来转发分组，而无需考虑IP地址的主机部分。</li></ul><h3 id="2-3-编址方案"><a href="#2-3-编址方案" class="headerlink" title="2.3 编址方案"></a>2.3 编址方案</h3><p>IP地址的编址方案经历了三个历史阶段：</p><p>① 有类别编址。将IP地址分为A、B、C、D、E五类，是最基本的编址方案，在1981年通过的RFC790中就包含了A、B、C类地址的相关规定。</p><p>② 子网划分。是在有类别编址的基础上所作的改进，1985年通过的RFC950中包含了相关的规定。</p><p>③ 无类别编址。基于无类别域间路由选择（Classless Inter-Domain Routing，CIDR）的编址方案，是目前正在使用的编址方案。在1993年通过的RFC1519中提出后，很快就得到推广应用。2006年，RFC1519被RFC4632替换。</p><p><img src="/../img/image-20230524155956283.png" alt="image-20230524155956283"></p><h3 id="2-4-有类别编址"><a href="#2-4-有类别编址" class="headerlink" title="2.4 有类别编址"></a>2.4 有类别编址</h3><h4 id="2-4-1-分类的IP地址"><a href="#2-4-1-分类的IP地址" class="headerlink" title="2.4.1 分类的IP地址"></a>2.4.1 分类的IP地址</h4><p>有类别编址方案采用两级编址，每个单播IP地址都由两个字段组成。<br>$$<br>𝐈𝐏地址∷&#x3D;{&lt;网络号&gt;, &lt;主机号&gt;}<br>$$<br>其中，网络部分是网络号；主机部分是主机号。</p><p>现实中，不同的网络可能包含不同数量的主机，一种划分方法是依据当前实际或预计的主机数量，将不同大小的IP地址空间分配给不同的网络。</p><p>不同类别的IP地址，它们的网络号和主机号长度不同。 </p><p>路由器根据IP地址的网络部分来转发分组。</p><h4 id="2-4-2-A类、B类和C类IP地址"><a href="#2-4-2-A类、B类和C类IP地址" class="headerlink" title="2.4.2 A类、B类和C类IP地址"></a>2.4.2 A类、B类和C类IP地址</h4><p>IP地址空间被划分为五类，命名为A、B、C、D和E。</p><p>A、B、C类为单播地址；</p><p>D类地址为多播地址；</p><p>E类地址为保留地址</p><img src="../img/image-20230524161221009.png" alt="image-20230524161221009" style="zoom:50%;" /><p>A类、B类和C类地址属于单播地址，由网络号和主机号两部分组成。在单播地址空间中，有部分地址被用作特殊用途，不作为单播地址使用。</p><img src="../img/image-20230524161349173.png" alt="image-20230524161349173" style="zoom:67%;" /><p><img src="/../img/image-20230524161455723.png" alt="image-20230524161455723"></p><h3 id="2-5-子网划分"><a href="#2-5-子网划分" class="headerlink" title="2.5 子网划分"></a>2.5 子网划分</h3><p>一些较大的单位或组织内部需要组建多个局域网，在IP地址的两级编址方案下，为这些局域网分配IP地址有困难。</p><p>RFC950提出了子网划分，来解决这样的问题</p><p>子网划分将IP地址从两级编址方案扩展为三级编址方案，包括两种方式：</p><p>定长子网划分</p><p>可变长子网划分</p><h4 id="2-5-1-定长子网划分"><a href="#2-5-1-定长子网划分" class="headerlink" title="2.5.1 定长子网划分"></a>2.5.1 定长子网划分</h4><p>子网划分的方法是从IP地址的主机号部分借用若干位作为子网号，这样，两级IP地址在本单位内部就变为三级IP地址。<br>$$<br>𝐈𝐏地址∷&#x3D;{&lt;网络号&gt;, &lt;子网号&gt;,&lt;主机号&gt;}<br>$$<br>互联网上的路由器仍然将网络号看作IP地址的网络部分；</p><p>单位的边界路由器和内部路由器将网络号+子网号记作网络地址，将网络地址看作IP地址的网络部分。</p><p>路由器根据IP地址的网络部分来转发分组。</p><p>一个例子：</p><p>以一个B类网络139.9.0.0为例讨论子网划分。假设申请到该B类地址的单位，从主机号部分借用8位作为子网号，则划分子网后的IP地址结构如图所示。</p><p><img src="/../img/image-20230524170537470.png" alt="image-20230524170537470"></p><p>本例中，支持最多配置2^8&#x3D;256个子网，每个子网最多可包含2^8−2&#x3D;254台主机。</p><p>划分子网后，主机号为全“0”和全“1”的IP地址仍然不能指派给主机。</p><p>本例中所有子网的子网号长度相等，这种子网划分方式称为定长子网划分。</p><p>假设该单位已经组建了3个局域网，网络管理员为它们分配了子网号5、10和15，其余的子网号暂时保留。</p><p>划分子网后，B类网络139.9.0.0对外部仍表现为一个网络。</p><p>当边界路由器和内部路由器收到IP数据报后，按照网络地址转发分组。</p><img src="../img/image-20230524173112283.png" alt="image-20230524173112283" style="zoom:50%;" /><p>子网掩码</p><img src="../img/image-20230524173801672.png" alt="image-20230524173801672" style="zoom: 50%;" /><p>用子网掩码计算出真正的网络地址</p><ul><li>将IP地址与其子网掩码做按位与（AND）操作，即可得到相应的网络地址。</li><li>如上例中，边界路由器收到目的IP地址为<strong>139.9.10.11</strong>的IP数据报，将该IP地址与子网掩码<strong>255.255.255.0</strong>做按位与操作的过程如下。<br><img src="/../img/image-20230524173918791.png" alt="image-20230524173918791"></li><li>计算得出网络地址为<strong>139.9.10.0</strong></li></ul><h4 id="2-5-2-可变长子网划分"><a href="#2-5-2-可变长子网划分" class="headerlink" title="2.5.2 可变长子网划分"></a>2.5.2 可变长子网划分</h4><p>如果将一个网络划分为多个大小不同的子网，以适应多个子网具有不同数量主机的需求。这种子网划分方式称为可变长子网划分。</p><p>在可变长子网划分中，各子网的子网号部分长度不尽相同，因此其子网掩码的前缀长度也不尽相同，这种子网掩码称为可变长子网掩码（VLSM） 。</p><p>在上小节定长子网划分的例子中，可以将子网1进一步划分为两个子网，将它们的子网掩码配置为255.255.255.128，即子网掩码前缀长度为25，从而得到一个可变长子网划分的实例。</p><p>进行了可变长子网划分后，整个网络对外部仍表现为一个网络。</p><img src="../img/image-20230524174138431.png" alt="image-20230524174138431" style="zoom:50%;" /><p>可变长子网掩码例子中的子网地址和子网掩码</p><img src="../img/image-20230524174155415.png" alt="image-20230524174155415" style="zoom:50%;" /><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs armasm">可变长子网划分（Variable Length <span class="hljs-keyword">Subnet</span> Masking，VLSM）和定长子网划分（Fixed Length <span class="hljs-keyword">Subnet</span> Masking，FLSM）是两种在计算机网络中划分子网的方法。<br><br>定长子网划分是一种简单的方法，其中每个子网都有相同数量的主机。在这种情况下，子网掩码是固定的，无论子网所需的主机数量如何，都采用相同的子网掩码。这意味着每个子网都具有相同的大小和可用主机数量。<br><br>例如，假设有一个<span class="hljs-built_in">IP</span>地址段为<span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>/<span class="hljs-number">24</span>的网络，采用定长子网划分，每个子网都分配了一个/<span class="hljs-number">24</span>的子网掩码。这意味着每个子网可以容纳<span class="hljs-number">256</span>个主机。<br><br>可变长子网划分是一种更灵活的方法，其中不同的子网可以具有不同数量的主机。通过使用更长的子网掩码，可以将更多的<span class="hljs-built_in">IP</span>地址用于网络前缀，从而划分出更小的子网。这种方法可以更有效地利用<span class="hljs-built_in">IP</span>地址，并根据每个子网所需的主机数量进行灵活的划分。<br><br>例如，假设有一个<span class="hljs-built_in">IP</span>地址段为<span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>/<span class="hljs-number">24</span>的网络，采用可变长子网划分，可以根据需要为不同的子网分配不同的子网掩码。例如，可以将一个子网划分为/<span class="hljs-number">26</span>，它可以容纳<span class="hljs-number">64</span>个主机，而另一个子网划分为/<span class="hljs-number">28</span>，它只能容纳<span class="hljs-number">16</span>个主机。<br><br>总结一下区别：<br>- 定长子网划分：所有子网具有相同数量的主机，子网掩码是固定的。<br>- 可变长子网划分：不同的子网可以具有不同数量的主机，使用更长的子网掩码来划分更小的子网。<br></code></pre></td></tr></table></figure><p><img src="/../img/image-20230524175942325.png" alt="image-20230524175942325"></p><p><img src="/../img/image-20230525140020355.png" alt="image-20230525140020355"></p><h3 id="2-6-无类别编址"><a href="#2-6-无类别编址" class="headerlink" title="2.6 无类别编址"></a>2.6 无类别编址</h3><p>2.6.1 网络前缀</p><p>IETF在VLSM的基础上，研究出了无类别编址方案，它的正式名字是无分类域间路由选择（Classless Inter-Domain Routing，CIDR）。</p><p>CIDR消除了传统的A类、B类和C类地址以及划分子网的概念，可以更加有效地分配IPv4地址空间。</p><p>CIDR将IP地址从三级编址改回两级编址，但这已经是无类别的两级编址。<br>$$<br>𝐈𝐏地址∷&#x3D;{&lt;网络前缀&gt;, &lt;主机号&gt;}<br>$$<br>其中，网络部分是网络前缀；主机部分是主机号。</p><p>路由器根据IP地址的网络部分来转发分组。</p><p>CIDR采用斜线记法，也称为CIDR记法，即在IP地址后面加上斜线“&#x2F;”，然后写上网络前缀所占的位数。</p><p>如IP地址：222.22.65.10&#x2F;20的网络前缀为20位。</p><p>网络前缀消除了一个IP地址中网络和主机号的预定义分隔，使更细粒度的IP地址分配成为可能。</p><p>网络前缀都相同的连续的IP地址组成一个CIDR地址块。</p><p>一个例子：</p><p>已知CIDR地址块中的任何一个地址，就可以求出这个地址块的起始地址（即最小地址）和最大地址，以及地址块中的地址数。</p><p>主机号从最小到最大（全0到全1）</p><img src="../img/image-20230525140758458.png" alt="image-20230525140758458" style="zoom: 50%;" /><p>该地址块共有2^12&#x3D;4096个地址，最大允许指派的主机数为2^12−2&#x3D;4094个。</p><p>通常用地址块中的最小地址和网络前缀的位数标识地址块，上述地址块可记为222.22.64.0&#x2F;20。</p><p>2.6.2 路由聚合</p><ul><li><p>CIDR不仅可以提高IPv4地址空间的分配效率，也可以减少路由表的项目数，从而改善路由器的性能，这个功能可以通过<strong>路由聚合</strong>来实现。</p></li><li><p>路由聚合是指将相邻CIDR地址块的网络前缀合并成一个较短的网络前缀，聚合后的一条路由信息可以覆盖更多地址空间。</p></li><li><p>由于有些聚合后的CIDR地址块包含了多个C类地址，路由聚合也被称为<strong>构成超网</strong>。</p></li><li><p>两个CIDR地址块能够聚合需要满足以下条件：<br>① 两个地址块相邻且大小一致；<br>② 两个地址块的前n位相同；（n为聚合后的网络号位数）<br>③ 聚合前后，CIDR地址块包含的IP地址相同。</p><img src="../img/image-20230525141232044.png" alt="image-20230525141232044" style="zoom:50%;" /></li><li><p>在CIDR的应用中，有一种特殊的情况，<strong>主机号全“0”和全“1”的IP地址可以使用</strong>。</p></li><li><p>当路由器之间被一条点到点链路连接，则每个端点都需要分配一个IP地址，且两台路由器之间的网络仅包含两个IP地址，为了节省IP地址，RFC3021建议将&#x2F;31地址块中包含的两个地址分配给两台路由器。</p></li><li><p>相应的，在IPv6中，对于这种特殊情况，RFC6164中也建议使用&#x2F;127地址块。</p></li></ul><p><img src="/../img/image-20230525142512770.png" alt="image-20230525142512770"></p><p><img src="/../img/image-20230525142630597.png" alt="image-20230525142630597"></p><h3 id="2-7-特殊用途的IP地址"><a href="#2-7-特殊用途的IP地址" class="headerlink" title="2.7 特殊用途的IP地址"></a>2.7 特殊用途的IP地址</h3><ul><li><p>常见的特殊用途地址包括：</p></li><li><p>专用网络地址</p><p>① 10.0.0.0~10.255.255.255（10.0.0.0&#x2F;8）；</p><p>② 172.16.0.0~172.31.255.255（172.16.0.0&#x2F;12）；</p><p>③ 192.168.0.0~192.168.255.255（192.168.0.0&#x2F;16）。</p></li><li><p>“链路本地”地址<br>169.254.0.0&#x2F;16。</p></li><li><p>运营商级NAT共享地址<br>100.64.0.0&#x2F;10</p></li><li><p>用于文档的测试网络地址</p><p>① TEST-NET-1：192.0.2.0~192.0.2.255（192.0.2.0&#x2F;24）；</p><p>② TEST-NET-2：198.51.100.0~198.51.100.255（198.51.100.0&#x2F;24）；</p><p>③ TEST-NET-3：203.0.113.0~203.0.113.255（203.0.113.0&#x2F;24）。</p></li><li><p>回送测试地址<br> 127.0.0.0&#x2F;8</p></li><li><p>受限广播地址<br>255.255.255.255&#x2F;32</p></li><li><p>本网络上的主机地址<br>0.0.0.0&#x2F;8</p></li></ul><p><img src="/../img/image-20230525142644557.png" alt="image-20230525142644557"></p><p><img src="/../img/image-20230525142701160.png" alt="image-20230525142701160"></p><h3 id="2-8-IP地址的规划和分配"><a href="#2-8-IP地址的规划和分配" class="headerlink" title="2.8 IP地址的规划和分配"></a>2.8 IP地址的规划和分配</h3><h2 id="第三章：应用层"><a href="#第三章：应用层" class="headerlink" title="第三章：应用层"></a>第三章：应用层</h2><p>cookie、HTTP1-持续连接、非持续连接</p><p>理解：DHCP自动配置-四个步骤，电子邮件组成</p><h2 id="第四章：传输层"><a href="#第四章：传输层" class="headerlink" title="第四章：传输层"></a>第四章：传输层</h2><p>理解：运输层服务、每一个首部字段的含义，给了字段名，说出字段含义</p><p>停止等待协议比较重要，</p><p>TCP连接管理，三次握手四次握手需要会运用。以字节为单位的滑动窗口，里面的序号和确认号需要会计算。</p><p>不要求计算超时重传超时时间。</p><p>流量控制：一个公式</p><p>拥塞控制：发送窗口小于等于拥塞窗口</p><h3 id="4-1-端口"><a href="#4-1-端口" class="headerlink" title="4.1 端口"></a>4.1 端口</h3><ul><li>传输层复用是指将多种应用数据封装在同一种传输层协议数据单元中。</li><li>传输层分用是指将封装在同一种传输层协议数据单元中的数据分发给不同的应用进程。</li><li>实现传输层的复用和分用，需要一个标识符来标识不同的应用进程。</li><li>在计算机的操作系统中，一般采用进程标识符来标识进程。但不同的操作系统，其进程标识符格式不尽相同。</li><li>为了使不同操作系统上的进程能够互相通信，就必须选择与操作系统无关的、统一的标识符来标识通信中的进程。</li><li>传输层协议使用端口号来标识应用进程，端口号也简称为端口。</li><li>TCP和UDP的首部中均包含源端口字段和目的端口字段，端口字段长度为16位，其取值范围在0~65535之间</li><li>源端口字段用来标识发送方进程，目的端口字段用来标识接收方进程。</li><li>在接收方进行处理时，源端口通常用作“返回地址”的一部分。</li><li>传输层的端口仅具有本地意义，即它所标识的是本计算机中的应用进程。</li><li>传输层利用端口实现复用和分用。</li></ul><p>IANA将端口号分为三类：<strong>系统端口</strong>、<strong>用户端口</strong>和<strong>动态端口</strong>。</p><p>系统端口：</p><ul><li>也称为<strong>熟知端口</strong></li><li>取值范围：0~1023</li><li>由IANA分配使用</li><li>一般用于服务进程</li></ul><p>用户端口：</p><ul><li>也称为<strong>登记端口</strong></li><li>取值范围：1024~49151</li><li>向IANA申请使用</li><li>一般用于服务进程</li></ul><p>动态端口：</p><ul><li>也称为<strong>私有端口</strong>或<strong>短暂端口</strong></li><li>取值范围：49152~65535</li><li>操作系统临时分配</li><li>一般用于客户进程</li></ul><p><img src="/../img/image-20230525162557779.png" alt="image-20230525162557779"></p><h3 id="4-2-UDP"><a href="#4-2-UDP" class="headerlink" title="4.2 UDP"></a>4.2 UDP</h3><h4 id="4-2-1-用户数据报协议概述"><a href="#4-2-1-用户数据报协议概述" class="headerlink" title="4.2.1 用户数据报协议概述"></a>4.2.1 用户数据报协议概述</h4><ul><li>UDP提供传输层最小服务，包括复用分用功能和差错检测功能。</li><li>主要特点：<img src="../img/image-20230525162757735.png" alt="image-20230525162757735" style="zoom:50%;" /></li><li>UDP保留应用层报文边界。将应用进程传递来的报文作为UDP的数据部分直接封装进UDP用户数据报。</li><li>UDP对应用层报文，既不拆分，也不合并，一次发送一个报文。</li><li>UDP报文的长度是由应用进程决定的。</li><li>典型的UDP应用进程，将报文长度限制在512字节以内。如DNS、DHCP。</li></ul><img src="../img/image-20230525162913850.png" alt="image-20230525162913850" style="zoom:50%;" /><h4 id="4-2-2-UDP用户数据报格式"><a href="#4-2-2-UDP用户数据报格式" class="headerlink" title="4.2.2 UDP用户数据报格式"></a>4.2.2 UDP用户数据报格式</h4><img src="../img/image-20230525163018617.png" alt="image-20230525163018617" style="zoom:50%;" /><p>⑴ 源端口</p><ul><li>源端口是发送方的端口号，占16位。</li><li>源端口号是可选的，如果UDP的发送方不需要对方回复，该字段允许置为全0。</li><li>UDP通信实例截获的用户数据报中，源端口值为0xc15e，即49502。该端口为短暂端口</li></ul><p>⑵ 目的端口</p><ul><li>目的端口是接收方的端口号，占16位。</li><li>接收方UDP向应用层交付报文时需要使用该字段。</li><li>UDP通信实例截获的用户数据报中， 目的端口值为0x1193，即4499。该端口为登记端口</li></ul><p>⑶ 长度</p><ul><li>长度指UDP首部和UDP数据部分的总长度，占16位。</li><li>长度的最小取值是8字节。</li><li>UDP通信实例截获的用户数据报中，长度字段的值为0x0013，即19。本例中，UDP数据部分长度11字节、UDP首部长度8字节。</li></ul><p>⑷ 检验和</p><ul><li>检验和也称为校验和。 UDP检验和是一个端到端的检验和，占16位。</li><li>UDP检验和由初始发送方计算得到，由最终接收方进行检验，用于检验端到端的传输过程中，是否出现了比特差错。</li><li>对于不能通过检验的用户数据报，UDP仅做丢弃处理。</li><li>UDP通信实例截获的用户数据报中，检验和字段的值为0x92be，检验通过。</li></ul><h4 id="4-2-3-检验和"><a href="#4-2-3-检验和" class="headerlink" title="4.2.3 检验和"></a>4.2.3 检验和</h4><ul><li>UDP检验和的计算范围覆盖UDP首部、UDP数据部分和一个伪首部。</li><li>伪首部衍生自IP首部和UDP首部中的某些字段，共12字节长。</li><li>伪首部并不是用户数据报真正的首部，只是在计算机检验和时，临时添加到UDP用户数据报前面，参加UDP检验和的计算。</li><li>伪首部既不向下层传送，也不向上层提交，更不会被封装传输。</li><li>在传输层的TCP协议中，TCP检验和的计算也采用了相似的伪首部。</li></ul><img src="../img/image-20230525163818980.png" alt="image-20230525163818980" style="zoom:50%;" /><h3 id="4-3-可靠传输原理"><a href="#4-3-可靠传输原理" class="headerlink" title="4.3 可靠传输原理"></a>4.3 可靠传输原理</h3><ul><li>所谓可靠传输服务是指为上层实体提供一条可靠的逻辑信道，通过该信道传输的数据，不会发生比特差错或者丢失，并且所有数据都按照其发送顺序进行交付。</li><li>提供可靠传输服务的协议称为可靠传输协议。</li><li>理想的可靠信道，满足以下两个假定：<br><strong>⑴ 传输的数据不会产生比特差错、丢包或延迟；</strong><br><strong>⑵ 接收方的接收速率能够与发送方的发送速率一样快。</strong></li></ul><h4 id="4-3-1-停止等待协议"><a href="#4-3-1-停止等待协议" class="headerlink" title="4.3.1 停止等待协议"></a>4.3.1 停止等待协议</h4><ol><li>除去假定（2）——无比特差错、丢包或延迟信道上的可靠传输</li></ol><ul><li>去除理想信道的第⑵个假定，保留第⑴个假定，即信道是无比特差错、丢包或延迟的。</li><li>为了保证接收方B能够正确的接收和处理收到的数据，需要增加流量控制机制：</li><li>当B收到一个PDU，处理完毕，做好接收下一个PDU的准备时，B发送给A一个包含肯定应答（Acknowledgment）的 PDU，记为ACK。</li><li>A每次发送完一个PDU就必须停止发送，等待B发来的ACK。在收到ACK后，A才能够发送下一个PDU。</li><li>这种具有流量控制的，每发一个PDU就停下来等待的协议称为停止等待协议，简称为停等协议，SW协议。</li><li>仅具有流量控制功能的停等协议记为SW1.0协议。</li></ul><img src="../img/image-20230525164642312.png" alt="image-20230525164642312" style="zoom: 33%;" /><ol start="2"><li>除去假定（1）——有比特差错、丢包或延迟信道上的可靠传输</li></ol><ul><li>分别考虑以下几种情况：<ul><li>数据PDU出错或丢失</li><li>ACK出错或丢失</li><li>ACK延迟</li></ul></li></ul><p>数据PDU出错或丢失：</p><ul><li>B在接收PDU时，可以通过检验和计算等措施检测到差错。对于出错的PDU，B直接丢弃，不发送ACK。</li><li>为发送方增加超时重传机制：A每发送一个PDU后，设定一个超时计时器，如果超时计时器到期仍然没有收到B发送的ACK，A就重传前面发过的PDU。</li><li>如果超时计时器到期之前收到了B发送的ACK，则撤销超时计时器。</li><li>显然，如果A发送的数据PDU在传输过程中丢失，B将收不到PDU，也就不会发送ACK，超时计时器到期后，A也会重发丢失的PDU。</li><li>具有超时重传机制，不需要接收方的请求就能自动重传出错或丢失的PDU，这种协议称为自动重传请求ARQ协议</li></ul><img src="../img/image-20230525164731386.png" alt="image-20230525164731386" style="zoom:33%;" /><p>ACK出错或丢失：</p><ul><li>如果B发送给A的ACK在传输过程中出现差错或丢失，由于A收不到正确的ACK，当超时计时器到期后，A将重发前面发过的PDU。</li><li>但是B曾经正确接收到该PDU，为了避免B将重复的PDU交给上层协议实体，在SW2.0基础上，为数据PDU增加序号字段，得到SW3.0协议。</li><li>A每发送一个PDU，将序号加1，写入新PDU的序号字段。</li><li>超时重传的PDU与出错或丢失的PDU具有相同的序号。</li><li>B可以根据序号判断收到的PDU是否是重复的，如果是重复的PDU，说明B发给A的ACK没有正确送达，于是B丢弃重复的PDU，并重传ACK。</li></ul><img src="../img/image-20230525164744345.png" alt="image-20230525164744345" style="zoom:33%;" /><p>ACK延迟：</p><ul><li>B发给A的ACK在信道中传输时，有可能会延迟到达A。</li><li>如果A曾经重传过某个PDU，当迟到的ACK到达时，A不能判断该ACK对应哪一个数据PDU，SW3.0将失效。</li><li>在SW3.0基础上，为ACK增加肯定应答号字段，得到SW4.0协议。</li><li>B每收到一个数据PDU，取出该PDU的序号，在发送ACK时，将序号写入ACK的肯定应答号字段，以此说明该ACK对应哪个数据PDU。</li><li>A可以根据肯定应答号判断收到的ACK是否重复，如果是重复的ACK，则A忽略该重复的ACK，不做任何其他处理。</li></ul><img src="../img/image-20230525164906483.png" alt="image-20230525164906483" style="zoom:33%;" /><p><img src="/../img/image-20230525171654025.png" alt="image-20230525171654025"></p><p><img src="/../img/image-20230525171750747.png" alt="image-20230525171750747"></p><h4 id="4-3-2-连续ARQ协议"><a href="#4-3-2-连续ARQ协议" class="headerlink" title="4.3.2 连续ARQ协议"></a>4.3.2 连续ARQ协议</h4><p>为了提高传输效率，可以采用流水线传输的方式。</p><p>流水线传输方式使信道上不断有数据在传送，可以获得较高的信道利用率。</p><img src="../img/image-20230525165550422.png" alt="image-20230525165550422" style="zoom: 50%;" /><p>采用流水线传输方式的可靠传输协议称为连续ARQ协议，也称为滑动窗口协议</p><p>根据差错恢复方式的不同，连续ARQ协议分为两种：回退N步（GBN）的连续ARQ协议和选择重传（SR）的连续ARQ协议。</p><ul><li>执行滑动窗口协议的通信双方根据自己的缓存空间，各自维护一个窗口。</li><li>发送方维持发送窗口swnd，接收方维持接收窗口rwnd。</li><li><img src="../img/image-20230525165650699.png" alt="image-20230525165650699" style="zoom:50%;" /></li></ul><p>发送窗口：</p><ul><li><p>指针P<sub>1</sub>指向最早未收到ACK的PDU，</p></li><li><p>指针P<sub>2</sub>指向下一个待发送的PDU，</p></li><li><p>指针P<sub>3</sub>指向发送窗口外的第一个PDU。</p></li><li><p>[P<sub>1</sub>，P<sub>3</sub>-1] 区间称为发送窗口</p></li><li><p><strong>发送窗口长度</strong>N&#x3D;P<sub>3</sub>-P<sub>1</sub>，本例中，发送窗口长度为固定值10</p></li></ul><img src="../img/image-20230525165941275.png" alt="image-20230525165941275" style="zoom:33%;" /><ul><li>当发送方收到对PDU-3和PDU-4的ACK后，发送窗口将<strong>向前滑动</strong>，如图（b）所示。P<sub>1</sub>指针滑动后指向PDU-5。</li><li>由于本例中窗口长度是固定值，所以P<sub>3</sub>指针也随之向前滑动，保持发送窗口长度值10不变。</li></ul><img src="../img/image-20230525170218470.png" alt="image-20230525170218470" style="zoom:33%;" /><p>接收窗口：</p><ul><li>指针P<sub>4</sub>指向下一个待接收的PDU，</li><li>指针P<sub>5</sub>指向接收窗口外的第一个PDU。</li><li>[P<sub>4</sub>，P<sub>5</sub>-1] 区间为接收窗口</li><li><strong>接收窗口长度</strong>N′&#x3D;P<sub>5</sub>-P<sub>4</sub>，在本例中，接收窗口长度为固定值10。</li></ul><img src="../img/image-20230525170348452.png" alt="image-20230525170348452" style="zoom:33%;" /><ul><li>当接收方收到PDU-3后，由于之前接收方已经缓存了PDU-4，接收方可以连续发送对PDU-3和PDU-4的ACK。</li><li>发送ACK-4后，接收窗口将向前滑动，如图（b）所示。P4指针滑动后指向PDU-5，</li><li>由于本例中窗口长度是固定值，所以P5指针也随之向前滑动，保持接收窗口长度值10不变</li></ul><img src="../img/image-20230525170413449.png" alt="image-20230525170413449" style="zoom:33%;" /><p>累积肯定应答：</p><ul><li>接收方允许采用累积肯定应答的方式发送ACK。</li><li>累积肯定应答指接收方不必对收到的分组逐个发送ACK，而是在收到几个分组后，对按序到达的最后一个PDU发送ACK，该ACK表示到这个分组为止的所有分组都已经正确收到了。</li><li>采用累积肯定应答后，ACK中的肯定应答号是最后一个按序到达的PDU的序号。</li></ul><p><img src="/../img/image-20230525172006977.png" alt="image-20230525172006977"></p><h4 id="4-3-3-GBN"><a href="#4-3-3-GBN" class="headerlink" title="4.3.3 GBN"></a>4.3.3 GBN</h4><ul><li>对比停等协议和滑动窗口协议的基本概念，不难发现，停等协议实质上是发送窗口长度为1，接收窗口长度也为1的滑动窗口协议。</li><li>GBN协议是发送窗口长度大于1，接收窗口长度等于1的滑动窗口协议</li><li>我们观察一个发送窗口长度为4，接收窗口长度为1的GBN协议运行的例子</li></ul><img src="../img/image-20230525172042198.png" alt="image-20230525172042198" style="zoom:33%;" /><p>发送方：</p><p>① 若发送窗口未满，则用发送缓存中的数据组装一个PDU，发送出去，登记超时计时器；若发送窗口已满，则等待发送窗口滑动。</p><p>② 若收到ACK，则取消该ACK对应的PDU以及之前的PDU的超时计时器。然后根据ACK的肯定应答号和发送窗口长度，计算并滑动当前发送窗口。</p><p>③ 若检测到超时事件，则重传超时的PDU。</p><p>接收方：</p><p>① 若收到的PDU落在接收窗口内，则接收该PDU，发送对该PDU的ACK，并滑动接收窗口。</p><p>② 若收到的PDU未落在接收窗口内，则丢弃该PDU，发送对最后一个正确PDU的ACK。</p><p>信道利用率：</p><ul><li>观察GBN协议的运行过程，可以发现流水线方式的传输使信道中不断有数据在传送，确实可以提高信道利用率。</li><li>但由于接收窗口仅为1，造成丢失或差错的PDU之后到达的所有PDU均被发送方重传，即使这些失序到达的PDU都是正确的。这种处理方式造成了信道资源的浪费。</li><li>从发送方角度来看，一旦发生超时重传事件，则需要回退N步，从超时的PDU开始重新发送所有后续PDU。</li></ul><p><img src="/../img/image-20230525172027401.png" alt="image-20230525172027401"></p><h4 id="4-3-4-SR"><a href="#4-3-4-SR" class="headerlink" title="4.3.4 SR"></a>4.3.4 SR</h4><ul><li>停等协议是发送窗口长度为1，接收窗口长度也为1的滑动窗口协议。</li><li>GBN协议是发送窗口长度大于1，接收窗口长度等于1的滑动窗口协议。</li><li>SR协议是发送窗口长度大于1，接收窗口长度也大于1的滑动窗口协议。</li><li>SR协议中，接收方使用按序到达的最后一个PDU序号对所有按序到达的PDU进行累积肯定应答，同时使用选择肯定应答（Selective Acknowledgement，SACK）对失序到达的PDU单独进行肯定应答。</li><li>选择肯定应答是SR协议必须具备的功能，累积肯定应答是SR协议的可选功能。</li><li>我们观察一个发送窗口长度为4，接收窗口长度也为4的SR协议运行的例子。本实例同时使用了上述两种肯定应答。</li></ul><img src="../img/image-20230525172616881.png" alt="image-20230525172616881" style="zoom:50%;" /><p>发送方：</p><p>① 若发送窗口未满，则用发送缓存中的数据组装一个PDU，发送出去，登记超时计时器；若发送窗口已满，则等待发送窗口滑动。</p><p>② 若收到ACK，则取消该ACK对应的PDU以及之前的PDU的超时计时器。然后根据ACK的肯定应答号和发送窗口长度，计算并滑动当前发送窗口。</p><p>③ 若收到SACK，则取消该SACK对应的PDU的超时计时器。</p><p>④ 若检测到超时事件，则重传超时的PDU。</p><p>接收方：</p><p>① 若收到的PDU落在接收窗口内，且该PDU是按序到达的PDU，则接收该PDU，对所有按序到达的正确PDU发送累积ACK，并滑动接收窗口。</p><p>② 若收到的PDU落在接收窗口内，但该PDU是失序到达的PDU，则缓存该PDU，发送对该PDU的SACK，并重新发送对最后一个正确PDU的累积ACK。</p><p>否定应答NAK：</p><ul><li>选择重传SR协议可以跟否定策略结合在一起使用，即当接收方检测到错误的PDU时，它就发送一个<strong>否定</strong>应答（Negative Acknowledgement，NAK）。</li><li>在发送方，收到NAK可以触发该PDU的重传操作，而不需要等到对应的超时计时器超时，因此可以提高协议性能。</li></ul><p><img src="/../img/image-20230529144446072.png" alt="image-20230529144446072"></p><h3 id="4-4-TCP"><a href="#4-4-TCP" class="headerlink" title="4.4 TCP"></a>4.4 TCP</h3><ul><li><p>TCP的主要特点：<br>⑴ 面向连接: 通信之前需要先建立连接</p><p>⑵ 面向字节流: 把应用层交下来的数据看成无结构的字节流</p><p>⑶ 可靠交付: 保证无差错、不丢失、不重复，按序到达</p><p>⑷ 支持流量控制: 接收方控制发送方的发送速率</p><p>⑸ 支持拥塞控制: 根据网络拥塞情况，调整发送速率</p><p>⑹ 首部开销较大: 字段较多, 首部长度20~60字节</p><p>⑺ 仅支持一对一的单播通信</p></li></ul><h4 id="4-4-1-TCP报文段格式"><a href="#4-4-1-TCP报文段格式" class="headerlink" title="4.4.1 TCP报文段格式"></a>4.4.1 TCP报文段格式</h4><img src="../img/image-20230529141625430.png" alt="image-20230529141625430" style="zoom:33%;" /><p>⑴ 源端口</p><p>源端口是发送方的端口号，占16位。</p><p>⑵ 目的端口</p><p>目的端口是接收方的端口号，占16位。</p><p>⑶ 序号</p><p>序号是本报文段中数据部分首字节的编号，占32位。</p><p>TCP在建立连接时，通信双方各自选择一个随机值作为初始序号。</p><p>⑷ 确认号</p><p>确认号是期待收到的对方下一个报文段中数据部分首字节的编号，占32位。</p><p>只有标志位ACK&#x3D;1，确认号字段才有效。</p><p>TCP的确认号具有累积肯定应答功能。</p><p>⑸ 数据偏移</p><p>该字段的实际含义是TCP首部长度，占4位。</p><p>数据偏移以4字节（32比特）为单位，因此，TCP首部长度必须是4字节的整数倍。</p><p>数据偏移最大取值为15，因此TCP首部最大长度为60字节。</p><p>⑹ 保留</p><p>RFC793规定了6位作为保留位。</p><p>后来RFC3168将保留位的最低两位定义为显式拥塞通知的标志位。</p><p>目前，保留位共占4位。</p><p>保留位应置零。</p><ul><li>URG：紧急数据标志。当URG&#x3D;1时，紧急指针字段生效，表明报文段中包含紧急数据，紧急数据的位置由紧急指针字段指明。2011年RFC6093，建议不再使用紧急数据。</li><li>ACK：肯定应答标志。当ACK&#x3D;1时，确认号字段生效，表明报文段中包含肯定应答信息。<br>TCP规定，连接建立后的所有报文段都必须把ACK置1。</li><li>PSH：推送标志。当PSH&#x3D;1时，表明发送方要求接收方尽快将报文段中的数据交付给上层。<br>在包括Berkeley Socket在内的多数TCP&#x2F;IP实现中，PSH标志置1代表发送方缓存中已经没有待发送数据。<br>在处理telnet等交互模式的连接时，该标志总是置1的。</li><li>RST：重置连接。当RST&#x3D;1时，表明TCP连接中出现了错误，需要取消连接。<br>RST&#x3D;1的报文段通常称为RST报文段。</li><li>SYN：同步连接。当SYN&#x3D;1时，表明报文段是一个TCP建立连接请求。<br>SYN&#x3D;1的报文段通常称为SYN报文段。</li><li>FIN：终止连接。当FIN&#x3D;1时，表明发送方的数据已经发送完毕，并请求释放TCP连接。<br>FIN&#x3D;1的报文段通常称为FIN报文段。</li></ul><p>⑻ 窗口</p><p>窗口值代表接收窗口长度，用来进行流量控制，占16位。也称为通知窗口。</p><p>发送方根据通知窗口设置发送窗口长度。</p><p>发送窗口范围：</p><p>开始指针P1：接收方报文段中的确认号</p><p>结束指针P3：接收方报文段中的确认号+通知窗口</p><p>⑼ 检验和</p><p>TCP检验和与UDP检验和类似，也是端到端的检验和，占16位。</p><p>TCP检验和的计算也需要覆盖12字节的伪首部，伪首部的格式与UDP伪首部的格式一致。</p><p>TCP检验和的计算方法与UDP检验和的计算方法一样。</p><p>⑽ 紧急指针</p><p>当标志位URG置1时，紧急指针指出本报文段中紧急数据的位置，占2字节。</p><p>RFC6093规定，本报文段的序号值加紧急指针值等于紧急数据后的首字节的编号。</p><p>RFC6093建议，利用TCP通信的新应用，不再使用紧急指针。</p><table><thead><tr><th>选项名称</th><th>类型</th><th>长度</th><th>参考RFC</th></tr></thead><tbody><tr><td>选项列表结束（End of Option List，EOL）</td><td>0</td><td>1</td><td>RFC793</td></tr><tr><td>无操作（No Operation，NOP）</td><td>1</td><td>1</td><td>RFC793</td></tr><tr><td>最大报文段长度（Maximum Segment Size，MSS）</td><td>2</td><td>4</td><td>RFC793&#x2F;RFC1122&#x2F;RFC6691</td></tr><tr><td>窗口扩大（Window Scale，WS）</td><td>3</td><td>3</td><td>RFC7323</td></tr><tr><td>允许SACK（SACK-Permitted，SACK-P）</td><td>4</td><td>2</td><td>RFC2018</td></tr><tr><td>选择肯定应答（Selective Acknowledgement，SACK）</td><td>5</td><td>可变</td><td>RFC2018</td></tr><tr><td>时间戳（Timestamps，TS）</td><td>8</td><td>10</td><td>RFC7323</td></tr></tbody></table><ul><li><p>NOP（无操作NOP选项）：<br>NOP选项可以用在TCP选项之间或者结尾处，用来保证TCP选项的总长度满足4字节对齐。<br>在多数TCP&#x2F;IP实现中，通过添加一个或多个NOP选项的方法来实现TCP选项的4字节对齐，因此不需要添加EOL选项。。</p></li><li><p>MSS（最大报文段长度MSS选项）:<br>MSS值指TCP报文段中数据部分的最大长度，不包含TCP首部。<br>MSS选项用来限制TCP通信中对方在发送数据时能够使用的最大报文段。<br>RFC1122规定，TCP应该在SYN报文段中使用MSS选项。<br>MSS值的设置与接收方的缓存以及接收窗口长度都没有关系，而是出于对传输效率的考虑。过小的MSS值和过大的MSS值都会影响通信效率。</p><p>MSS值过小：</p><p>即TCP报文段中的数据部分很小，加上TCP首部（20<del>60字节长度）和IP首部（20</del>60字节长度）后，才能在网络中传送。</p><p>由于数据部分比例小，网络利用率很低。</p><p>MSS值过大：</p><p>TCP报文段的数据部分加上TCP首部和IP首部后，构成的IP数据报过长，需要进行IP分片，才能在网络中传送。</p><p>IP分片和重组的开销，造成效率下降。<br>$$<br>IP首部长度&#x3D;IP固定首部长度（20字节）+IP选项长度（0−40字节）<br>$$</p><p>$$<br>TCP首部长度&#x3D;TCP固定首部长度（20字节）+TCP选项长度（0−40字节）<br>$$</p><p>$$<br>MSS&#x3D;MTU−IP首部长度− TCP首部长度<br>$$</p></li></ul><p>发送方有效最大报文段长度的计算：</p><p>TCP发送方在封装报文段时，需要计算有效最大报文段长度EMSS。</p><p>EMSS受到对方发来的RMSS的限制，也受到发送方自己的MTU值、TCP选项长度以及IP选项长度的限制。</p><p>由于历史原因，RFC1122规定EMSS的计算公式比较复杂。</p><p>将RFC1122规定的EMSS的计算公式，做一个简单的变换，可以得到：<br>$$<br>EMSS&#x3D;min ⁡(RMTU,SMTU )−TCP首部长度−IP首部长度<br>$$<br>在TCP的具体实现中，有效最大报文段长度EMSS的计算还需要考虑路径MTU（PMTU）的限制。PMTU指整个网络路径上的所有链路中最小的MTU。</p><p>TCP发送方发送数据时，为提高传输效率，会尽可能按照EMSS值封装TCP报文段，按照EMSS值封装的报文段称为全长报文段（Full-sized Segment）。</p><ul><li><p>WS：（窗口扩大WS选项）<br>TCP首部中，窗口字段占16位，窗口最大值65535。<br>延迟带宽积很大的网络称为长肥网络，运行在长肥网络上的TCP连接称为长肥管道。卫星信道上的TCP连接就是典型的长肥管道。<br>长肥管道中，仅16位的窗口字段会造成发送的所有的数据都还未到达接收方，但是发送方由于发送窗口已满而不能继续发送，从而降低了网络吞吐量<br>RFC7323中定义了窗口扩大WS选项，用以解决该问题。</p><img src="../img/image-20230529150309647.png" alt="image-20230529150309647" style="zoom:33%;" /><p>移位值S将窗口位数从16位增大到(16+S)位。最大移位值是14，相当于将窗口值增大到30位。</p><p>扩大后的窗口值按以下公式进行计算：<br>$$<br>扩大后的窗口值&#x3D;窗口值×2^S<br>$$<br>窗口扩大选项只允许出现在SYN报文段中，为使用窗口扩大功能，通信双方需要在SYN报文段中包含该选项。</p><p>TCP连接建立后，移位值是与方向绑定的，两个方向的移位值可以不同。</p></li></ul><h4 id="4-4-2-TCP的连接管理"><a href="#4-4-2-TCP的连接管理" class="headerlink" title="4.4.2 TCP的连接管理"></a>4.4.2 TCP的连接管理</h4><p>TCP的连接建立：</p><p>主动建立连接的一端称为客户，被动等待连接建立的一端称为服务器。<br>TCP建立连接的过程中需要在客户和服务器之间进行三次报文段交换，称为三次握手或三报文握手。<br>首先，服务器进程B被动打开连接，从CLOSED状态进入LISTEN状态，等待来自客户的建立连接请求。</p><p>第一次握手：</p><p>客户进程A将SYN标志置1，选择初始序号ISN(A)，以服务器B的IP地址和端口号作为参数，构造TCP报文段，发送给B。</p><p>该报文段称为SYN报文段。</p><p>虽然SYN报文段的数据部分长度为0，但是占用1字节编号，以方便服务器对SYN请求进行肯定应答。</p><p>客户从CLOSED的状态进入SYN-SENT状态。</p><p><img src="/../img/image-20230529152452070.png" alt="image-20230529152452070"></p><p>第二次握手：</p><p>收到客户A的SYN报文段后，服务器进程B发送自己的SYN报文段作为响应。</p><p>报文段中，将SYN标志置1，选择初始序号ISN(B)；并将ACK标志置1，将ISN(A)+1作为确认号。</p><p>该报文段称为SYN-ACK报文段。</p><p>SYN-ACK报文段也占用1字节编号。以方便客户对该SYN请求进行肯定应答。</p><p>服务器从LISTEN状态进入SYN-RCVD状态。</p><p><img src="/../img/image-20230529152503707.png" alt="image-20230529152503707"></p><p>第三次握手：</p><p>收到服务器B的SYN-ACK报文段后，客户进程A发送ACK报文段。</p><p>报文段中，将ACK标志置1，将ISN(B)+1作为确认号。序号字段为ISN(A)+1。</p><p>该报文段称为ACK报文段。</p><p>ACK报文段可以携带数据，也可以不携带数据。如果不携带数据，则不占用序号，客户A随后发送的数据报文段中序号字段任然是ISN(A)+1。</p><p><img src="/../img/image-20230529152512735.png" alt="image-20230529152512735"></p><p>连接建立：</p><p>发完ACK后，客户A从SYN-SENT状态进入ESTABLISHED状态。</p><p>此时，对于客户进程A，TCP连接已经建立，可以开始进行数据传输了。</p><p>服务器B收到客户A的ACK报文段后，从SYN-RCVD状态进入ESTABLISHED状态。</p><p>此时，服务器进程B也可以开始进行数据传输了。</p><img src="../img/image-20230529151942213.png" alt="image-20230529151942213" style="zoom:50%;" /><p>TCP的连接释放：</p><p>数据传输结束后，通信双方都可以主动释放TCP连接。<br>主动释放连接的一端称为客户，被动释放连接的一端称为服务器。<br>TCP释放连接的过程中需要在客户和服务器之间进行四次报文段交换，称为四次握手或四报文握手。<br>假定进程A主动释放连接。<br>将数据传输过程中，进程A发送给进程B的最后一字节编号记为x-1，进程B发送给进程A的最后一字节编号记为y-1。</p><p>第一次握手：</p><p>A向B发送释放连接请求报文段。</p><p>在该报文段内，将FIN标志置1，填写序号为x。</p><p>由于TCP建议连接建立后的所有报文段中ACK标志都置1，所以A也将ACK标志置1，并填写确认号为y，用以肯定应答收到的最后一字节数据。</p><p>该报文段一般称为FIN报文段。</p><p>FIN报文段数据部分长度为0，但是占用1字节编号，以方便通信中对方对FIN请求进行肯定应答。</p><p>客户从ESTABLISHED状态进入FIN-WAIN-1状态。</p><p><img src="/../img/image-20230529152308104.png" alt="image-20230529152308104"></p><p>第二次握手：</p><p>收到A的释放连接请求后，服务器进程B应立即发送ACK。</p><p>在ACK报文段中，B将ACK标志置1，填写确认号为x+1，填写序号为y。如果该ACK不含数据，则不占用字节编号。</p><p>服务器从ESTABLISHED状态进入CLOSE-WAIN状态。</p><p>客户收到ACK报文段后，从FIN-WAIT-1状态进入FIN-WAIT-2状态</p><p>这时的TCP连接处于半关闭状态，</p><p>A不能再发送数据。B如果有数据，还可以继续发送，A仍然要接收。</p><p><img src="/../img/image-20230529152426067.png" alt="image-20230529152426067"></p><p>第三次握手：</p><p>左图示例中，半关闭状态下，B没有发送数据。</p><p>当进程B需要释放连接时，也需要发送一个FIN请求。</p><p>该报文段中，FIN标志置1，序号仍然为y。B也将ACK标志置1，确认号仍然为x+1。</p><p>FIN报文段虽然不包含数据，但占用1字节编号，</p><p>服务器从CLOSE-WAIT状态进入LAST-ACK状态。</p><p><img src="/../img/image-20230529152415876.png" alt="image-20230529152415876"></p><p>第四次握手：</p><p>收到B的FIN请求后，客户进程A应立即发送ACK。</p><p>在ACK报文段中，A将ACK标志置1，填写确认号为y+1，填写序号为x+1。</p><p>客户A发送了ACK报文段后，从FIN-WAIT-2状态进入TIME-WAIT状态。</p><p><img src="/../img/image-20230529152436106.png" alt="image-20230529152436106"></p><p>连接释放：</p><p>服务器进程B收到最后一个ACK报文后，从LAST-ACK状态进入COLOSED状态。此时，对于B来说，TCP连接已关闭。</p><p>客户进程A需要在TIME-WAIT状态等待2MSL时间之后，才能进入COLOSED状态。</p><p>MSL代表最长报文段生存期，RFC793建议MSL取值2分钟。</p><p>当2MSL计时器超时后，A从TIME-WAIT状态进入CLOSED状态。对于A来说，TCP连接才关闭。</p><img src="../img/image-20230529152113777.png" alt="image-20230529152113777" style="zoom:50%;" /><p>TCP的状态变迁：</p><img src="../img/image-20230529152727330.png" alt="image-20230529152727330" style="zoom:50%;" /><img src="../img/image-20230529152749477.png" alt="image-20230529152749477" style="zoom:25%;" /><p><strong>三报文握手建立连接：</strong></p><p>客户（主动打开）：CLOSED → SYN-SENT → ESTABLISHED</p><p>服务器（被动打开）：CLOSED → LISTEN → SYN-RCVD → ESTABLISHED</p><p><strong>四报文握手释放连接：</strong></p><p>客户（主动关闭）：ESTABISHED → FIN-WAIT-1 → FIN-WAIT-2 → TIME-WAIT → CLOSED</p><p>服务器（被动关闭）：ESTABLISHED → CLOSE-WAIT → LAST-ACK → CLOSED</p><p><strong>三报文握手释放连接：</strong></p><p>客户（主动关闭）：ESTABISHED → FIN-WAIT-1 → TIME-WAIT → CLOSED</p><p>服务器（被动关闭）：ESTABLISHED → LAST-ACK → CLOSED</p><p><strong>同时打开：</strong></p><p>客户（服务器）：CLOSED → SYN-SENT → SYN-RCVD → ESTABLISHED</p><p><strong>同时</strong>关闭：</p><p>客户（服务器）：ESTABLISHED → FIN-WAIT-1 → CLOSING → TIME-WAIT → CLOSED</p><p><img src="/../img/image-20230529171931089.png" alt="image-20230529171931089"></p><h3 id="4-5-TCP的可靠传输"><a href="#4-5-TCP的可靠传输" class="headerlink" title="4.5 TCP的可靠传输"></a>4.5 TCP的可靠传输</h3><p>TCP的可靠传输协议是以字节为单位的滑动窗口协议。</p><p>TCP可靠传输的<strong>特点</strong>：</p><p>1.TCP窗口内的序号不是以PDU为单位编号，而是以字节为单位编号。</p><p>2.TCP的发送窗口和接收窗口均大于1。</p><p>3.TCP的发送窗口和接收窗口长度不是固定的，而是动态变化的。</p><p>4.TCP支持多种重传机制：超时重传、快重传和SACK重传。</p><h4 id="4-5-1-超时重传"><a href="#4-5-1-超时重传" class="headerlink" title="4.5.1 超时重传"></a>4.5.1 超时重传</h4><p>如果出现了报文段丢失或差错，TCP将会采用超时重传机制，对超时且未收到ACK的报文段进行自动重传。</p><p>TCP的超时重传采用累积肯定应答，不能单独对失序到达的报文段进行肯定应答。</p><p>TCP的超时重传概念很简单，但实践中超时重传时间（RTO）的选择却比较复杂。</p><p>TCP测量往返路程时间（RTT），计算平滑往返时间，并计算超时重传时间（RTO）。</p><p>SRTT计算：</p><p>TCP记录一个报文段的发出时间，以及收到对应ACK的时间，二者之差作为一个RTT测量值，也称为RTT样本，记作RTT<sub>sam</sub>。</p><p>TCP维护一个RTT的加权平均值，称为平滑往返时间，记作SRTT。</p><p>每进行一次测量，TCP按照如下公式计算新的平滑往返时间：<br>$$<br>𝐒𝐑𝐓𝐓&#x3D;(𝟏−𝜶)∙𝐒𝐑𝐓𝐓+𝛂∙𝑹𝑻𝑻𝒔𝒂𝒎<br>$$<br>RFC6298中，建议 α 取值0.125。</p><p>SRTT的初值应设置为第一个有效的RTT样本。</p><p>类似SRTT这种加权平均值称为指数移动加权平均值，时间越靠近当前时刻的数据权重越大。</p><p>RTTV的计算：</p><p>RFC6298定义了RTT偏差，记作RTTV，用以估算RTT样本偏离SRTT的程度。</p><p>RTT偏差也是一个指数移动加权平均值，每取得一次RTTsam，TCP按照如下公式计算RTTV：<br>$$<br>𝐑𝐓𝐓𝐕&#x3D;(𝟏−𝜷)∙𝐑𝐓𝐓𝐕+𝛃∙|𝐒𝐑𝐓𝐓−𝑹𝑻𝑻𝒔𝒂𝒎|<br>$$<br>RFC6298中，建议 β 取值0.25。</p><p>RTTV的初值设置为第一个RTT样本值的一半。</p><p>RTO的计算：</p><p>超时重传时间RTO应略大于平滑往返时间SRTT。</p><p>每取得一次RTTsam，TCP计算SRTT和RTTV，然后按照如下公式计算RTO：<br>$$<br>𝐑𝐓𝐎&#x3D;𝐒𝐑𝐓𝐓+𝒎𝒂𝒙⁡(𝐆,𝟒×𝑹𝑻𝑻𝑽)<br>$$<br>上式中G代表系统的时钟粒度（clock granularity），即使计算得到的RTTV趋近零，RTO也应该比SRTT大1个时钟粒度。在Linux系统中，TCP时钟粒度为1ms，因此RTO至少比SRTT大1ms。</p><p>RFC6298建议给RTO设定上界和下界，上界的建议值是60秒，下界的建议值是1秒。</p><p>在尚未取得有效RTT样本之前，RFC6298建议将RTO初值设置为1秒。</p><h4 id="4-5-2-快重传"><a href="#4-5-2-快重传" class="headerlink" title="4.5.2 快重传"></a>4.5.2 快重传</h4><p>快重传机制不依赖重传计时器超时，而是基于接收方的反馈信息来引发重传。</p><p>快重传机制通过检测重复ACK（duplicate ACK）事件发现丢包，触发重传。</p><p>由于TCP的确认号具有累积肯定应答功能，因此，当接收方TCP收到失序的报文段时，发送的ACK中的确认号，与确认最后一个按序到达的报文段的确认号一样。这种再次确认某个报文段的ACK称为重复ACK。</p><p>接收方发送ACK的策略：</p><p>对于正常到达的数据报文段，最多延迟500ms就需要发送ACK；连续收到两个正常数据报文段时，必须立即发送ACK。</p><p>对于失序到达的数据报文段，必须立即发送ACK（重复ACK）。</p><img src="../img/image-20230529161319667.png" alt="image-20230529161319667" style="zoom:33%;" /><p>由于网络层不保证按序提交数据报，因此TCP发送方仅收到一个重复ACK，并不能确认是发生了丢包还是发生了失序传输。</p><p>RFC5681规定重复ACK的阈值（DupThresh）默认为3。注意：重复ACK的阈值是允许调整的。</p><p>当收到3个重复的ACK，才认为这个已经被确认4次（1次正常的确认 + 3次重复的确认）的报文段之后的报文段已经丢失。</p><p>当TCP发送方收到3个重复ACK时，TCP就启动快重传，立即重传丢失的报文段而不必等待重传计时器超时。</p><p>启动快重传时，发送方已经发送过的最大字节编号称为恢复点。</p><p>快重传机制属于选择重传协议，启动快重传后，在收到有效ACK前，TCP只能重传一个报文段。</p><p>有效ACK是指确认了新到达数据的ACK。有效ACK包括两种：完全ACK和部分ACK，这两种有效ACK的区分依赖恢复点的定义。</p><p><img src="/../img/image-20230529161411301.png" alt="image-20230529161411301"></p><p>TCP NEWReno版本的快重传算法的要点可以总结如下：</p><p>① 收到3个重复ACK：记录恢复点，启动快重传算法，重传丢失的报文段；</p><p>② 收到部分ACK：立即重传下一个丢失的报文段；</p><p> 收到完全ACK：退出快重传。</p><p><img src="/../img/image-20230529171951335.png" alt="image-20230529171951335"></p><p><img src="/../img/image-20230529172009236.png" alt="image-20230529172009236"></p><p><img src="/../img/image-20230529172025123.png" alt="image-20230529172025123"></p><p><img src="/../img/image-20230529172042276.png" alt="image-20230529172042276"></p><p><img src="/../img/image-20230529172055412.png" alt="image-20230529172055412"><img src="/../img/image-20230529172104334.png" alt="image-20230529172104334"></p><h3 id="4-6-TCP流量控制"><a href="#4-6-TCP流量控制" class="headerlink" title="4.6 TCP流量控制"></a>4.6 TCP流量控制</h3><p>如果接收方应用进程读取数据的速度相对缓慢，而发送方发送数据太多、太快，发送的数据就可能会造成接收缓存溢出。</p><p>TCP的流量控制机制完成了对发送速度的调节，它是基于ACK报文段中的通知窗口长度来实现的。这种方式提供了明确的来自接收方的状态信息，可以避免接收方缓存溢出。</p><p>停等协议和连续ARQ协议，两者都采用了固定长度的发送窗口，不能根据接收方的情况进行调节。</p><p>TCP协议采用了可变长度的发送窗口，其发送窗口根据接收方的通知窗口设定。</p><h3 id="4-7-TCP的拥塞控制"><a href="#4-7-TCP的拥塞控制" class="headerlink" title="4.7 TCP的拥塞控制"></a>4.7 TCP的拥塞控制</h3><h4 id="4-7-1-慢开始"><a href="#4-7-1-慢开始" class="headerlink" title="4.7.1 慢开始"></a>4.7.1 慢开始</h4><p>每收到一个有效ACK，把拥塞窗口增加不超过1 SMSS的数值。</p><p>RFC5681规定的计算公式如下：<br>$$<br>𝐜𝐰𝐧𝐝 +&#x3D;𝐦𝐢𝐧⁡(𝐍，𝐒𝐌𝐒𝐒)<br>$$<br>其中N代表被刚收到的ACK确认的字节数。</p><p>显然，当N&lt;SMSS时，每收到一个ACK，cwnd的增加量要小于SMSS。</p><p>大多数情况下，TCP发送的报文段是全长报文段，此时，每收到一个ACK cwnd增加1 SMSS。</p><p>从TCP发送一轮报文段到TCP收到这些报文段的ACK为止，经历的时间大约等于一个RTT，我们将之称为一个传输轮次。</p><p>使用传输轮次这个术语，更便于我们描述TCP的拥塞控制算法。</p><p>在慢开始阶段，拥塞窗口cwnd随轮次呈指数增长，每经过一个传输轮次，cwnd加倍。</p><img src="../img/image-20230529171330672.png" alt="image-20230529171330672" style="zoom:50%;" /><p>什么时候结束这种指数增长呢？慢开始算法提供了以下几种策略：</p><p>拥塞窗口增长超出慢开始阈值ssthresh</p><p>监测到重传事件时</p><p>TCP维持一个状态变量叫慢开始阈值ssthresh，也译作慢开始门限。</p><p>当cwnd&lt;ssthresh时，TCP采用慢开始算法；</p><p>当cwnd&gt;ssthresh时，TCP停用慢开始算法，改用拥塞避免算法；</p><p>当cwnd&#x3D;ssthresh时，TCP选用慢开始算法或者拥塞避免算法。</p><p>ssthresh的初值应设置得尽可能高，然后ssthresh值随拥塞控制而调整。<br>$$<br>𝐬𝐬𝐭𝐡𝐫𝐞𝐬𝐡&#x3D;𝐦𝐚𝐱⁡(𝐜𝐰𝐧𝐝&#x2F;𝟐, 𝟐×𝐒𝐌𝐒𝐒)<br>$$<br>然后，将cwnd设为1，重新执行慢开始算法。</p><h4 id="4-7-2-拥塞避免"><a href="#4-7-2-拥塞避免" class="headerlink" title="4.7.2 拥塞避免"></a>4.7.2 拥塞避免</h4><p><strong>每经过一个轮次，</strong>cwnd<strong>增加</strong>1<strong>SMSS</strong>。</p><p>在拥塞避免阶段，拥塞窗口cwnd随轮次呈线性增长。</p><p>如果采用延迟ACK，那么拥塞避免阶段cwnd的增长速度将放缓。但仍然呈线性增长。</p><p>出现超时事件，则设置ssthresh &#x3D; cwnd&#x2F;2，然后设置cwnd &#x3D; 1，重新执行慢开始。</p><p>出现快重传或SACK重传事件，执行快恢复算法</p><img src="../img/image-20230529171552618.png" alt="image-20230529171552618" style="zoom:50%;" /><h4 id="4-7-3-快恢复"><a href="#4-7-3-快恢复" class="headerlink" title="4.7.3 快恢复"></a>4.7.3 快恢复</h4><p>当监测到3个重复ACK或收到的SACK满足RFC6675的两个条件之一时，TCP启动快重传或SACK重传，同时启动快恢复。</p><p>RFC规定：快恢复算法与快重传算法一起实现。</p><p>RFC5681规定了TCP Reno版本的快重传和快恢复算法。</p><p>RFC6582规定了TCP NewReno版本的快重传和快恢复算法。</p><p>RFC6675规定了启用SACK支持后的快重传和快恢复算法。</p><p>三个版本的快恢复算法在经过快恢复阶段的调整之后，当退出快恢复算法时，cwnd值和ssthresh值均为启动快恢复算法时的cwnd值的一半。</p><p>退出快恢复算法后，TCP启动拥塞避免算法。</p><p>注意：在TCP快恢复算法执行过程中，如果监测到超时重传事件，TCP将退出快恢复算法，将cwnd设为1 SMSS，重新执行慢开始算法。</p><ul><li>状态变迁图：</li></ul><img src="../img/image-20230529171642256.png" alt="image-20230529171642256" style="zoom:50%;" /><img src="../img/image-20230529171724016.png" alt="image-20230529171724016" style="zoom:50%;" /><p><img src="/../img/image-20230529172130695.png" alt="image-20230529172130695"></p><p><img src="/../img/image-20230529172144224.png" alt="image-20230529172144224"></p><p><img src="/../img/image-20230529172210557.png" alt="image-20230529172210557"></p><p><img src="/../img/image-20230529172226463.png" alt="image-20230529172226463"></p><p><img src="/../img/image-20230529172237464.png" alt="image-20230529172237464"></p><h2 id="第五章：网络层"><a href="#第五章：网络层" class="headerlink" title="第五章：网络层"></a>第五章：网络层</h2><p>MPLS不考</p><p>网络层用处</p><p>IP首部的计算-分片的计算（分成几片，片偏移）</p><p>IP分组转发（作业上），最长前缀匹配算法，路由表</p><p>ICMP差错差错报告报文</p><p>ICMP应用理解，说清楚ping什么的怎么实现的。</p><p>RIP更新算法｜必须会</p><p>三个协议主要的区别</p><p>计算只要求RIP</p><p>NAT四个卷子都有，1.怎么转换数据（公网-专网）2.静态&#x2F;动态NAT，什么时候满足</p><p>主要协议：</p><p>互联网协议（IP）：网络层核心协议。传输层TCP、UDP等协议的数据都通过IP数据报传输。</p><p>互联网控制报文协议（ICMP）：提供与网络配置信息和IP数据报处置相关的诊断和控制信息。</p><p>路由协议：路由器之间用来交换路由信息、链路状态信息或网络拓扑信息的协议，主要包括路由信息协议（RIP）、开放最短通路优先（OSPF）协议和边界网关协议（BGP）。</p><p>多协议标记交换（MPLS）：为IP等网络层协议提供面向连接的服务质量，支持流量工程、负载均衡，支持MPLS VPN等，在运营商和ISP中得到广泛应用。</p><p>相关协议地址解析协议ARP，在第6章中介绍。</p><h3 id="5-1-控制平面与数据平面"><a href="#5-1-控制平面与数据平面" class="headerlink" title="5.1 控制平面与数据平面"></a>5.1 控制平面与数据平面</h3><ul><li>路由器是一种具有多个接口的专用计算机，每个接口连接了不同的网络。<strong>路由器能够连接异构的网络</strong>。</li><li>路由器的主要功能包括<strong>分组转发</strong>和<strong>路由选择</strong>，其中分组转发功能属于数据平面，路由选择功能属于控制平面。</li><li>传统网络中，每台路由器都由实现路由选择功能的控制平面和实现分组转发功能的数据平面构成。</li><li>软件定义网络（SDN）通过将控制平面和数据平面分离，构建可编程控制的网络体系结构。<ul><li>SDN的网络交换设备仅需实现数据平面的功能，控制平面的功能集中在远程控制器上实现。</li><li>为区别于传统路由器，SDN将受控网络交换设备称为SDN网元或SDN交换机。</li><li>SDN的控制平面是集中式实现的。SDN的控制逻辑全部在SDN控制器中实现，SDN控制器通过控制数据平面接口CDPI对SDN交换机进行控制和管理。</li><li>SDN控制器维护流表，并通过OpenFlow协议将流表下发给SDN交换机。</li><li>SDN控制器通过北向接口向网络控制应用程序开放编程能力。</li><li>SDN的数据平面采用通用转发策略，即基于流表的转发策略。流表的匹配域是首部字段的集合。 SDN的转发策略能够匹配协议栈中的多个首部字段。</li></ul></li></ul><img src="../img/image-20230525180834257.png" alt="image-20230525180834257" style="zoom:33%;" /><p><img src="/../img/image-20230525182059314.png" alt="image-20230525182059314"></p><h3 id="5-2-Internet-Protocol-IP"><a href="#5-2-Internet-Protocol-IP" class="headerlink" title="5.2 Internet Protocol (IP)"></a>5.2 Internet Protocol (IP)</h3><ul><li>源主机H1产生的IP数据报，经过多个路由器的转发，最终到达目的主机H2。</li><li>IP数据报的源IP地址IP1和目的IP地址IP2在传送过程中均不发生变化。（暂不考虑NAT）</li><li>IP分组在路由器中转发时仅使用网络层、数据链路层和物理层。</li></ul><img src="../img/image-20230525181128931.png" alt="image-20230525181128931" style="zoom:33%;" /><h4 id="5-2-1-IP数据报格式"><a href="#5-2-1-IP数据报格式" class="headerlink" title="5.2.1 IP数据报格式"></a>5.2.1 IP数据报格式</h4><img src="../img/image-20230525181456632.png" alt="image-20230525181456632" style="zoom:33%;" /><p>⑴ 版本</p><ul><li>版本字段指IP的版本号，占4位</li><li>本实例中，版本字段值为4，代表IPv4。</li></ul><p>⑵ 首部长度</p><ul><li>占4位。首部长度以4字节（32位）为单位。IP首部长度必须是4字节的整数倍。</li><li>最大取值为15，对应IP首部最大长度为60字节，因此IP首部的选项部分不超过40字节。</li><li>本例中，首部长度字段值为5，代表IP首部长度为20字节。未包含选项。</li></ul><p>⑶ 区分服务（DS）</p><ul><li>占6位。区分服务字段和后面的ECN最初被RFC791定义为服务类型字段。后来，RFC2474中重新定义了服务类型字段，但仅使用了前6位，命名为区分服务。</li><li>区分服务字段可以为不同的业务提供不同种类的服务质量。</li><li>本例中，区分服务字段取值为0，代表采用常规的尽力而为交付的IP数据报转发策略<ul><li>支持区分服务（DS）功能的结点称为DS结点。</li><li>DS结点对IP数据报采取的转发处理行为称为每跳行为（Per-Hop Behavior，PHB）。不同的PHB种类代表了不同种类的服务质量。</li><li>6位DS字段可以定义64个区分服务码点DSCP。</li><li><img src="../img/image-20230525181726449.png" alt="image-20230525181726449" style="zoom:33%;" /></li><li>例：<ul><li>定义DSCP：101110为加速转发PHB，加速转发PHB提供非拥塞的网络服务，也就是说，对于DSCP为101110的IP数据报，要求DS结点的输出速率大于输入速率。</li><li>为IP电话语音业务指定DSCP为101110，即所有承载IP电话语音业务的IP数据报的DSCP字段值设置为101110。</li><li>当DS结点转发IP数据报时，即可按照加速转发PHB的要求，提供相应的服务质量。</li></ul></li></ul></li></ul><p>⑷ ECN</p><ul><li>RFC3168将区分服务字段之后保留的两位定义为显式拥塞通知ECN。</li><li>取值“00”代表端系统不支持ECN；</li><li>取值“01”或“10”代表端系统支持ECN；</li><li>对于具有ECN能力的路由器，当网络持续拥塞时，会将经过它的IP数据报的ECN字段设置为“11”，以此标记拥塞。</li></ul><p>⑸ 总长度</p><ul><li>总长度指IP首部和数据部分之和的长度，单位为字节。</li><li>占16位，最大值为65535字节。</li><li>若总长度超过数据链路层MTU，则需要分</li><li>分片后的IP数据报中的总长度字段值为分片的首部和数据部分之和。</li></ul><p>⑹ 标识</p><ul><li>占16位。用来标识主机发送的每一份IP数据报。</li><li>当IP数据报分片时，标识字段的值会被复制到所有的数据报片的标识字段中。</li></ul><p>⑺ 标志</p><ul><li>占3位，其中第一位保留，尚未使用。</li><li>中间一位记为DF位，当 DF&#x3D;1 时，禁止分片；当 DF&#x3D;0 时才允许分片。</li><li>最低位记为MF位。当 MF&#x3D;1 时，表示还有更多分片。当 MF&#x3D;0 时，表示该IP数据报片是最后一个分片。</li></ul><p>⑻ 片偏移</p><ul><li><p>用来指出IP数据报分片后，当前分片在原IP数据报中的位置。</p></li><li><p>占13位，以8字节为单位，如果片偏移字段为n，则代表当前IP数据报片中的第1个数据字节是原IP数据报中的第8n字节。</p><ul><li><p>IP数据报总长度超过MTU则需要分片</p></li><li><p><strong>IPv4中的分片操作可以在发送方主机和任何中间路由器上进行。</strong></p></li><li><p>注意：<strong>IPv6的分片操作仅允许在发送方主机上进行。</strong></p></li><li><p><strong>IP的重组操作只能在最终目的主机上进行。</strong></p></li><li><p>总长度字段、标识字段、标志字段和片偏移字段用来完成IP的分片和重组。</p></li><li><p>IP分片操作时，将原IP数据报的首部复制到各IP数据报片中，并根据需要修改总长度、标志、片偏移等字段的值，重新计算首部检验和。</p></li><li><p><strong>IP数据报片的数据部分长度需要满足以下3个条件：</strong></p><p><strong>① 数据部分长度+首部长度≤MTU；</strong></p><p><strong>② 数据部分长度是8字节整数倍，最后一个分片可以不满足该条件；</strong></p><p><strong>③ 数据部分长度取满足以上两个条件的数值中的最大值。</strong></p></li></ul></li></ul><p>(9)  TTL</p><ul><li>字面含义是生存时间，实际含义为跳数限制，占8位。</li><li>每台路由器在转发数据报时将该值减1。当TTL值减为0时，路由器丢弃该数据报，并发送一个ICMP差错报告报文给发送方。</li></ul><p><strong>⑽</strong> 协议</p><ul><li>协议字段用来指明IP数据报中封装的数据属于哪种协议，占8位。</li><li>协议字段用于实现网络层的复用和分用功能。</li></ul><p>⑾ 首部检验和</p><ul><li>IP首部检验和字段仅检验IP数据报的首部，不包括数据部分，占16位。</li><li>IP首部检验和的计算方法和TCP、UDP的检验和计算方法一样。</li></ul><p>⑿ 源IP地址和目的IP地址</p><ul><li>源IP地址是发送方主机的IP地址，占32位；目的IP地址是接收方主机的IP地址，占32位。</li></ul><p>⒀  选项</p><ul><li>IP支持一些可供选用的选项，用来进行网络的排错或测量等。</li><li>IP选项主要包括源路由选项、时间戳选项、记录路由选项等。目前IP选项很少使用。</li><li>如果选项长度不满足4字节整数倍，需要用全0字段进行填充。</li></ul><p><img src="/../img/image-20230525182652043.png" alt="image-20230525182652043"></p><p><img src="/../img/image-20230525182922388.png" alt="image-20230525182922388"></p><p><img src="/../img/image-20230525183140182.png" alt="image-20230525183140182"></p><p><img src="/../img/image-20230525183218752.png" alt="image-20230525183218752"></p><h4 id="5-2-2-IP分组转发"><a href="#5-2-2-IP分组转发" class="headerlink" title="5.2.2 IP分组转发"></a>5.2.2 IP分组转发</h4><p>目的地址：</p><ul><li><p>目的地址是一个32位值，用于与掩码操作结果做匹配。</p></li><li><p>可以代表以下三种含义：</p><ul><li>① 目的主机地址：当掩码是32位，即掩码为255.255.255.255时，目的地址仅能匹配某一个主机的IP地址，这样的路由表项目称为特定主机路由；</li><li>② 所有主机：当掩码长度是0位，即掩码为0.0.0.0，且目的地址字段值为0.0.0.0时，该目的地址可以匹配所有的IP地址，这样的路由表项目称为默认路由；</li><li>③ 目的网络前缀：当掩码长度是1~31位，目的地址能匹配某个CIDR网络前缀，这样的路由表项目称为目的网络路由</li></ul></li></ul><p>掩码：</p><ul><li>掩码指CIDR掩码，长度32位，可以用来和IP数据报中的目的IP地址做掩码操作。</li></ul><p>下一跳：</p><ul><li>下一跳是一个IP地址，指向一个直接相连的路由器，IP数据报将被转发到该地址。</li></ul><p>转发接口：</p><ul><li>转发接口是一个网络层使用的标识符，用以指明将IP数据报发送到下一跳的网络接口。</li><li>路由表的维护可以由系统管理员手动进行，也可以由一个或多个路由选择协议维护。</li></ul><p>结点进行分组转发的过程如下：</p><p>① 获取目的IP地址：</p><ul><li>解析待发送IP数据报的首部，读取目的IP地址；</li></ul><p>② 按照最长前缀匹配算法搜索路由表：</p><ul><li>在路由表中搜索所有与目的IP地址“匹配”的路由项目。所谓“匹配”是指：<strong>将目的IP地址与路由项目的掩码字段做按位与操作</strong>，<strong>得到的结果与该项目的目的地址字段值相同</strong>。</li><li>在所有与目的IP地址匹配的路由项目中，选出掩码中“1”的位数最多的路由项目，即最长前缀匹配。</li></ul><p>③ 按照最长前缀匹配的路由项目进行转发：</p><ul><li>读取最长前缀匹配的路由项目的接口字段和下一跳字段，将IP数据报从指定接口发送出去。</li></ul><p><img src="/../img/image-20230525185056656.png" alt="image-20230525185056656"></p><p><img src="/../img/image-20230525185113890.png" alt="image-20230525185113890"></p><h3 id="5-3-互联网控制报文协议（ICMP）"><a href="#5-3-互联网控制报文协议（ICMP）" class="headerlink" title="5.3 互联网控制报文协议（ICMP）"></a>5.3 互联网控制报文协议（ICMP）</h3><p>互联网控制报文协议ICMP负责传送差错报告报文以及其他控制信息，它必须与IP一起实现，通常被认为是网络层的一部分。</p><p>ICMP报文可分为两大类：ICMP差错报告报文和ICMP查询&#x2F;信息报文。</p><img src="../img/image-20230525184012120.png" alt="image-20230525184012120" style="zoom:50%;" /><h4 id="5-3-1-ICMP报文格式和种类"><a href="#5-3-1-ICMP报文格式和种类" class="headerlink" title="5.3.1 ICMP报文格式和种类"></a>5.3.1 ICMP报文格式和种类</h4><img src="../img/image-20230525184133348.png" alt="image-20230525184133348" style="zoom:50%;" /><p><strong>⑴ 类型</strong></p><ul><li>用来规定ICMP报文的类别，占8位。</li><li><img src="../img/image-20230525184233597.png" alt="image-20230525184233597" style="zoom:25%;" /></li></ul><p><strong>⑵ 代码</strong></p><ul><li>用于进一步区分相同类型ICMP报文中的不同情况，占8位。</li><li><img src="../img/image-20230525184252771.png" alt="image-20230525184252771" style="zoom:25%;" /></li></ul><p><strong>⑶ 检验和</strong></p><ul><li>用来检验整个ICMP报文，占16位。</li></ul><h4 id="5-3-2-ICMP差错报告报文"><a href="#5-3-2-ICMP差错报告报文" class="headerlink" title="5.3.2 ICMP差错报告报文"></a>5.3.2 ICMP差错报告报文</h4><p>所有的ICMP差错报告报文中的数据字段都具有同样的格式。</p><p>包含一个完整的原始IP数据报（导致差错的IP数据报）的首部副本，以及原始IP数据报的数据部分的前n字节。</p><img src="../img/image-20230525184555013.png" alt="image-20230525184555013" style="zoom:33%;" /><p>ICMP差错报告报文中应包含原始IP数据报中的尽可能多的数据，但要确保新生成的IP数据报长度不超过576字节。</p><h5 id="5-3-2-1-目的不可达差错报告报文"><a href="#5-3-2-1-目的不可达差错报告报文" class="headerlink" title="5.3.2.1 目的不可达差错报告报文"></a>5.3.2.1 目的不可达差错报告报文</h5><p>目的不可达差错报告报文用来表示IP数据报无法送达目的地，可能的原因很多。</p><p>ICMPv4为此报文定义了16个不同的代码，其中有5个是较常用的，分别是：</p><ul><li>网络不可达<ul><li>当路由器发现IP数据报的目的地址与路由表中所有项目都不能匹配时，即完全不知道该从哪个接口转发时，路由器会丢弃IP数据报并产生网络不可达差错报告报文。</li></ul></li><li>主机不可达<ul><li>当路由器发现IP数据报可以直接交付，但目的地址指向的主机不在线或者没有正确响应，造成IP数据报无法转发时，路由器会丢弃IP数据报并产生主机不可达差错报告报文。</li><li>在IPv4网络中，出现这种差错报告的常见原因是路由器没有收到目的主机的ARP响应。</li></ul></li><li>端口不可达<ul><li>当目的主机收到IP数据报后，如果发现指定的目的端口号未被任何进程使用，无法向上层转发数据时，目的主机会丢弃IP数据报，并产生端口不可达差错报告报文。</li><li>端口不可达差错报告报文和UDP一起使用。</li><li>在TCP通信中，如果发现TCP端口号没有绑定应用进程，则返回RST给客户端，TCP连接建立失败。</li></ul></li><li>需要分片<ul><li>当路由器收到DF为1的IP数据报，但转发时发现下一跳链路的MTU值小于该IP数据报的总长度时，路由器丢弃IP数据报，并产生需要分片、但设置了不可分片位差错报告报文</li><li>该报文可简称为需要分片差错报告报文。</li></ul></li><li>管理禁止通信<ul><li>在IP数据报转发路径中，如果路由器或目的主机的管理员配置了某种丢包规则，当丢弃IP数据报时，路由器或目的主机将产生管理禁止通信差错报告报文。</li><li>管理员通常并不希望向源主机通告丢包规则，因此管理员可以配置不发送差错报告报文，或者发送一个其他的差错报告报文。</li></ul></li></ul><h5 id="5-3-2-2-重定向差错报告报文"><a href="#5-3-2-2-重定向差错报告报文" class="headerlink" title="5.3.2.2 重定向差错报告报文"></a>5.3.2.2 重定向差错报告报文</h5><ul><li>如果路由器收到一个IP数据报，查找路由表后发现自己并不是将该IP数据报投递到目的地址的最佳路由，则该路由器发送一个重定向差错报告报文给源主机，同时仍然将该IP数据报转发到正确的下一跳路由器。</li><li>路由器比较IP数据报的输入接口是否与其下一跳转发接口相同，如果输入接口等于输出接口，则需要产生重定向差错报告报文。</li></ul><img src="../img/image-20230525184920085.png" alt="image-20230525184920085" style="zoom:33%;" /><h5 id="5-3-2-3-超时差错报告报文"><a href="#5-3-2-3-超时差错报告报文" class="headerlink" title="5.3.2.3 超时差错报告报文"></a>5.3.2.3 超时差错报告报文</h5><ul><li>每台路由器在转发数据报时都将IP数据报中的TTL值减1。</li><li>当TTL值减为0时，路由器丢弃该IP数据报，并发送一个超时差错报告报文给源主机。</li></ul><img src="../img/image-20230525185013329.png" alt="image-20230525185013329" style="zoom:33%;" /><h4 id="5-3-3-ICMP应用实例"><a href="#5-3-3-ICMP应用实例" class="headerlink" title="5.3.3 ICMP应用实例"></a>5.3.3 ICMP应用实例</h4><p><img src="/../img/image-20230525185303292.png" alt="image-20230525185303292"></p><h3 id="5-4-路由选择协议"><a href="#5-4-路由选择协议" class="headerlink" title="5.4 路由选择协议"></a>5.4 路由选择协议</h3><p>可以用图来形式化描述路由选择算法。</p><p>图 G&#x3D;(N, E)是一个具有N个顶点和E条边的集合。</p><p>图中的一个顶点代表一台路由器或者一个其他结点，这是做出分组转发决定的点。</p><p>两个顶点之间的边代表两台相邻路由器之间的链路。每条边用一个值代表它的开销。</p><p>E中的任一条边(x,y)，我们用𝐜(𝐱,𝐲)代表边(𝐱,𝐲)的开销。</p><p>一旦图中的每条边都给定了开销，路由选择算法找出从源到目的之间的最低开销路径，即最佳路径</p><img src="../img/image-20230530084400040.png" alt="image-20230530084400040" style="zoom:33%;" /><p>路由选择协议为路由选择算法传递和提供边的“开销”。</p><p>不同的路由选择协议，采用不同的度量指标，对边的开销的定义也不同。</p><p>即使网络拓扑相同，不同的路由协议也有可能得出不同的最佳路由。</p><p>常用的路由选择算法包括：</p><ul><li><p>距离向量算法（DV）</p></li><li><p>链路状态算法（LS）</p></li><li><p>路径向量算法（PV）</p></li><li><p>外部网关协议(EGP)<br>在自治系统之间使用的路由选择协议<br>也称为<strong>域间路由选择</strong>协议<br>常见协议：<br>边界网关协议(BGP)</p></li><li><p>内部网关协议(IGP)<br>在一个自治系统内部使用的路由选择协议<br>也称为<strong>域内路由选择</strong>协议<br>常见协议：<br>路由信息协议(RIP)<br>开放最短通路优先(OSPF)协议</p></li></ul><h4 id="5-4-1-路由信息协议（RIP）"><a href="#5-4-1-路由信息协议（RIP）" class="headerlink" title="5.4.1 路由信息协议（RIP）"></a>5.4.1 路由信息协议（RIP）</h4><p>(1)距离向量算法（DV）：</p><p>DV算法不需要知道网络的全局信息，它是一种分布式的、迭代的、异步的算法。</p><p>DV算法的基础是Bellman-Ford方程<br>$$<br>𝐝（𝐱,𝐲）&#x3D;𝐦𝐢𝐧_𝐯 {𝐜(𝐱,𝐯)+𝐝(𝐯,𝐲)}，𝐯∈{𝐱的邻居顶点}<br>$$</p><p>Bellman-Ford方程给出了一种求顶点x到顶点y的最低开销的方法。DV算法利用Bellman-Ford方程求解最短路径。</p><p>遍历x的所有邻居顶点v，计算x到邻居顶点v的开销与v到y的最低开销之和，其中的最小值就是x到y的最低开销。</p><img src="../img/image-20230530092716092.png" alt="image-20230530092716092" style="zoom:50%;" /><p>(2)RIP概述:</p><p>RIP规定所有路由器到与其直接连接的网络的开销为1。</p><p>RIP将两台路由器之间的最低开销称为“距离”，也称为“跳数”。每经过一台路由器，跳数加1。</p><p>RIP允许一条路径的“距离”的最大值为15，因此“距离”等于16即相当于不可达。</p><p>RIP仅适用于小型自治系统。</p><p>(3)RIP更新算法:</p><img src="../img/image-20230530092900953.png" alt="image-20230530092900953" style="zoom:50%;" /><ul><li><p>收到来自邻居路由器G的RIP报文时，路由器R首先对RIP报文中的每一个路由项目，将距离加一，即改为𝐝+𝟏，并将下一跳记为G。</p></li><li><p>然后对RIP报文中的每一个路由项目，按照以下算法更新路由信息数据：<br>① 如果原路由信息数据中不包含该目的前缀（目的地址&#x3D;D 且 掩码&#x3D;M）的路由项目，则把RIP报文中的项目添加到原路由信息数据中；<br>② 如果原路由信息数据中包含该目的前缀（目的地址&#x3D;D 且 掩码&#x3D;M）的路由项目，且其下一跳地址是G，则用RIP报文中的项目更新原路由信息数据中的路由项目。<br>③ 如果原路由信息数据中包含该目的前缀（目的地址&#x3D;D 且 掩码&#x3D;M）的路由项目，但下一跳地址不是G，则需要比较距离。只有RIP报文中项目的距离（𝐝+𝟏）小于原路由信息数据中的距离，才用RIP报文中的项目更新原路由信息数据中的路由项目。</p></li><li><p>根据路由信息数据更新路由表。</p></li></ul><p>(3)RIP其他规定:</p><p>路由器最初仅知道直连网络的路由信息。</p><p>RIP规定每间隔30秒，路由器都需要发送RIP路由更新报文给所有邻居。RIP路由更新报文中的路由项目包括本路由器已知的全部路由信息。</p><p>每台路由器只和数目有限的相邻路由器交换并更新路由信息。</p><p>RIP规定超时计时器，默认为3分钟，若超时计时器到期，仍未收到邻居路由器G的路由更新报文，则将下一跳为G的所有路由都标记为无效，即将距离修改为16。</p><p>RIP规定垃圾回收计时器，默认为2分钟，若垃圾回收计时器到期，才会删除无效路由项目。</p><p>(4)RIP报文格式：</p><img src="../img/image-20230530093852714.png" alt="image-20230530093852714" style="zoom:33%;" /><h4 id="5-4-2-开放最短通路优先（OSPF）"><a href="#5-4-2-开放最短通路优先（OSPF）" class="headerlink" title="5.4.2 开放最短通路优先（OSPF）"></a>5.4.2 开放最短通路优先（OSPF）</h4><p>（没有题，粗略看一下）</p><p>OSPF是互联网的正式标准，IPv4使用的是第2版的OSPF，由RFC2328规定。</p><p>OSPF也支持CIDR，其最大特点是支持在自治系统内再次分层。</p><p>OSPF支持身份鉴别。</p><p>OSPF采用链路状态算法。</p><p>(1)链路状态算法（LS算法）：</p><p>LS算法是一种使用全局信息的算法。</p><p>在LS算法中，网络拓扑和所有的链路开销都是已知的，可以用作LS算法的输入，计算最小开销。</p><p>在实践中，链路开销通常通过链路状态广播通知给网络中的其他路由器。</p><p>链路状态广播的结果就是网络中的所有路由器都拥有包含网络拓扑和所有链路开销的一致数据，这些数据称为链路状态数据库（LSDB）。</p><p>LS算法利用链路状态数据库进行路由计算。</p><p>基于链路状态的路由选择分为两个阶段：链路状态广播阶段和路由计算阶段。</p><p>OSPF采用的LS算法是Dijkstra算法。</p><h4 id="5-4-3-边界网关协议（BGP）"><a href="#5-4-3-边界网关协议（BGP）" class="headerlink" title="5.4.3 边界网关协议（BGP）"></a>5.4.3 边界网关协议（BGP）</h4><p>（没有题，粗略看看）</p><p>边界网关协议BGP是目前域间路由协议的事实标准，其当前版本号为4，记为BGP-4，由RFC4271规定。</p><p>BGP一直被认为是互联网最复杂的部分之一。</p><p>BGP支持CIDR，支持鉴别。</p><p>BGP采用路径向量算法，寻找有效路径。</p><p>BGP基于策略，选择“最佳”路由。</p><h3 id="5-5-专用网相关概念"><a href="#5-5-专用网相关概念" class="headerlink" title="5.5 专用网相关概念"></a>5.5 专用网相关概念</h3><p>专用网是指企业或机构内部专用的网络。</p><p>专用网上的主机与公用的互联网上的主机通信需要利用网络地址转换(NAT) 。</p><p>专用网上的地址称为专有地址（Private Address） ，它们仅需要在一定的范围内唯一。在互联网的不同部分，这些IP地址可以被重复使用。</p><p>网络地址转换也被用来延缓IP地址空间耗尽。</p><p>需要向IANA申请才能使用的全球唯一的IP地址称为全球地址（Global Address）或公网地址。</p><p>使用NAT需要在专用网络连接到互联网的路由器上安装NAT软件。</p><p>安装了NAT软件的路由器称为NAT路由器，它至少应具有一个有效的全球地址。</p><p>NAT存在两种形式：</p><ol><li>基本NAT</li><li>网络地址与端口转换（NAPT）</li></ol><h2 id="第六章"><a href="#第六章" class="headerlink" title="第六章"></a>第六章</h2><p>掌握概述部分，除了流量控制</p><p>以太网——网桥和交换机要求会应用（自学习算法原理，交换机例子——最后交换表是什么（计算））vlan广播域，Q标签真格式对比，</p><p>ARP地址解析过程会应用（解析吓一跳地址，广播ARP请求&#x2F;单播ARP响应）</p><p>熟悉无线局域网组成，要求比较高的是MAC针的格式，控制帧最重要。</p><p>MAC分布协调功能DCF</p><p>PPP协议的组成、帧的封装的方式</p><h3 id="6-1-帧定界方法"><a href="#6-1-帧定界方法" class="headerlink" title="6.1 帧定界方法"></a>6.1 帧定界方法</h3><h4 id="6-1-1-标志字符法"><a href="#6-1-1-标志字符法" class="headerlink" title="6.1.1 标志字符法"></a>6.1.1 标志字符法</h4><p>定界方法：对于以字符为基本传送单元的协议，可以指定特殊字符作为帧开始和帧结束的标志字符，称为帧定界符。</p><p>透明传输：如果标志字符出现在数据中时，会干扰帧定界功能的实现。采用字符填充法实现透明传输。</p><p>典型协议：PPP协议用于异步传输时，采用标志字符法。</p><p>帧定界符：0x7E</p><p>转义字符：0x7D</p><h4 id="6-1-2-标志位法"><a href="#6-1-2-标志位法" class="headerlink" title="6.1.2 标志位法"></a>6.1.2 标志位法</h4><p>定界方法：对于以二进制位（比特）为基本传送单元的协议，可以指定特殊的位组合作为帧开始或帧结束的标志。 </p><p>透明传输：采用二进制位填充法，避免传送的数据中包含标志位组合，实现透明传输</p><p>典型协议：高级数据链路控制协议HDLC，以及PPP协议用于同步传输时，采用标志位法实现帧定界，规定位串01111110作为帧开始和帧结束标志。</p><p>并采用零比特填充法实现透明传输。</p><img src="../img/image-20230602112700736.png" alt="image-20230602112700736" style="zoom:33%;" /><h4 id="6-1-3-特殊的物理层编码法"><a href="#6-1-3-特殊的物理层编码法" class="headerlink" title="6.1.3 特殊的物理层编码法"></a>6.1.3 特殊的物理层编码法</h4><p>定界方法：利用物理层的特殊编码标记帧的边界。要求：物理层编码方案中包含冗余编码。</p><p>透明传输：由于冗余编码不会出现在常规数据中，因而不需要额外处理，即可实现透明传输。</p><p>典型协议：以太网协议采用特殊的物理层编码法。</p><h3 id="6-2-寻址"><a href="#6-2-寻址" class="headerlink" title="6.2 寻址"></a>6.2 寻址</h3><p>MAC地址分为两个部分，每部分占3字节。</p><ul><li><p>组织唯一标识符OUI：前三个字节（高24位），由IEEE的注册管理机构负责分配；</p></li><li><p>扩展标识符EI：后三个字节（低24位），由获得OUI的厂商自行分配。</p></li></ul><p>MAC地址的最高字节的最低位为I&#x2F;G位。</p><ul><li>I&#x2F;G位为0时， MAC地址代表单站地址</li><li>I&#x2F;G位为1时，MAC地址代表组地址。</li></ul><p>MAC地址的最高字节的次低位为U&#x2F;L位</p><ul><li>U&#x2F;L位为0时代表全局管理</li><li>U&#x2F;L位为1时代表本地管理</li></ul><p>48位全为1的地址是广播地址</p><img src="../img/image-20230602113015221.png" alt="image-20230602113015221" style="zoom:50%;" /><h3 id="6-3-差错控制"><a href="#6-3-差错控制" class="headerlink" title="6.3 差错控制"></a>6.3 差错控制</h3><p>在数据链路层，目前应用广泛的差错检测算法是循环冗余检验（Cyclic Redundancy Check，CRC）</p><p>冗余码和帧检验序列FCS</p><p>发送方，把数据划分为组，每次发送一组数据。</p><p>假定每组数据k比特，将待发送数据记为M。</p><p>发送方利用CRC算法在数据M的后面添加供差错检测用的r比特冗余码，一起发送出去</p><p>对于一个帧来说，为了进行检错而添加的冗余码常称为帧检验序列FCS</p><p>在数据后面增加r比特冗余码，增大了数据传输的开销，但提供了差错检测能力</p><img src="../img/image-20230602113121296.png" alt="image-20230602113121296" style="zoom:50%;" /><p>① 计算2^r×M，这相当于在M后面添加r个0，得到一个(k+r)位的二进制数。</p><p>② 用得到的(k+r)位数除以收发双方事先商定的二进制数P，得出的商记为Q，而余数记为R。</p><p>R就是CRC算法计算的冗余码。</p><img src="../img/image-20230602113507543.png" alt="image-20230602113507543" style="zoom:33%;" /><p>CRC检验也称为多项式编码，其基本思想是将二进制数看作系数为0或1的多项式，对二进制数的计算被解释为多项式计算。</p><p>收发双方商定的P来源于生成多项式P(𝑥)，其最高位和最低位系数必须是1。</p><p>经过精心挑选的生成多项式P(𝑥)可以确保CRC算法漏判的概率极低。</p><p>CRC-32被IEEE应用在包括以太网在内的多种数据链路层协议中：</p><p><img src="/../img/image-20230602113531582.png" alt="image-20230602113531582"></p><p>CRC-32中的二进制数P：</p><p><img src="/../img/image-20230602113536889.png" alt="image-20230602113536889"></p><p>CRC属于检错码。</p><h3 id="6-4-介质访问控制（MAC）"><a href="#6-4-介质访问控制（MAC）" class="headerlink" title="6.4 介质访问控制（MAC）"></a>6.4 介质访问控制（MAC）</h3><p>实现介质访问控制的方法可以分为三类：</p><ol><li>静态信道分配方法</li><li>随机接入方法</li><li>受控接入方法</li></ol><h4 id="6-4-1-静态信道分配方法"><a href="#6-4-1-静态信道分配方法" class="headerlink" title="6.4.1 静态信道分配方法"></a>6.4.1 静态信道分配方法</h4><p>常见的静态信道划分方法包括频分多路复用、时分多路复用和码分多路复用。</p><p>码分多路复用也称为码分多址（CDMA）。</p><img src="../img/image-20230602113745370.png" alt="image-20230602113745370" style="zoom:50%;" /><p>频分多路复用：</p><p>频分多路复用FDM将信道的划分为N个不同的频段，</p><p>把每个频段分配给N个站点中的一个。</p><p>时分多路复用：</p><p>时分多路复用TDM将时间划分为时间帧，称为时分多路复用帧，并进一步将每个TDM帧划分为N个时隙（slot）。</p><p>把每个时隙分配给N个站点中的一个。 </p><p>码分多址：</p><p>码分多址CDMA为每个站点分配一种不同的码片序列，这些精心选择的码片序列两两正交。</p><p>每个站点用它唯一的码片序列对它发送的数据进行编码。</p><h4 id="6-4-2-随机接入方法"><a href="#6-4-2-随机接入方法" class="headerlink" title="6.4.2 随机接入方法"></a>6.4.2 随机接入方法</h4><p>随机接入方法是一种基于争用的信道分配方法。</p><p>随机接入的特点是所有站点可随机地发送数据。</p><p>如果恰巧有两个或更多的站点在同一时刻发送数据，那么在共享信道上就会产生了冲突。随机接入方法必须有处理冲突的方法。</p><p>随机接入的MAC协议主要包括：</p><ul><li>纯ALOHA</li><li>时隙ALOHA</li><li>CSMA&#x2F;CD：带冲突检测的载波监听多路访问</li><li>CSMA&#x2F;CA：带冲突避免的载波感应多路访问</li></ul><h3 id="6-5-以太网的帧格式"><a href="#6-5-以太网的帧格式" class="headerlink" title="6.5 以太网的帧格式"></a>6.5 以太网的帧格式</h3><img src="../img/image-20230602114828438.png" alt="image-20230602114828438" style="zoom:50%;" /><ul><li>前导码：</li></ul><p>占7个字节，取值为交替的1和0。其作用是使接收端的适配器在接收MAC帧时能够迅速调整其时钟频率， 实现位同步”</p><ul><li>帧开始符SFD：</li></ul><p>占1个字节，取值“10101011”。SFD的前六位的作用和前导码一样，最后的两个连续的“1”代表帧即将开始传送。</p><ul><li>目的地址：</li></ul><p>占6字节，接收方MAC地址。</p><ul><li>类型&#x2F;长度：</li></ul><p>占2字节。由于历史原因，该字段包含两种含义。当取值小于等于1500时，该字段理解为长度字段，代表基本帧中MAC客户数据的字节数。当取值大于等于1536时，该字段理解为类型字段，代表MAC客户协议类型。</p><ul><li>源地址：</li></ul><p>占6字节，发送方MAC地址。</p><ul><li>MAC客户数据（MAC Client Data）：</li></ul><p>MAC客户数据包含可选的标签和上层协议数据。</p><p>IEEE 802.3定义了三种类型的以太网帧：基本帧（basic frame）、Q标签帧（Q-tagged frame）和信封帧（envelope frame）。</p><p>基本帧不包含标签，Q标签帧和信封帧包含标签。</p><ul><li>填充：</li></ul><p>以太网最小帧长为64字节。当上层协议交下来的数据小于46字节，将导致封装的以太网帧不足64字节，以太网协议实体必须在填充字段用“0”补足。</p><ul><li>帧检验序列FCS：</li></ul><p>占4字节，利用CRC算法进行帧检验。帧检验计算范围包括目的地址、源地址、类型&#x2F;长度、MAC客户数据和填充字段。</p><p>以太网的FCS采用IEEE标准的CRC32进行计算利用CRC算法进行帧检验。</p><ul><li>载波延伸：</li></ul><p>在千兆以太网中，当工作在半双工模式时，为了保持CSMA&#x2F;CD协议的有效性，需要在较短的帧后补充载波延伸字段，该字段值全为“0”。</p><p>当工作在全双工模式时，不需要该字段。</p><h3 id="6-6-网桥和交换机"><a href="#6-6-网桥和交换机" class="headerlink" title="6.6 网桥和交换机"></a>6.6 网桥和交换机</h3><ul><li>我们可以使用中继器或集线器来扩展以太网的地理覆盖范围。</li><li>中继器和集线器都属于物理层设备，通过中继器或集线器的接口连接在一起的所有站点都处于同一个<strong>冲突域</strong>。</li><li><strong>冲突域指的是站点发送的物理层信号可以到达的范围</strong>。</li><li>处于同一个冲突域内的站点，在任一时刻只能有一个站点发送数据，否则将会发生冲突。</li><li>随着100BASE-T网络和交换机的普及，集线器最终被<strong>交换机</strong>所替代。交换机本质上是多接口、高性能的网桥。</li><li>交换机工作在数据链路层，也称为<strong>二层交换机</strong>。</li><li>交换机的每个端口下连接的站点处于同一个冲突域。</li></ul><img src="../img/image-20230602115417128.png" alt="image-20230602115417128" style="zoom:50%;" /><p>每台交换机维护一张或多张交换表，其中包括三个字段：</p><ol><li>MAC地址：记录与特定端口相关联的设备的MAC地址。</li><li>端口：指示与特定MAC地址相关联的设备所连接的交换机端口。</li><li>老化时间：记录自学习该条目后经过的时间。</li></ol><p>当交换机接收到一个数据帧时，它会首先进行自学习，将数据帧中源MAC地址与接收到的端口相关联，并将该信息添加到交换表中。然后，交换机根据交换表中的信息，将数据帧转发到目标MAC地址对应的端口。</p><p>如果交换表中的某个条目的老化时间达到了设定的“有效期”，交换机将会删除该条目，以确保交换表中的条目与网络中的设备保持同步和准确性。这样，交换表可以根据网络流量和设备的连接状态进行动态更新和维护，以提供高效的数据转发。</p><ul><li><strong>自学习算法</strong></li><li>交换机使用数据帧中的源MAC地址查找交换表。</li><li>如果找不到匹配的项目，则将源MAC地址和对应的端口写入交换表。</li><li>如果能找到匹配的项目，则更新老化时间。</li><li><strong>转发算法</strong></li><li>交换机使用数据帧中的目的MAC地址查找交换表。</li><li>如果找不到匹配的项目，则将数据帧向除接收端口以外的所有端口进行转发。</li><li>如果能找到匹配的项目，则根据交换表中指定的端口进行转发。</li><li>如果交换表中指定的端口正好是接收端口，则丢弃数据帧，不进行转发。</li></ul>]]></content>
    
    
    <categories>
      
      <category>古老的学习笔记</category>
      
      <category>Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Network</tag>
      
      <tag>TCP</tag>
      
      <tag>IP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Node</title>
    <link href="/2023/02/19/Node/"/>
    <url>/2023/02/19/Node/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Buffer"><a href="#1-Buffer" class="headerlink" title="1. Buffer"></a>1. Buffer</h2><h3 id="创建方法"><a href="#创建方法" class="headerlink" title="创建方法"></a>创建方法</h3><p>相当于申请了 10 字节的内存空间，每个字节的值为 0</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> buf1 = <span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">alloc</span>(<span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure><p>buffer 中可能存在旧的数据, 可能会影响执行结果，所以叫 unsafe</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> buf2 = <span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">allocUnsafe</span>(<span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure><p>将其他内容转成Buffer</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> buf3 = <span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">from</span>(<span class="hljs-string">&#x27;Hello&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="toString方法"><a href="#toString方法" class="headerlink" title="toString方法"></a>toString方法</h3><p>Buffer中存储的数据可以通过<code>toString</code>方法转换为字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> buf_4 = <span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">from</span>([<span class="hljs-number">105</span>, <span class="hljs-number">108</span>, <span class="hljs-number">111</span>, <span class="hljs-number">118</span>, <span class="hljs-number">101</span>, <span class="hljs-number">121</span>, <span class="hljs-number">111</span>, <span class="hljs-number">117</span>]);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(buf_4.<span class="hljs-title function_">toString</span>())<br><span class="hljs-comment">// iloveyou</span><br></code></pre></td></tr></table></figure><h3 id="Buffer可以通过-来访问其成员"><a href="#Buffer可以通过-来访问其成员" class="headerlink" title="Buffer可以通过[]来访问其成员"></a>Buffer可以通过[]来访问其成员</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> buf = <span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">from</span>(<span class="hljs-string">&quot;hello&quot;</span>)<br>buf[<span class="hljs-number">0</span>] = <span class="hljs-number">90</span><br><br>buf[<span class="hljs-number">0</span>] = <span class="hljs-number">361</span> <span class="hljs-comment">//这样会溢出，舍弃高位</span><br></code></pre></td></tr></table></figure><h2 id="2-fs模块（file-system）"><a href="#2-fs模块（file-system）" class="headerlink" title="2. fs模块（file system）"></a>2. fs模块（file system）</h2><p>fs全称为file system ，称之为文件系统 ，可以对计算机中的磁盘进行操作。</p><h3 id="2-1-文件写入"><a href="#2-1-文件写入" class="headerlink" title="2.1 文件写入"></a>2.1 文件写入</h3><h4 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><br><span class="hljs-comment">// write a motto to a text file</span><br>motto = <span class="hljs-string">&#x27;To see the world, things dangerous to come to, to see behind walls, to draw closer, to find each other and to feel. That is the purpose of life&#x27;</span><br><br><span class="hljs-comment">//async mode</span><br>fs.<span class="hljs-title function_">writeFile</span>(<span class="hljs-string">&#x27;./FileSystem/Motto.txt&#x27;</span>, motto, <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// callback function</span><br>    <span class="hljs-keyword">if</span> (err) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;failed&#x27;</span>)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;succeeded&quot;</span>)<br>&#125;)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;this message goes first&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p>文件异步写入，先执行<code>console.log(&#39;this message goes first&#39;)</code> 再执行<code>writeFile</code>的回调函数</p><h4 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><br><span class="hljs-comment">// write a motto to a text file</span><br>motto = <span class="hljs-string">&#x27;To see the world, things dangerous to come to, to see behind walls, to draw closer, to find each other and to feel. That is the purpose of life&#x27;</span><br><br><span class="hljs-comment">// Sync mdoe</span><br>fs.<span class="hljs-title function_">writeFileSync</span>(<span class="hljs-string">&#x27;./FileSystem/Motto.txt&#x27;</span>, motto)<br></code></pre></td></tr></table></figure><h4 id="追加写入"><a href="#追加写入" class="headerlink" title="追加写入"></a>追加写入</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><br>fs.<span class="hljs-title function_">appendFile</span>(<span class="hljs-string">&#x27;./FileSystem/Motto.txt&#x27;</span>, <span class="hljs-string">&#x27;\r\nThis is the motto of life magazine&#x27;</span>, <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;NotOK&quot;</span>)<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;OK&quot;</span>)<br>&#125;)<br><br><span class="hljs-comment">// fs.appendFileSync(&#x27;./FileSystem/Motto.txt&#x27;, &#x27;\r\nThis is the motto of life magazine&#x27;)</span><br></code></pre></td></tr></table></figure><h4 id="流式写入"><a href="#流式写入" class="headerlink" title="流式写入"></a>流式写入</h4><p>适合大文件写入和频繁写入的场景</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><br><span class="hljs-comment">// 创建通道</span><br><span class="hljs-keyword">let</span> ws = fs.<span class="hljs-title function_">createWriteStream</span>(<span class="hljs-string">&#x27;./FileSystem/观书有感.txt&#x27;</span>);<br><br><span class="hljs-comment">// 写入内容</span><br>ws.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;半亩方塘一鉴开\r\n&#x27;</span>);<br>ws.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;天光云影共徘徊\r\n&#x27;</span>);<br>ws.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;问渠那得清如许\r\n&#x27;</span>);<br>ws.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;为有源头活水来\r\n&#x27;</span>);<br><br><span class="hljs-comment">// 关闭通道</span><br>ws.<span class="hljs-title function_">end</span>();<br></code></pre></td></tr></table></figure><h3 id="2-2-文件读取"><a href="#2-2-文件读取" class="headerlink" title="2.2 文件读取"></a>2.2 文件读取</h3><h4 id="异步-1"><a href="#异步-1" class="headerlink" title="异步"></a>异步</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><br>fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./FileSystem/Motto.txt&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;读取失败&#x27;</span>)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data.<span class="hljs-title function_">toString</span>())<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="同步-1"><a href="#同步-1" class="headerlink" title="同步"></a>同步</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><br><span class="hljs-keyword">let</span> data = fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">&quot;./FileSystem/Motto.txt&quot;</span>, <span class="hljs-string">&quot;utf-8&quot;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data)<br></code></pre></td></tr></table></figure><h4 id="流式读取"><a href="#流式读取" class="headerlink" title="流式读取"></a>流式读取</h4><p>适合大文件的读取</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><br><span class="hljs-keyword">const</span> filePath = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">const</span> rs = fs.<span class="hljs-title function_">createReadStream</span>(filePath)<br><br><br><span class="hljs-comment">// 绑定data事件 chunk是从文件中读取的内容，为Buffer类型</span><br>rs.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;data&#x27;</span>, <span class="hljs-function"><span class="hljs-params">chunk</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(chunk)<br>&#125;)<br><br><span class="hljs-comment">// end事件（可选）</span><br>rs.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;end&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;读取完成&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="2-3文件移动与重命名"><a href="#2-3文件移动与重命名" class="headerlink" title="2.3文件移动与重命名"></a>2.3文件移动与重命名</h3><p><code>rename</code>方法</p><h4 id="重命名"><a href="#重命名" class="headerlink" title="重命名"></a>重命名</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><br><br><span class="hljs-comment">// 重命名</span><br>fs.<span class="hljs-title function_">rename</span>(<span class="hljs-string">&#x27;./FileSystem/观书有感.txt&#x27;</span>, <span class="hljs-string">&#x27;./FileSystem/guanshuyougan.txt&#x27;</span>, <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;操作失败&#x27;</span>)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;操作成功&quot;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><br><span class="hljs-comment">// 移动</span><br>fs.<span class="hljs-title function_">rename</span>(<span class="hljs-string">&#x27;./FileSystem/观书有感.txt&#x27;</span>, <span class="hljs-string">&#x27;./guanshuyougan.txt&#x27;</span>, <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;操作失败&#x27;</span>)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;操作成功&quot;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="2-4-文件删除"><a href="#2-4-文件删除" class="headerlink" title="2.4 文件删除"></a>2.4 文件删除</h3><p><code>unlink</code> <code>rm</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br>path = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-comment">// unlink方法</span><br>fs.<span class="hljs-title function_">unlink</span>(path, <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;删除失败&quot;</span>)<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;删除成功&quot;</span>)<br>&#125;)<br><br><span class="hljs-comment">// rm方法默认递归删除目录</span><br>fs.<span class="hljs-title function_">rm</span>(path, <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;删除失败&quot;</span>)<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;删除成功&quot;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="2-5-文件夹操作"><a href="#2-5-文件夹操作" class="headerlink" title="2.5 文件夹操作"></a>2.5 文件夹操作</h3><p>文件夹操作</p><table><thead><tr><th>方法</th><th>语法</th><th>说明</th></tr></thead><tbody><tr><td>mkdir &#x2F; mkdirSync</td><td><code>fs.mkdir(path[, options], callback)</code>&#x2F;<code>fs.mkdirSync(path[, options])</code></td><td>创建文件夹</td></tr><tr><td>readdir &#x2F; readdirSync</td><td><code>fs.readdir(path[, options], callback)</code>&#x2F;<code>fs.readdirSync(path[, options])</code></td><td>读取文件夹</td></tr><tr><td>rmdir &#x2F; rmdirSync</td><td><code>fs.rmdir(path[, options], callback)</code>&#x2F;<code>fs.rmdirSync(path[, options])</code></td><td>删除文件夹</td></tr></tbody></table><p>创建和删除中option可以为<code> &#123;recursive: true&#125;</code>此设置为递归创建&#x2F;删除</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//异步删除文件夹</span><br>fs.<span class="hljs-title function_">rmdir</span>(<span class="hljs-string">&#x27;./page&#x27;</span>, <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br><span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;删除成功&#x27;</span>);<br>&#125;);<br><span class="hljs-comment">//异步递归删除文件夹</span><br>fs.<span class="hljs-title function_">rmdir</span>(<span class="hljs-string">&#x27;./1&#x27;</span>, &#123;<span class="hljs-attr">recursive</span>: <span class="hljs-literal">true</span>&#125;, <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br><span class="hljs-keyword">if</span>(err) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;递归删除&#x27;</span>)<br>&#125;);<br><span class="hljs-comment">//同步递归删除文件夹</span><br>fs.<span class="hljs-title function_">rmdirSync</span>(<span class="hljs-string">&#x27;./x&#x27;</span>, &#123;<span class="hljs-attr">recursive</span>: <span class="hljs-literal">true</span>&#125;)<br></code></pre></td></tr></table></figure><h3 id="2-6-查看资源状态"><a href="#2-6-查看资源状态" class="headerlink" title="2.6 查看资源状态"></a>2.6 查看资源状态</h3><table><thead><tr><th>方法</th><th>语法</th><th>说明</th></tr></thead><tbody><tr><td>stat&#x2F;statSync</td><td><code>fs.stat(path[, options], callback)</code></td><td>查看资源的详细信息</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//异步获取状态</span><br>fs.<span class="hljs-title function_">stat</span>(<span class="hljs-string">&#x27;./data.txt&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>&#125;);<br><span class="hljs-comment">//同步获取状态</span><br><span class="hljs-keyword">let</span> data = fs.<span class="hljs-title function_">statSync</span>(<span class="hljs-string">&#x27;./data.txt&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="2-7-获取绝对路径"><a href="#2-7-获取绝对路径" class="headerlink" title="2.7 获取绝对路径"></a>2.7 获取绝对路径</h3><p>相对路径可能导致意想不到的bug，<code>__dirname</code>和相对路径拼接生成绝对路径更为安全</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(__dirname)<br></code></pre></td></tr></table></figure><h3 id="2-8-练习：批量重命名"><a href="#2-8-练习：批量重命名" class="headerlink" title="2.8 练习：批量重命名"></a>2.8 练习：批量重命名</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><br><span class="hljs-keyword">const</span> data = fs.<span class="hljs-title function_">readdirSync</span>(<span class="hljs-string">&quot;./FileSystem&quot;</span>)<br><br><span class="hljs-comment">//重命名</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; data.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">const</span> nowName = <span class="hljs-string">&#x27;./FileSystem/&#x27;</span> + data[i]<br>    <span class="hljs-keyword">const</span> newName = <span class="hljs-string">&#x27;./FileSystem/&#x27;</span> + <span class="hljs-string">&#x27;renamed_&#x27;</span> + data[i]<br>    fs.<span class="hljs-title function_">rename</span>(nowName, newName, <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (err) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;\r\nfile    &#x27;</span> + nowName + <span class="hljs-string">&#x27;    renamed failed&#x27;</span>)<br>            <span class="hljs-keyword">return</span><br>        &#125;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;\r\n&#x27;</span> + nowName + <span class="hljs-string">&#x27;    \r\tis successfully renamed to    \r\t&#x27;</span> + newName)<br>        <span class="hljs-keyword">return</span><br>    &#125;)<br>&#125;<br><br><br><span class="hljs-comment">// // 删除重命名</span><br><span class="hljs-comment">// for (let i = 0; i &lt; data.length; i++) &#123;</span><br><span class="hljs-comment">//     const nowName = &#x27;./FileSystem/&#x27; + data[i]</span><br><span class="hljs-comment">//     const newName = &#x27;./FileSystem/&#x27; + data[i].slice(8)</span><br><span class="hljs-comment">//     fs.rename(nowName, newName, err =&gt; &#123;</span><br><span class="hljs-comment">//         if (err) &#123;</span><br><span class="hljs-comment">//             console.log(&#x27;\r\nfile    &#x27; + nowName + &#x27;    renamed failed&#x27;)</span><br><span class="hljs-comment">//             return</span><br><span class="hljs-comment">//         &#125;</span><br><span class="hljs-comment">//         console.log(&#x27;\r\n&#x27; + nowName + &#x27;    \r\tis successfully renamed to    \r\t&#x27; + newName)</span><br><span class="hljs-comment">//         return</span><br><span class="hljs-comment">//     &#125;)</span><br><span class="hljs-comment">// &#125;</span><br></code></pre></td></tr></table></figure><h4 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h4><p>可以使用<code>file.forEach(item =&gt; &#123;&#125;)</code>代替for循环，更加简洁</p><p>可以用模板字符串&#96;&#96;来拼接</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> newName = <span class="hljs-string">`renamed_<span class="hljs-subst">$&#123;originalName&#125;</span>`</span><br></code></pre></td></tr></table></figure><h2 id="3-path模块"><a href="#3-path模块" class="headerlink" title="3. path模块"></a>3. path模块</h2><table><thead><tr><th>API</th><th>说明</th><th>参数</th><th>返回值</th><th>备注</th></tr></thead><tbody><tr><td>path.resolve</td><td>拼接规范的绝对路径</td><td><code>...paths: string[]</code></td><td><code>string</code></td><td>常用</td></tr><tr><td>path.sep</td><td>获取操作系统的路径分隔符</td><td>N&#x2F;A</td><td><code>string</code></td><td>X</td></tr><tr><td>path.parse</td><td>解析路径并返回对象</td><td><code>pathString: string</code></td><td><code>pathObject</code></td><td>X</td></tr><tr><td>path.basename</td><td>获取路径的基础名称(此js文件的文件名)</td><td><code>pathString: string</code>, <code>ext?: string</code></td><td><code>string</code></td><td>X</td></tr><tr><td>path.dirname</td><td>获取路径的目录名</td><td><code>pathString: string</code></td><td><code>string</code></td><td>X</td></tr><tr><td>path.extname</td><td>获得路径的扩展名</td><td><code>pathString: string</code></td><td><code>string</code></td><td>X</td></tr></tbody></table><p><code>path.resolve</code></p><p><code>.</code>的绝对路径(<code>__dirname</code>)和相对路径拼接产生绝对路径</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><br><span class="hljs-keyword">const</span> absolutePath = path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;file.txt&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(absolutePath); <span class="hljs-comment">// 输出完整的绝对路径</span><br></code></pre></td></tr></table></figure><h2 id="4-HTTP模块"><a href="#4-HTTP模块" class="headerlink" title="4. HTTP模块"></a>4. HTTP模块</h2><h3 id="4-1-创建HTTP服务"><a href="#4-1-创建HTTP服务" class="headerlink" title="4.1 创建HTTP服务"></a>4.1 创建HTTP服务</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>)<br><br><span class="hljs-keyword">const</span> server = http.<span class="hljs-title function_">createServer</span>(<span class="hljs-function">(<span class="hljs-params">request, response</span>) =&gt;</span> &#123;<br><br>&#125;)<br></code></pre></td></tr></table></figure><p>request 是对请求报文的封装对象, 通过 request 对象可以获得请求报文的数据<br>response 是对响应报文的封装对象, 通过 response 对象可以设置响应报文</p><p><strong>http.createServer 里的回调函数的执行时机: 当接收到 HTTP 请求的时候，就会执行</strong></p><h3 id="4-2-获取HTTP请求报文"><a href="#4-2-获取HTTP请求报文" class="headerlink" title="4.2 获取HTTP请求报文"></a>4.2 获取HTTP请求报文</h3><table><thead><tr><th>含义</th><th>语法</th></tr></thead><tbody><tr><td><strong>请求方法</strong></td><td><code>request.method</code></td></tr><tr><td>请求版本</td><td><code>request.httpVersion</code></td></tr><tr><td><strong>请求路径</strong></td><td><code>request.url</code></td></tr><tr><td><strong>URL 路径</strong></td><td><code>require(&#39;url&#39;).parse(request.url).pathname</code></td></tr><tr><td><strong>URL 查询字符串</strong></td><td><code>require(&#39;url&#39;).parse(request.url, true).query</code></td></tr><tr><td><strong>请求头</strong></td><td><code>request.headers</code></td></tr><tr><td>请求体</td><td><code>request.on(&#39;data&#39;, function(chunk)&#123;&#125;)</code><br><code>request.on(&#39;end&#39;, function()&#123;&#125;)</code></td></tr></tbody></table><p>注意事项： </p><ol><li>request.url 只能获取路径以及查询字符串，无法获取 URL 中的域名以及协议的内容 </li><li>request.headers 将请求信息转化成一个对象，并将属性名都转化成了<code>lower case</code></li><li>关于路径：如果访问网站的时候，只填写了 IP 地址或者是域名信息，此时请求的路径为<code>\</code></li><li>关于 favicon.ico：这个请求是属于浏览器自动发送的请求</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//1. 导入 http 模块</span><br><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><span class="hljs-comment">//2. 创建服务对象 create 创建 server 服务</span><br><span class="hljs-comment">// request 意为请求. 是对请求报文的封装对象, 通过 request 对象可以获得请求报文的数据</span><br><span class="hljs-comment">// response 意为响应. 是对响应报文的封装对象, 通过 response 对象可以设置响应报文</span><br><span class="hljs-keyword">const</span> server = http.<span class="hljs-title function_">createServer</span>(<span class="hljs-function">(<span class="hljs-params">request, response</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 获取请求方法</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(request.<span class="hljs-property">method</span>)<br><br>    <span class="hljs-comment">// 获取请求URL</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(request.<span class="hljs-property">url</span>)<span class="hljs-comment">// 只包含url的路径和查询字符串</span><br><br>    <span class="hljs-comment">// 获取HTTP协议版本号</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(request.<span class="hljs-property">httpVersion</span>)<br><br>    <span class="hljs-comment">// 获取请求头</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(request.<span class="hljs-property">headers</span>)<br><br>    response.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;Hello HTTP server&#x27;</span>);<br>&#125;);<br><span class="hljs-comment">//3. 监听端口, 启动服务</span><br>server.<span class="hljs-title function_">listen</span>(<span class="hljs-number">9000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;服务已经启动, 端口 9000 监听中，运行在 http://127.0.0.1:9000 ...&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="获取请求体"><a href="#获取请求体" class="headerlink" title="获取请求体"></a>获取请求体</h4><ol><li>声明一个变量</li><li>绑定事件</li><li>绑定end事件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><br><span class="hljs-keyword">const</span> server = http.<span class="hljs-title function_">createServer</span>(<span class="hljs-function">(<span class="hljs-params">request, response</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 1. 声明一个变量</span><br>    <span class="hljs-keyword">let</span> body = <span class="hljs-string">&#x27;&#x27;</span><br><br>    <span class="hljs-comment">// 2. 绑定事件</span><br>    request.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;data&#x27;</span>, <span class="hljs-function"><span class="hljs-params">chunk</span> =&gt;</span> &#123;<br>        body += chunk<br>    &#125;)<br><br>    <span class="hljs-comment">// 3. 绑定end事件</span><br>    request.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;end&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(body)<br>        <span class="hljs-comment">//响应</span><br>        response.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;Hello HTTP&#x27;</span>)<br>    &#125;)<br><br>&#125;);<br><br>server.<span class="hljs-title function_">listen</span>(<span class="hljs-number">9000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;服务已经启动, 端口 9000 监听中，运行在 http://127.0.0.1:9000 ...&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="提取HTTP报文的URL路径和查询字符串"><a href="#提取HTTP报文的URL路径和查询字符串" class="headerlink" title="提取HTTP报文的URL路径和查询字符串"></a>提取HTTP报文的URL路径和查询字符串</h4><p>方法1：使用URL模块</p><ol><li>导入URL模块</li><li>解析request.url</li><li><code>let pathName = res.pathname</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><span class="hljs-comment">// 1. 导入URL模块</span><br><span class="hljs-keyword">const</span> url = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;url&#x27;</span>)<br><br><span class="hljs-keyword">const</span> server = http.<span class="hljs-title function_">createServer</span>(<span class="hljs-function">(<span class="hljs-params">request, response</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 2. 解析request.url</span><br>    <span class="hljs-keyword">let</span> res = url.<span class="hljs-title function_">parse</span>(request.<span class="hljs-property">url</span>)<br>    <span class="hljs-comment">// console.log(res)</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    Url &#123;</span><br><span class="hljs-comment">  protocol: null,</span><br><span class="hljs-comment">  slashes: null,</span><br><span class="hljs-comment">  auth: null,</span><br><span class="hljs-comment">  host: null,</span><br><span class="hljs-comment">  port: null,</span><br><span class="hljs-comment">  hostname: null,</span><br><span class="hljs-comment">  hash: null,</span><br><span class="hljs-comment">  search: null,</span><br><span class="hljs-comment">  query: null,</span><br><span class="hljs-comment">  pathname: &#x27;/&#x27;,</span><br><span class="hljs-comment">  path: &#x27;/&#x27;,</span><br><span class="hljs-comment">  href: &#x27;/&#x27;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">Url &#123;</span><br><span class="hljs-comment">  protocol: null,</span><br><span class="hljs-comment">  slashes: null,</span><br><span class="hljs-comment">  auth: null,</span><br><span class="hljs-comment">  host: null,</span><br><span class="hljs-comment">  port: null,</span><br><span class="hljs-comment">  hostname: null,</span><br><span class="hljs-comment">  hash: null,</span><br><span class="hljs-comment">  search: null,</span><br><span class="hljs-comment">  query: null,</span><br><span class="hljs-comment">  pathname: &#x27;/favicon.ico&#x27;,</span><br><span class="hljs-comment">  path: &#x27;/favicon.ico&#x27;,</span><br><span class="hljs-comment">  href: &#x27;/favicon.ico&#x27;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">    */</span><br><br>    <span class="hljs-comment">// 路径</span><br>    <span class="hljs-keyword">let</span> pathName = res.<span class="hljs-property">pathname</span><br>    <span class="hljs-comment">// console.log(pathName)</span><br><br>    <span class="hljs-keyword">let</span> res2 = url.<span class="hljs-title function_">parse</span>(request.<span class="hljs-property">url</span>, <span class="hljs-literal">true</span>)<br>    <span class="hljs-keyword">let</span> keyword = res2.<span class="hljs-property">query</span>.<span class="hljs-property">keyword</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(keyword)<br><br>    response.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;url&#x27;</span>)<br>&#125;);<br><br>server.<span class="hljs-title function_">listen</span>(<span class="hljs-number">9000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;服务已经启动, 端口 9000 监听中，运行在 http://127.0.0.1:9000 ...&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>方法2：实例化一个URL对象（推荐）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><br><span class="hljs-keyword">const</span> server = http.<span class="hljs-title function_">createServer</span>(<span class="hljs-function">(<span class="hljs-params">request, response</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 实例化URL对象</span><br>    <span class="hljs-keyword">let</span> url = <span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(request.<span class="hljs-property">url</span>, <span class="hljs-string">&#x27;http://127.0.0.1:9000&#x27;</span>)<br>    <span class="hljs-comment">// 输出pathname</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(url.<span class="hljs-property">pathname</span>)<br>    <span class="hljs-comment">// 输出查询字符串</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(url.<span class="hljs-property">searchParams</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;keyword&#x27;</span>))<br>    response.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;url&#x27;</span>)<br>&#125;);<br><br>server.<span class="hljs-title function_">listen</span>(<span class="hljs-number">9000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;服务已经启动, 端口 9000 监听中，运行在 http://127.0.0.1:9000 ...&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="4-3-练习：实现按照要求搭建-HTTP-服务"><a href="#4-3-练习：实现按照要求搭建-HTTP-服务" class="headerlink" title="4.3 练习：实现按照要求搭建 HTTP 服务"></a>4.3 练习：实现按照要求搭建 HTTP 服务</h3><table><thead><tr><th>请求类型(方法)</th><th>请求地址</th><th>响应体结果</th></tr></thead><tbody><tr><td>GET</td><td>&#x2F;login</td><td>登录页面</td></tr><tr><td>GET</td><td>&#x2F;reg</td><td>注册页面</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>)<br><br><span class="hljs-keyword">const</span> server = http.<span class="hljs-title function_">createServer</span>(<span class="hljs-function">(<span class="hljs-params">res, rep</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> url = <span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(res.<span class="hljs-property">url</span>, <span class="hljs-string">&#x27;http://127.0.0.1:9000&#x27;</span>)<br>    <span class="hljs-keyword">if</span> (url.<span class="hljs-property">pathname</span> == <span class="hljs-string">&#x27;/login&#x27;</span>) &#123;<br>        rep.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;this is login page&#x27;</span>)<br>    &#125;<br>    <span class="hljs-keyword">if</span> (url.<span class="hljs-property">pathname</span> == <span class="hljs-string">&#x27;/reg&#x27;</span>) &#123;<br>        rep.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;this is register page&#x27;</span>)<br>    &#125;<br>    <span class="hljs-comment">// rep.end(&#x27;Hi&#x27;)</span><br>&#125;)<br><br>server.<span class="hljs-title function_">listen</span>(<span class="hljs-number">9000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;http://127.0.0.1:9000&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="思考-1"><a href="#思考-1" class="headerlink" title="思考"></a>思考</h4><ul><li>不能有多个<code>response.end()</code></li><li>上面的实现没有实现判断请求类型的方法（GET）</li><li>除了login和reg没有其他的页面可以返回（比如输入<code>http://127.0.0.1:9000/test</code>）</li></ul><h4 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>)<br><br><span class="hljs-keyword">const</span> server = http.<span class="hljs-title function_">createServer</span>(<span class="hljs-function">(<span class="hljs-params">res, rep</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// let url = new URL(res.url, &#x27;http://127.0.0.1:9000&#x27;)</span><br>    <span class="hljs-keyword">let</span> &#123; pathname &#125; = <span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(res.<span class="hljs-property">url</span>, <span class="hljs-string">&#x27;http://127.0.0.1&#x27;</span>)<br>    <span class="hljs-keyword">let</span> &#123; method &#125; = res<br><br>    <span class="hljs-keyword">if</span> (pathname === <span class="hljs-string">&#x27;/login&#x27;</span> &amp;&amp; method === <span class="hljs-string">&#x27;GET&#x27;</span>) &#123;<br>        rep.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;this is login page&#x27;</span>)<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pathname === <span class="hljs-string">&#x27;/reg&#x27;</span> &amp;&amp; method === <span class="hljs-string">&#x27;GET&#x27;</span>) &#123;<br>        rep.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;this is register page&#x27;</span>)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        rep.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;404 Not Found&#x27;</span>)<br>    &#125;<br>&#125;)<br><br>server.<span class="hljs-title function_">listen</span>(<span class="hljs-number">9000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;http://127.0.0.1:9000&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="4-4-HTTP响应报文"><a href="#4-4-HTTP响应报文" class="headerlink" title="4.4 HTTP响应报文"></a>4.4 HTTP响应报文</h3><table><thead><tr><th>作用</th><th>语法</th></tr></thead><tbody><tr><td>设置响应状态码</td><td><code>response.statusCode</code></td></tr><tr><td>设置响应状态描述</td><td><code>response.statusMessage</code> （ 用的非常少 ）</td></tr><tr><td>设置响应头信息</td><td><code>response.setHeader(&#39;头名&#39;, &#39;头值&#39;)</code></td></tr><tr><td>设置响应体</td><td><code>response.write(&#39;xx&#39;)</code> <br /><code>response.end(&#39;xxx&#39;)</code></td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>)<br><br><span class="hljs-comment">// 响应头</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">HTTP/1.1 200 OK</span><br><span class="hljs-comment">Date: Sat, 17 Feb 2024 01:04:28 GMT</span><br><span class="hljs-comment">Connection: keep-alive</span><br><span class="hljs-comment">Keep-Alive: timeout=5</span><br><span class="hljs-comment">Content-Length: 2</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">const</span> server = http.<span class="hljs-title function_">createServer</span>(<span class="hljs-function">(<span class="hljs-params">res, rep</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 1. 设置响应状态码    200</span><br>    <span class="hljs-comment">// rep.statusCode = 404</span><br><br>    <span class="hljs-comment">// 2. 响应状态描述      OK</span><br>    rep.<span class="hljs-property">statusMessage</span> = <span class="hljs-string">&#x27;hi&#x27;</span><br><br>    <span class="hljs-comment">// 3. 响应头</span><br>    <span class="hljs-comment">// rep.setHeader(headerName, content)</span><br>    rep.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;content-type&#x27;</span>, <span class="hljs-string">&#x27;text/html;charset=utf-8&#x27;</span>)<br><br>    <span class="hljs-comment">// 4. 响应体</span><br>    rep.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;write  &#x27;</span>)<br>    rep.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;write  &#x27;</span>)<br>    rep.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;write  &#x27;</span>)<br>    rep.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;write  &#x27;</span>)<br><br><br>    rep.<span class="hljs-title function_">end</span>()<br>&#125;)<br><br>server.<span class="hljs-title function_">listen</span>(<span class="hljs-number">9000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;http://127.0.0.1:9000&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="4-5-使用node渲染HTML和CSS文件"><a href="#4-5-使用node渲染HTML和CSS文件" class="headerlink" title="4.5  使用node渲染HTML和CSS文件"></a>4.5  使用node渲染HTML和CSS文件</h3><p>html file</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;p2.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>css file</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">table</span> &#123;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;<br>    <span class="hljs-attribute">background-color</span>: lightblue;<br>&#125;<br><br><span class="hljs-selector-tag">th</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;<br>&#125;<br><br><span class="hljs-selector-tag">td</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;<br>    <span class="hljs-attribute">text-align</span>: center;<br>&#125;<br></code></pre></td></tr></table></figure><p>node file</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>)<br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><br><span class="hljs-keyword">const</span> server = http.<span class="hljs-title function_">createServer</span>(<span class="hljs-function">(<span class="hljs-params">req, rep</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 获取url路径</span><br>    <span class="hljs-keyword">let</span> &#123; pathname &#125; = <span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(req.<span class="hljs-property">url</span>, <span class="hljs-string">&#x27;http://127.0.0.1&#x27;</span>)<br><br>    <span class="hljs-keyword">if</span> (pathname === <span class="hljs-string">&#x27;/&#x27;</span>) &#123;<br>        <span class="hljs-comment">// 读取html文件内容</span><br>        fs.<span class="hljs-title function_">readFile</span>(__dirname + <span class="hljs-string">&#x27;/p2.html&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, html</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (err) &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;读取失败&#x27;</span>)<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                rep.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">200</span>, &#123; <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;text/html&#x27;</span> &#125;)<br>                rep.<span class="hljs-title function_">write</span>(html)<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;读取成功&#x27;</span>)<br>                rep.<span class="hljs-title function_">end</span>()<br>            &#125;<br>            <span class="hljs-keyword">return</span><br>        &#125;)<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pathname === <span class="hljs-string">&#x27;/p2.css&#x27;</span>) &#123;<br>        fs.<span class="hljs-title function_">readFile</span>(__dirname + <span class="hljs-string">&#x27;/p2.css&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, css</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (err) &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;读取失败&#x27;</span>)<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                rep.<span class="hljs-title function_">write</span>(css)<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;读取成功&#x27;</span>)<br>                rep.<span class="hljs-title function_">end</span>()<br>            &#125;<br>            <span class="hljs-keyword">return</span><br>        &#125;)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        rep.<span class="hljs-property">statusCode</span> = <span class="hljs-number">404</span><br>        rep.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;&lt;h1&gt;404 Not Found&lt;/h1&gt;&#x27;</span>)<br>    &#125;<br><br><br>&#125;)<br><br>server.<span class="hljs-title function_">listen</span>(<span class="hljs-number">9000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;http://127.0.0.1:9000&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>单独的CSS文件，直接使用<code>readFile</code>写入html文件会出现导入不出CSS样式的问题，原因是浏览器将CSS文件也渲染为了HTML文件，需要区分渲染的<code>pathname</code>，单独渲染html和css</p><h4 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a>Limitation</h4><p>很多if else区分渲染的文件类型很麻烦</p><h3 id="4-6-搭建静态资源服务"><a href="#4-6-搭建静态资源服务" class="headerlink" title="4.6 搭建静态资源服务"></a>4.6 搭建静态资源服务</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 创建一个 HTTP 服务，端口为 9000，满足如下需求</span><br><span class="hljs-comment"> * GET  /index.html        响应  page/index.html 的文件内容</span><br><span class="hljs-comment"> * GET  /css/app.css       响应  page/css/app.css 的文件内容</span><br><span class="hljs-comment"> * GET  /images/BlackholeCat.jpg   响应  page/images/BlackholeCat.jpg 的文件内容</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><p>如果像之前一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 获取url路径</span><br><span class="hljs-keyword">let</span> &#123; pathname &#125; = <span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(req.<span class="hljs-property">url</span>, <span class="hljs-string">&#x27;http://127.0.0.1&#x27;</span>)<br><span class="hljs-keyword">let</span> &#123; method &#125; = req<br><br><span class="hljs-keyword">if</span> (method === <span class="hljs-string">&#x27;GET&#x27;</span> &amp;&amp; pathname === <span class="hljs-string">&#x27;/index.html&#x27;</span>) &#123;<br>  <span class="hljs-comment">// 读取html文件内容</span><br>  <span class="hljs-keyword">let</span> html = fs.<span class="hljs-title function_">readFileSync</span>(__dirname + <span class="hljs-string">&#x27;/page/index.html&#x27;</span>)<br>  rep.<span class="hljs-title function_">write</span>(html)<br>  rep.<span class="hljs-title function_">end</span>()<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method === <span class="hljs-string">&#x27;GET&#x27;</span> &amp;&amp; pathname === <span class="hljs-string">&#x27;/app.css&#x27;</span>) &#123;<br>  <span class="hljs-keyword">let</span> css = fs.<span class="hljs-title function_">readFileSync</span>(__dirname + <span class="hljs-string">&#x27;/page/css/app.css&#x27;</span>)<br>  rep.<span class="hljs-title function_">write</span>(css)<br>  rep.<span class="hljs-title function_">end</span>()<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method === <span class="hljs-string">&#x27;GET&#x27;</span> &amp;&amp; pathname === <span class="hljs-string">&#x27;/img.png&#x27;</span>) &#123;<br>  <span class="hljs-keyword">let</span> img = fs.<span class="hljs-title function_">readFileSync</span>(__dirname + <span class="hljs-string">&#x27;/page/images/BlackholeCat.jpg&#x27;</span>)<br>  rep.<span class="hljs-title function_">write</span>(img)<br>  rep.<span class="hljs-title function_">end</span>()<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  rep.<span class="hljs-property">statusCode</span> = <span class="hljs-number">404</span><br>  rep.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;&lt;h1&gt;404 Not Found&lt;/h1&gt;&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>会非常麻烦，可以使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> filePath = __dirname + <span class="hljs-string">&#x27;/page&#x27;</span> + pathname<br>fs.<span class="hljs-title function_">readFile</span>(filePath, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (err) &#123;<br>    rep.<span class="hljs-property">statusCode</span> = <span class="hljs-number">500</span><br>    rep.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;文件读取失败&#x27;</span>)<br>    <span class="hljs-keyword">return</span><br>  &#125;<br>  rep.<span class="hljs-title function_">end</span>(data)<br>&#125;)<br></code></pre></td></tr></table></figure><p>这样每次在<code>/page</code>中新加入一个静态资源，比如在<code>/page/js</code>加入一个<code>abc.js</code>就可以通过<code>http://127.0.0.1:9000/js/abc.js</code>来访问其内容。<code>/page</code>被称为网站根目录</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> root = __dirname + <span class="hljs-string">&#x27;/page&#x27;</span><br></code></pre></td></tr></table></figure><p>完整代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 创建一个 HTTP 服务，端口为 9000，满足如下需求</span><br><span class="hljs-comment"> * GET  /index.html        响应  page/index.html 的文件内容</span><br><span class="hljs-comment"> * GET  /css/app.css       响应  page/css/app.css 的文件内容</span><br><span class="hljs-comment"> * GET  /images/BlackholeCat.jpg   响应  page/images/BlackholeCat.jpg 的文件内容</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>)<br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><br><span class="hljs-keyword">const</span> server = http.<span class="hljs-title function_">createServer</span>(<span class="hljs-function">(<span class="hljs-params">req, rep</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 获取url路径</span><br>  <span class="hljs-keyword">let</span> &#123; pathname &#125; = <span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(req.<span class="hljs-property">url</span>, <span class="hljs-string">&#x27;http://127.0.0.1&#x27;</span>)<br>  <span class="hljs-keyword">let</span> &#123; method &#125; = req<br>  <span class="hljs-keyword">const</span> root = __dirname + <span class="hljs-string">&#x27;/page&#x27;</span><br>  <span class="hljs-keyword">let</span> filePath = root + pathname<br>  fs.<span class="hljs-title function_">readFile</span>(filePath, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>      rep.<span class="hljs-property">statusCode</span> = <span class="hljs-number">500</span><br>      rep.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;Read file failed&#x27;</span>)<br>      <span class="hljs-keyword">return</span><br>    &#125;<br>    rep.<span class="hljs-title function_">end</span>(data)<br>  &#125;)<br><br>&#125;)<br><br>server.<span class="hljs-title function_">listen</span>(<span class="hljs-number">9000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;http://127.0.0.1:9000&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="补充：网页中的URL路径"><a href="#补充：网页中的URL路径" class="headerlink" title="补充：网页中的URL路径"></a>补充：网页中的URL路径</h3><h4 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h4><table><thead><tr><th>形式</th><th>特点</th></tr></thead><tbody><tr><td><a href="http://test.com/web">http://test.com/web</a></td><td>直接向目标资源发送请求，容易理解。网站的外链会用到此形式</td></tr><tr><td>&#x2F;&#x2F;test.com&#x2F;web</td><td>与页面 URL 的协议拼接形成完整 URL 再发送请求。大型网站用的比较多</td></tr><tr><td>&#x2F;web</td><td>与页面 URL 的协议、主机名、端口拼接形成完整 URL 再发送请求。中小型网站</td></tr></tbody></table><h4 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h4><p>相对路径在发送请求时，需要与当前页面 URL 路径进行 计算 ，得到完整 URL 后，再发送请求，学习阶 段用的较多 例如当前网页 url 为 <a href="http://www.test.com/course/h5.html">http://www.test.com/course/h5.html</a></p><table><thead><tr><th>文件路径</th><th>最终的 URL</th></tr></thead><tbody><tr><td>.&#x2F;css&#x2F;app.css</td><td><a href="http://www.test.com/course/css/app.css">http://www.test.com/course/css/app.css</a></td></tr><tr><td>js&#x2F;app.js</td><td><a href="http://www.test.com/course/js/app.js">http://www.test.com/course/js/app.js</a></td></tr><tr><td>..&#x2F;img&#x2F;logo.png</td><td><a href="http://www.test.com/img/logo.png">http://www.test.com/img/logo.png</a></td></tr><tr><td>..&#x2F;..&#x2F;mp4&#x2F;show.mp4</td><td><a href="http://www.test.com/mp4/show.mp4">http://www.test.com/mp4/show.mp4</a></td></tr></tbody></table><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>URL<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 绝对路径 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.baidu.com&quot;</span>&gt;</span>百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;//jd.com&quot;</span>&gt;</span>京东<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/search&quot;</span>&gt;</span>搜索<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 相对路径 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./css/app.css&quot;</span>&gt;</span>访问CSS<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;js/app.js&quot;</span>&gt;</span>访问JS<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;../img/logo.png&quot;</span>&gt;</span>访问图片<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;../../img/logo.png&quot;</span>&gt;</span>访问图片<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-7-设置mime类型"><a href="#4-7-设置mime类型" class="headerlink" title="4.7 设置mime类型"></a>4.7 设置mime类型</h3><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sml">html: <span class="hljs-symbol">&#x27;text</span>/html&#x27;,<br>css: <span class="hljs-symbol">&#x27;text</span>/css&#x27;,<br>js: <span class="hljs-symbol">&#x27;text</span>/javascript&#x27;,<br>png: <span class="hljs-symbol">&#x27;image</span>/png&#x27;,<br>jpg: <span class="hljs-symbol">&#x27;image</span>/jpeg&#x27;,<br>gif: <span class="hljs-symbol">&#x27;image</span>/gif&#x27;,<br>mp4: <span class="hljs-symbol">&#x27;video</span>/mp4&#x27;,<br>mp3: <span class="hljs-symbol">&#x27;audio</span>/mpeg&#x27;,<br>json: <span class="hljs-symbol">&#x27;application</span>/json&#x27;<br><br>其他未知的资源:application/octet-stream<br></code></pre></td></tr></table></figure><p>此处为mime类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">rep.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">200</span>, &#123; <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;text/html&#x27;</span> &#125;)<br>rep.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;content-type&#x27;</span>, type)<br></code></pre></td></tr></table></figure><h4 id="改进4-6中的js-code"><a href="#改进4-6中的js-code" class="headerlink" title="改进4.6中的js code"></a>改进4.6中的js code</h4><p>将渲染的内容的mime类型设置正确</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><span class="hljs-keyword">let</span> mimes = &#123;<br>  <span class="hljs-attr">html</span>: <span class="hljs-string">&#x27;text/html&#x27;</span>,<br>  <span class="hljs-attr">css</span>: <span class="hljs-string">&#x27;text/css&#x27;</span>,<br>  <span class="hljs-attr">js</span>: <span class="hljs-string">&#x27;text/javascript&#x27;</span>,<br>  <span class="hljs-attr">png</span>: <span class="hljs-string">&#x27;image/png&#x27;</span>,<br>  <span class="hljs-attr">jpg</span>: <span class="hljs-string">&#x27;image/jpeg&#x27;</span>,<br>  <span class="hljs-attr">gif</span>: <span class="hljs-string">&#x27;image/gif&#x27;</span>,<br>  <span class="hljs-attr">mp4</span>: <span class="hljs-string">&#x27;video/mp4&#x27;</span>,<br>  <span class="hljs-attr">mp3</span>: <span class="hljs-string">&#x27;audio/mpeg&#x27;</span>,<br>  <span class="hljs-attr">json</span>: <span class="hljs-string">&#x27;application/json&#x27;</span><br>&#125;<br>...<br>    <span class="hljs-comment">// 获取文件后缀</span><br>    <span class="hljs-keyword">let</span> ext = path.<span class="hljs-title function_">extname</span>(filePath).<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>)<br>    <span class="hljs-comment">// 获取对应的类型</span><br>    <span class="hljs-keyword">let</span> type = mimes[ext]<br>    <span class="hljs-keyword">if</span> (type) &#123;<br>      rep.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;content-type&#x27;</span>, type)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      rep.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;content-type&#x27;</span>, <span class="hljs-string">&#x27;application/octet-stream&#x27;</span>)<br>    &#125;<br>...<br></code></pre></td></tr></table></figure><h3 id="4-8-错误处理"><a href="#4-8-错误处理" class="headerlink" title="4.8 错误处理"></a>4.8 错误处理</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (req.<span class="hljs-property">method</span> !== <span class="hljs-string">&#x27;GET&#x27;</span>) &#123;<br>  rep.<span class="hljs-property">statusCode</span> = <span class="hljs-number">405</span><br>  rep.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;&lt;h1&gt;405 METHOD NOT ALLOWED&lt;/h1&gt;&#x27;</span>)<br>  <span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">if</span> (err) &#123;<br>  <span class="hljs-keyword">switch</span> (err.<span class="hljs-property">code</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;ENOENT&#x27;</span>:<br>      rep.<span class="hljs-property">statusCode</span> = <span class="hljs-number">404</span><br>      rep.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;&lt;h1&gt;404 NOT FOUND&lt;/h1&gt;&#x27;</span>)<br>      <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;EPERM&#x27;</span>:<br>      rep.<span class="hljs-property">statusCode</span> = <span class="hljs-number">403</span><br>      rep.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;&lt;h1&gt;403 FORBIDDEN&lt;/h1&gt;&#x27;</span>)<br>      <span class="hljs-keyword">break</span><br>  &#125;<br>  <span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="GET-和-POST-请求场景小结"><a href="#GET-和-POST-请求场景小结" class="headerlink" title="GET 和 POST 请求场景小结"></a>GET 和 POST 请求场景小结</h3><h4 id="GET-请求的情况："><a href="#GET-请求的情况：" class="headerlink" title="GET 请求的情况："></a>GET 请求的情况：</h4><ul><li>在地址栏直接输入 URL 访问</li><li>点击链接 <code>&lt;a&gt;</code></li><li>使用 <code>&lt;link&gt;</code> 标签引入 CSS</li><li>使用 <code>&lt;script&gt;</code> 标签引入 JavaScript</li><li>使用 <code>&lt;img&gt;</code> 标签引入图片</li><li>使用 <code>&lt;form&gt;</code> 标签，其中 <code>method</code> 属性为 GET（不区分大小写）</li><li>在 AJAX 请求中使用 GET 请求</li></ul><h4 id="POST-请求的情况："><a href="#POST-请求的情况：" class="headerlink" title="POST 请求的情况："></a>POST 请求的情况：</h4><ul><li>使用 <code>&lt;form&gt;</code> 标签，其中 <code>method</code> 属性为 POST（不区分大小写）</li><li>在 AJAX 请求中使用 POST 请求</li></ul><h4 id="GET-和-POST-请求的区别："><a href="#GET-和-POST-请求的区别：" class="headerlink" title="GET 和 POST 请求的区别："></a>GET 和 POST 请求的区别：</h4><ul><li>GET 主要用于获取数据，POST 主要用于提交数据。</li><li>GET 请求中，参数附加在 URL 后面，而 POST 请求中，参数放在请求体中。</li><li>POST 请求相对于 GET 请求来说，更安全一些，因为 GET 请求中的参数会暴露在地址栏中。</li><li>GET 请求有大小限制，一般为 2KB，而 POST 请求则没有大小限制。</li></ul><h3 id="4-6-4-8-搭建静态资源服务完整代码"><a href="#4-6-4-8-搭建静态资源服务完整代码" class="headerlink" title="4.6-4.8 搭建静态资源服务完整代码"></a>4.6-4.8 搭建静态资源服务完整代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 创建一个 HTTP 服务，端口为 9000，满足如下需求</span><br><span class="hljs-comment"> * GET  /index.html        响应  page/index.html 的文件内容</span><br><span class="hljs-comment"> * GET  /css/app.css       响应  page/css/app.css 的文件内容</span><br><span class="hljs-comment"> * GET  /images/BlackholeCat.jpg   响应  page/images/BlackholeCat.jpg 的文件内容</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>)<br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><span class="hljs-keyword">let</span> mimes = &#123;<br>  <span class="hljs-attr">html</span>: <span class="hljs-string">&#x27;text/html&#x27;</span>,<br>  <span class="hljs-attr">css</span>: <span class="hljs-string">&#x27;text/css&#x27;</span>,<br>  <span class="hljs-attr">js</span>: <span class="hljs-string">&#x27;text/javascript&#x27;</span>,<br>  <span class="hljs-attr">png</span>: <span class="hljs-string">&#x27;image/png&#x27;</span>,<br>  <span class="hljs-attr">jpg</span>: <span class="hljs-string">&#x27;image/jpeg&#x27;</span>,<br>  <span class="hljs-attr">gif</span>: <span class="hljs-string">&#x27;image/gif&#x27;</span>,<br>  <span class="hljs-attr">mp4</span>: <span class="hljs-string">&#x27;video/mp4&#x27;</span>,<br>  <span class="hljs-attr">mp3</span>: <span class="hljs-string">&#x27;audio/mpeg&#x27;</span>,<br>  <span class="hljs-attr">json</span>: <span class="hljs-string">&#x27;application/json&#x27;</span><br>&#125;<br><br><span class="hljs-keyword">const</span> server = http.<span class="hljs-title function_">createServer</span>(<span class="hljs-function">(<span class="hljs-params">req, rep</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">let</span> &#123; pathname &#125; = <span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(req.<span class="hljs-property">url</span>, <span class="hljs-string">&#x27;http://127.0.0.1&#x27;</span>)<br>  <span class="hljs-keyword">let</span> &#123; method &#125; = req<br><br>  <span class="hljs-keyword">const</span> root = __dirname + <span class="hljs-string">&#x27;/page&#x27;</span><br>  <span class="hljs-keyword">let</span> filePath = root + pathname<br>  <br>  fs.<span class="hljs-title function_">readFile</span>(filePath, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 错误处理</span><br>    <span class="hljs-keyword">if</span> (req.<span class="hljs-property">method</span> !== <span class="hljs-string">&#x27;GET&#x27;</span>) &#123;<br>      rep.<span class="hljs-property">statusCode</span> = <span class="hljs-number">405</span><br>      rep.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;&lt;h1&gt;405 METHOD NOT ALLOWED&lt;/h1&gt;&#x27;</span>)<br>      <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>      <span class="hljs-keyword">switch</span> (err.<span class="hljs-property">code</span>) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;ENOENT&#x27;</span>:<br>          rep.<span class="hljs-property">statusCode</span> = <span class="hljs-number">404</span><br>          rep.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;&lt;h1&gt;404 NOT FOUND&lt;/h1&gt;&#x27;</span>)<br>          <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;EPERM&#x27;</span>:<br>          rep.<span class="hljs-property">statusCode</span> = <span class="hljs-number">403</span><br>          rep.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;&lt;h1&gt;403 FORBIDDEN&lt;/h1&gt;&#x27;</span>)<br>          <span class="hljs-keyword">break</span><br>      &#125;<br>      <span class="hljs-keyword">return</span><br>    &#125;<br>    <br>    <span class="hljs-comment">// 设置mime</span><br>    <span class="hljs-keyword">let</span> ext = path.<span class="hljs-title function_">extname</span>(filePath).<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">let</span> type = mimes[ext]<br>    <span class="hljs-keyword">if</span> (type) &#123;<br>      rep.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;content-type&#x27;</span>, type)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      rep.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;content-type&#x27;</span>, <span class="hljs-string">&#x27;application/octet-stream&#x27;</span>)<br>    &#125;<br><br>    rep.<span class="hljs-title function_">end</span>(data)<br>  &#125;)<br><br>&#125;)<br><br>server.<span class="hljs-title function_">listen</span>(<span class="hljs-number">9000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;http://127.0.0.1:9000&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Develop</category>
      
      <category>Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node</tag>
      
      <tag>Backend</tag>
      
      <tag>Javascript</tag>
      
      <tag>RESTful api</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript</title>
    <link href="/2023/02/06/JS/"/>
    <url>/2023/02/06/JS/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Use-JS-in-HTML"><a href="#1-Use-JS-in-HTML" class="headerlink" title="1. Use JS in HTML"></a>1. Use JS in HTML</h2><h3 id="1-1-Use-‘"><a href="#1-1-Use-‘" class="headerlink" title="1.1 Use  ‘'"></a>1.1 Use  ‘<script>'</h3><script> JS </script><h3 id="1-2-with-external-reference-path"><a href="#1-2-with-external-reference-path" class="headerlink" title="1.2 with external reference(path)"></a>1.2 with external reference(path)</h3><script src="myScript.js"></script><h3 id="1-3-with-URL"><a href="#1-3-with-URL" class="headerlink" title="1.3 with URL"></a>1.3 with URL</h3><script src="https://www.w3schools.com/js/myScript.js"></script><h2 id="2-How-to-output"><a href="#2-How-to-output" class="headerlink" title="2. How to output"></a>2. How to output</h2><ul><li>Writing into an HTML element, using <code>innerHTML</code>.</li><li>Writing into the HTML output using <code>document.write()</code>.</li><li>Writing into an alert box, using <code>window.alert()</code>.</li><li>Writing into the browser console, using <code>console.log()</code>.</li></ul><h2 id="3-Key-words"><a href="#3-Key-words" class="headerlink" title="3. Key words"></a>3. Key words</h2><table><thead><tr><th align="left">Keyword</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">var</td><td align="left">Declares a variable</td></tr><tr><td align="left">let</td><td align="left">Declares a block variable</td></tr><tr><td align="left">const</td><td align="left">Declares a block constant</td></tr><tr><td align="left">if</td><td align="left">Marks a block of statements to be executed on a condition</td></tr><tr><td align="left">switch</td><td align="left">Marks a block of statements to be executed in different cases</td></tr><tr><td align="left">for</td><td align="left">Marks a block of statements to be executed in a loop</td></tr><tr><td align="left">function</td><td align="left">Declares a function</td></tr><tr><td align="left">return</td><td align="left">Exits a function</td></tr><tr><td align="left">try</td><td align="left">Implements error handling to a block of statements</td></tr></tbody></table><h3 id="3-1-When-to-Use-var-let-or-const"><a href="#3-1-When-to-Use-var-let-or-const" class="headerlink" title="3.1  When to Use var, let, or const?"></a>3.1  When to Use var, let, or const?</h3><ol><li><p>Always declare variables</p></li><li><p>Always use <code>const</code> if the value should not be changed</p></li><li><p>Always use <code>const</code> if the type should not be changed (Arrays and Objects)</p></li><li><p>Only use <code>let</code> if you can't use <code>const</code></p></li><li><p>Only use <code>var</code> if you MUST support old browsers.</p></li></ol><p>Note: A variable declared with <code>let</code> or <code>const</code> cannot  be re-declared.</p><h3 id="3-2-Let"><a href="#3-2-Let" class="headerlink" title="3.2 Let"></a>3.2 Let</h3><ul><li><p>Variables declared with <code>let</code> have <strong>Block Scope</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Variables</span> declared inside a &#123; &#125; block cannot be accessed <span class="hljs-keyword">from</span> outside the <span class="hljs-attr">block</span>:<br><br>&#123;<br> <span class="hljs-keyword">let</span> x = <span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-comment">// x can NOT be used here</span><br></code></pre></td></tr></table></figure></li><li><p>Variables declared with <code>let</code> must be <strong>Declared</strong> before use</p></li><li><p>Variables declared with <code>let</code> cannot be <strong>Redeclared</strong> in the same scope</p></li></ul><h3 id="3-3-Const"><a href="#3-3-Const" class="headerlink" title="3.3  Const"></a>3.3  Const</h3><h4 id="How-to-use"><a href="#How-to-use" class="headerlink" title="How to use"></a>How to use</h4><p><code>const</code> variables must be assigned a value when they are declared</p><p>Correct</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">PI</span> = <span class="hljs-number">3.14159265359</span>;<br></code></pre></td></tr></table></figure><p>Incorrect</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">PI</span>;<br><span class="hljs-variable constant_">PI</span> = <span class="hljs-number">3.14159265359</span>;<br></code></pre></td></tr></table></figure><h4 id="When-to-use-JavaScript-const"><a href="#When-to-use-JavaScript-const" class="headerlink" title="When to use JavaScript const?"></a>When to use JavaScript const?</h4><p><strong>Always declare a variable with <code>const</code> when you know that the value should not be changed.</strong></p><p>Use <code>const</code> when you declare:</p><ul><li>A new Array</li><li>A new Object</li><li>A new Function</li><li>A new RegExp</li></ul><h4 id="Constant-Objects-and-Arrays"><a href="#Constant-Objects-and-Arrays" class="headerlink" title="Constant Objects and Arrays"></a>Constant Objects and Arrays</h4><p>The keyword <code>const</code> is a little misleading.</p><p>It does not define a constant value. It defines a constant reference to a value.</p><p>Because of this you can NOT:</p><ul><li><p>Reassign a constant value</p></li><li><p>Reassign a constant array</p></li><li><p>Reassign a constant object</p></li><li><p>But you CAN:</p></li><li><p>Change the elements of constant array</p></li><li><p>Change the properties of constant object</p></li></ul><p>Correct</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// You can create a constant array:</span><br><span class="hljs-keyword">const</span> cars = [<span class="hljs-string">&quot;Saab&quot;</span>, <span class="hljs-string">&quot;Volvo&quot;</span>, <span class="hljs-string">&quot;BMW&quot;</span>];<br><br><span class="hljs-comment">// You can change an element:</span><br>cars[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;Toyota&quot;</span>;<br><br><span class="hljs-comment">// You can add an element:</span><br>cars.<span class="hljs-title function_">push</span>(<span class="hljs-string">&quot;Audi&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// You can create a const object:</span><br><span class="hljs-keyword">const</span> car = &#123;<span class="hljs-attr">type</span>:<span class="hljs-string">&quot;Fiat&quot;</span>, <span class="hljs-attr">model</span>:<span class="hljs-string">&quot;500&quot;</span>, <span class="hljs-attr">color</span>:<span class="hljs-string">&quot;white&quot;</span>&#125;;<br><br><span class="hljs-comment">// You can change a property:</span><br>car.<span class="hljs-property">color</span> = <span class="hljs-string">&quot;red&quot;</span>;<br><br><span class="hljs-comment">// You can add a property:</span><br>car.<span class="hljs-property">owner</span> = <span class="hljs-string">&quot;Johnson&quot;</span>;<br></code></pre></td></tr></table></figure><p>Incorrect</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// You can create a constant array:</span><br><span class="hljs-keyword">const</span> cars = [<span class="hljs-string">&quot;Saab&quot;</span>, <span class="hljs-string">&quot;Volvo&quot;</span>, <span class="hljs-string">&quot;BMW&quot;</span>];<br><br><span class="hljs-comment">// You can change an element:</span><br>cars[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;Toyota&quot;</span>;<br><br><span class="hljs-comment">// You can add an element:</span><br>cars.<span class="hljs-title function_">push</span>(<span class="hljs-string">&quot;Audi&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="4-Operators"><a href="#4-Operators" class="headerlink" title="4. Operators"></a>4. Operators</h2><h3 id="4-1-Arithmetic-Operators"><a href="#4-1-Arithmetic-Operators" class="headerlink" title="4.1 Arithmetic Operators"></a>4.1 Arithmetic Operators</h3><table><thead><tr><th align="left">Operator</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">+</td><td align="left">Addition</td></tr><tr><td align="left">-</td><td align="left">Subtraction</td></tr><tr><td align="left">*</td><td align="left">Multiplication</td></tr><tr><td align="left">**</td><td align="left">Exponentiation</td></tr><tr><td align="left">/</td><td align="left">Division</td></tr><tr><td align="left">%</td><td align="left">Modulus (Division Remainder)</td></tr><tr><td align="left">++</td><td align="left">Increment</td></tr><tr><td align="left">--</td><td align="left">Decrement</td></tr></tbody></table><h3 id="4-2-Assignment-Operators"><a href="#4-2-Assignment-Operators" class="headerlink" title="4.2 Assignment Operators"></a>4.2 Assignment Operators</h3><table><thead><tr><th align="left">Operator</th><th align="left">Example</th><th align="left">Same As</th></tr></thead><tbody><tr><td align="left">=</td><td align="left">x = y</td><td align="left">x = y</td></tr><tr><td align="left">+=</td><td align="left">x += y</td><td align="left">x = x + y</td></tr><tr><td align="left">-=</td><td align="left">x -= y</td><td align="left">x = x - y</td></tr><tr><td align="left">*=</td><td align="left">x *= y</td><td align="left">x = x * y</td></tr><tr><td align="left">/=</td><td align="left">x /= y</td><td align="left">x = x / y</td></tr><tr><td align="left">%=</td><td align="left">x %= y</td><td align="left">x = x % y</td></tr><tr><td align="left">**=</td><td align="left">x **= y</td><td align="left">x = x ** y</td></tr></tbody></table><h3 id="4-3-Comparison-Operators"><a href="#4-3-Comparison-Operators" class="headerlink" title="4.3 Comparison Operators"></a>4.3 Comparison Operators</h3><table><thead><tr><th align="left">Operator</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">==</td><td align="left">equal to</td></tr><tr><td align="left">===</td><td align="left">equal value and equal type</td></tr><tr><td align="left">!=</td><td align="left">not equal</td></tr><tr><td align="left">!==</td><td align="left">not equal value or not equal type</td></tr><tr><td align="left">></td><td align="left">greater than</td></tr><tr><td align="left"><</td><td align="left">less than</td></tr><tr><td align="left">>=</td><td align="left">greater than or equal to</td></tr><tr><td align="left"><=</td><td align="left">less than or equal to</td></tr><tr><td align="left">?</td><td align="left">ternary operator</td></tr></tbody></table><h3 id="4-4-Logical-Operators"><a href="#4-4-Logical-Operators" class="headerlink" title="4.4 Logical Operators"></a>4.4 Logical Operators</h3><table><thead><tr><th align="left">Operator</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">&&</td><td align="left">logical and</td></tr><tr><td align="left">||</td><td align="left">logical or</td></tr><tr><td align="left">!</td><td align="left">logical not</td></tr></tbody></table><h3 id="4-5-Type-Operators"><a href="#4-5-Type-Operators" class="headerlink" title="4.5 Type Operators"></a>4.5 Type Operators</h3><table><thead><tr><th align="left">Operator</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">typeof</td><td align="left">Returns the type of a variable</td></tr><tr><td align="left">instanceof</td><td align="left">Returns true if an object is an instance of an object type</td></tr></tbody></table><h2 id="5-Data-Types"><a href="#5-Data-Types" class="headerlink" title="5.  Data Types"></a>5.  Data Types</h2><h3 id="JavaScript-has-8-Datatypes"><a href="#JavaScript-has-8-Datatypes" class="headerlink" title="JavaScript has 8 Datatypes"></a>JavaScript has 8 Datatypes</h3><ol><li>String</li><li>Number</li><li>Bigint</li><li>Boolean</li><li>Undefined</li><li>Null</li><li>Symbol</li><li>Object</li></ol><h3 id="The-Object-Datatype"><a href="#The-Object-Datatype" class="headerlink" title="The Object Datatype"></a>The Object Datatype</h3><p>The object data type can contain:</p><ol><li>An object  ( <code>dict</code> in Python)</li><li>An array</li><li>A date</li></ol><h2 id="6-Functions"><a href="#6-Functions" class="headerlink" title="6. Functions"></a>6. Functions</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">name</span>(<span class="hljs-params">parameter1, parameter2, parameter3</span>) &#123;<br>  <span class="hljs-comment">// code to be executed</span><br>&#125;<br><br><span class="hljs-keyword">let</span> result = <span class="hljs-title function_">name</span>(p1, p2, p3);<br></code></pre></td></tr></table></figure><h2 id="7-Object"><a href="#7-Object" class="headerlink" title="7. Object"></a>7. Object</h2><h3 id="7-1-Create-an-object"><a href="#7-1-Create-an-object" class="headerlink" title="7.1 Create an object"></a>7.1 Create an object</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> person = &#123;<br>  <span class="hljs-attr">firstName</span>: <span class="hljs-string">&quot;John&quot;</span>,<br>  <span class="hljs-attr">lastName</span>: <span class="hljs-string">&quot;Doe&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">50</span>,<br>  <span class="hljs-attr">eyeColor</span>: <span class="hljs-string">&quot;blue&quot;</span><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="7-2-Accessing-Object-Properties"><a href="#7-2-Accessing-Object-Properties" class="headerlink" title="7.2 Accessing Object Properties"></a>7.2 Accessing Object Properties</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">person.<span class="hljs-property">lastName</span>;<br><br>person[<span class="hljs-string">&quot;lastName&quot;</span>];<br></code></pre></td></tr></table></figure><h3 id="7-3-Object-Methods"><a href="#7-3-Object-Methods" class="headerlink" title="7.3 Object Methods"></a>7.3 Object Methods</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> person = &#123;<br>  <span class="hljs-attr">firstName</span>: <span class="hljs-string">&quot;John&quot;</span>,<br>  lastName : <span class="hljs-string">&quot;Doe&quot;</span>,<br>  id       : <span class="hljs-number">5566</span>,<br>  fullName : <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> + <span class="hljs-string">&quot; &quot;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span>;<br>  &#125;<br>&#125;;<br><br>name = person.<span class="hljs-title function_">fullName</span>();<br><span class="hljs-comment">//name = person.fullName; !! it will return the function definition NOT the return value</span><br></code></pre></td></tr></table></figure><h2 id="8-Events"><a href="#8-Events" class="headerlink" title="8. Events"></a>8. Events</h2><h3 id="HTML-Events"><a href="#HTML-Events" class="headerlink" title="HTML Events"></a>HTML Events</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">element</span> <span class="hljs-attr">event</span>=<span class="hljs-string">&#x27;some JavaScript&#x27;</span>&gt;</span><br></code></pre></td></tr></table></figure><table><thead><tr><th align="left">Event</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">onchange</td><td align="left">An HTML element has been changed</td></tr><tr><td align="left">onclick</td><td align="left">The user clicks an HTML element</td></tr><tr><td align="left">onmouseover</td><td align="left">The user moves the mouse over an HTML element</td></tr><tr><td align="left">onmouseout</td><td align="left">The user moves the mouse away from an HTML element</td></tr><tr><td align="left">onkeydown</td><td align="left">The user pushes a keyboard key</td></tr><tr><td align="left">onload</td><td align="left">The browser has finished loading the page</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;document.getElementById(&#x27;demo&#x27;).innerHTML = Date()&quot;</span>&gt;</span>The time is?<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;this.innerHTML = Date()&quot;</span>&gt;</span>The time is?<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;displayDate()&quot;</span>&gt;</span>The time is?<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>JavaScript HTML Events<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>The onclick Attribute<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;document.getElementById(&#x27;demo&#x27;).innerHTML=Date()&quot;</span>&gt;</span>The time is?<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="9-Strings"><a href="#9-Strings" class="headerlink" title="9. Strings"></a>9. Strings</h2><h3 id="9-1-escape-sequences"><a href="#9-1-escape-sequences" class="headerlink" title="9.1 escape sequences"></a>9.1 escape sequences</h3><table><thead><tr><th align="left">Code</th><th align="left">Result</th></tr></thead><tbody><tr><td align="left">\b</td><td align="left">Backspace</td></tr><tr><td align="left">\f</td><td align="left">Form Feed</td></tr><tr><td align="left">\n</td><td align="left">New Line</td></tr><tr><td align="left">\r</td><td align="left">Carriage Return</td></tr><tr><td align="left">\t</td><td align="left">Horizontal Tabulator</td></tr><tr><td align="left">\v</td><td align="left">Vertical Tabulator</td></tr></tbody></table><h3 id="9-2-Methods"><a href="#9-2-Methods" class="headerlink" title="9.2 Methods"></a>9.2 <a href="https://www.w3schools.com/js/js_string_methods.asp">Methods</a></h3><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">String</span> <span class="hljs-variable">length</span><br><span class="hljs-variable">String</span> <span class="hljs-function"><span class="hljs-title">charAt</span>()</span><br><span class="hljs-variable">String</span> <span class="hljs-function"><span class="hljs-title">charCodeAt</span>()</span><br><span class="hljs-variable">String</span> <span class="hljs-function"><span class="hljs-title">at</span>()</span><br><span class="hljs-variable">String</span> [ ]<br><span class="hljs-variable">String</span> <span class="hljs-function"><span class="hljs-title">slice</span>()</span><br><span class="hljs-variable">String</span> <span class="hljs-function"><span class="hljs-title"><span class="hljs-built_in">substring</span></span>()</span><br><span class="hljs-variable">String</span> <span class="hljs-function"><span class="hljs-title">substr</span>()</span><br><span class="hljs-variable">See</span> <span class="hljs-variable">Also</span>:<br><span class="hljs-variable">String</span> <span class="hljs-function"><span class="hljs-title">toUpperCase</span>()</span><br><span class="hljs-variable">String</span> <span class="hljs-function"><span class="hljs-title">toLowerCase</span>()</span><br><span class="hljs-variable">String</span> <span class="hljs-function"><span class="hljs-title">concat</span>()</span><br><span class="hljs-variable">String</span> <span class="hljs-function"><span class="hljs-title"><span class="hljs-built_in">trim</span></span>()</span><br><span class="hljs-variable">String</span> <span class="hljs-function"><span class="hljs-title">trimStart</span>()</span><br><span class="hljs-variable">String</span> <span class="hljs-function"><span class="hljs-title">trimEnd</span>()</span><br><span class="hljs-variable">String</span> <span class="hljs-function"><span class="hljs-title">padStart</span>()</span><br><span class="hljs-variable">String</span> <span class="hljs-function"><span class="hljs-title">padEnd</span>()</span><br><span class="hljs-variable">String</span> <span class="hljs-function"><span class="hljs-title">repeat</span>()</span><br><span class="hljs-variable">String</span> <span class="hljs-function"><span class="hljs-title"><span class="hljs-built_in">replace</span></span>()</span><br><span class="hljs-variable">String</span> <span class="hljs-function"><span class="hljs-title">replaceAll</span>()</span><br><span class="hljs-variable">String</span> <span class="hljs-function"><span class="hljs-title"><span class="hljs-built_in">split</span></span>()</span><br></code></pre></td></tr></table></figure><h4 id="9-2-1-length"><a href="#9-2-1-length" class="headerlink" title="9.2.1 length"></a>9.2.1 length</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> text = <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;<br><span class="hljs-keyword">let</span> length = text.<span class="hljs-property">length</span>;<br></code></pre></td></tr></table></figure><h4 id="9-2-2-Extracting-String-Characters"><a href="#9-2-2-Extracting-String-Characters" class="headerlink" title="9.2.2 Extracting String Characters"></a>9.2.2 Extracting String Characters</h4><h5 id="charAt"><a href="#charAt" class="headerlink" title="charAt()"></a>charAt()</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> text = <span class="hljs-string">&quot;HELLO WORLD&quot;</span>;<br><span class="hljs-keyword">let</span> char = text.<span class="hljs-title function_">charAt</span>(<span class="hljs-number">0</span>); <span class="hljs-comment">//returns H</span><br></code></pre></td></tr></table></figure><h5 id="charCodeAt"><a href="#charCodeAt" class="headerlink" title="charCodeAt()"></a>charCodeAt()</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> text = <span class="hljs-string">&quot;HELLO WORLD&quot;</span>;<br><span class="hljs-keyword">let</span> char = text.<span class="hljs-title function_">charCodeAt</span>(<span class="hljs-number">0</span>); <span class="hljs-comment">//returns 72</span><br></code></pre></td></tr></table></figure><h5 id="at"><a href="#at" class="headerlink" title="at()"></a>at()</h5><p>The <code>at()</code> method is a new addition to JavaScript.</p><p>It allows the use of negative indexes while <code>charAt()</code> do not.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> name = <span class="hljs-string">&quot;W3Schools&quot;</span>;<br><span class="hljs-keyword">let</span> letter = name.<span class="hljs-title function_">at</span>(<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><p><strong>Now you can use <code>myString.at(-2)</code> instead of <code>charAt(myString.length-2)</code>.</strong>(Python list)</p><h5 id="Property-Access"><a href="#Property-Access" class="headerlink" title="Property Access [ ]"></a>Property Access [ ]</h5><p>Property access might be a little <strong>unpredictable:</strong></p><ul><li>It makes strings look like arrays (but they are not)</li><li>If no character is found, [ ] returns undefined, while charAt() returns an empty string.</li><li>It is read only. str[0] = "A" gives no error (but does not work!)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> name = <span class="hljs-string">&quot;W3Schools&quot;</span>;<br><span class="hljs-keyword">let</span> letter = name[<span class="hljs-number">2</span>];<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> text = <span class="hljs-string">&quot;HELLO WORLD&quot;</span>;<br>text[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;A&quot;</span>;    <span class="hljs-comment">// Gives no error, but does not work</span><br><br>text.<span class="hljs-title function_">at</span>(<span class="hljs-number">0</span>) = <span class="hljs-string">&quot;A&quot;</span>  <span class="hljs-comment">// Gives error</span><br><br>text.<span class="hljs-title function_">charAt</span>(<span class="hljs-number">0</span>) = <span class="hljs-string">&quot;A&quot;</span> <span class="hljs-comment">// Gives error</span><br></code></pre></td></tr></table></figure><h4 id="9-2-3-Extracting-String-Parts"><a href="#9-2-3-Extracting-String-Parts" class="headerlink" title="9.2.3 Extracting String Parts"></a>9.2.3 Extracting String Parts</h4><p>There are 3 methods for extracting a part of a string:</p><ul><li><code>slice(start, end)</code></li><li><code>substring(start, end)</code></li><li><code>substr(start, length)</code></li></ul><h5 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h5><p>[start, end)  (it's left-closed right-opened)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//Slice out a portion of a string from position 7 to position 13:</span><br><span class="hljs-keyword">let</span> text = <span class="hljs-string">&quot;Apple, Banana, Kiwi&quot;</span>;<br><span class="hljs-keyword">let</span> part = text.<span class="hljs-title function_">slice</span>(<span class="hljs-number">7</span>, <span class="hljs-number">13</span>);  <span class="hljs-comment">//Banana</span><br><br><span class="hljs-comment">//If you omit the second parameter, the method will slice out the rest of the string:</span><br><span class="hljs-keyword">let</span> text = <span class="hljs-string">&quot;Apple, Banana, Kiwi&quot;</span>;<br><span class="hljs-keyword">let</span> part = text.<span class="hljs-title function_">slice</span>(<span class="hljs-number">7</span>);<br><br><span class="hljs-comment">//If a parameter is negative, the position is counted from the end of the string:</span><br><span class="hljs-keyword">let</span> text = <span class="hljs-string">&quot;Apple, Banana, Kiwi&quot;</span>;<br><span class="hljs-keyword">let</span> part = text.<span class="hljs-title function_">slice</span>(-<span class="hljs-number">12</span>);   <span class="hljs-comment">//Banana, Kiwi</span><br><br><span class="hljs-comment">//This example slices out a portion of a string from position -12 to position -6:</span><br><span class="hljs-keyword">let</span> text = <span class="hljs-string">&quot;Apple, Banana, Kiwi&quot;</span>;<br><span class="hljs-keyword">let</span> part = text.<span class="hljs-title function_">slice</span>(-<span class="hljs-number">12</span>, -<span class="hljs-number">6</span>);<br></code></pre></td></tr></table></figure><h5 id="substring"><a href="#substring" class="headerlink" title="substring"></a>substring</h5><p><code>substring()</code> is similar to <code>slice()</code>.</p><p>The difference is that start and end values less than 0 are treated as 0 in <code>substring()</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;Apple, Banana, Kiwi&quot;</span>;<br><span class="hljs-keyword">let</span> part = str.<span class="hljs-title function_">substring</span>(<span class="hljs-number">7</span>, <span class="hljs-number">13</span>);<br></code></pre></td></tr></table></figure><h5 id="substr"><a href="#substr" class="headerlink" title="substr"></a>substr</h5><p><code>substr()</code> is similar to <code>slice()</code>.</p><p>The difference is that the second parameter specifies the <strong>length</strong> of the extracted part.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;Apple, Banana, Kiwi&quot;</span>;<br><span class="hljs-keyword">let</span> part = str.<span class="hljs-title function_">substr</span>(<span class="hljs-number">7</span>, <span class="hljs-number">6</span>);<br><br><span class="hljs-comment">//If you omit the second parameter, substr() will slice out the rest of the string.</span><br><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;Apple, Banana, Kiwi&quot;</span>;<br><span class="hljs-keyword">let</span> part = str.<span class="hljs-title function_">substr</span>(<span class="hljs-number">7</span>);<br><br><span class="hljs-comment">//If the first parameter is negative, the position counts from the end of the string.</span><br><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;Apple, Banana, Kiwi&quot;</span>;<br></code></pre></td></tr></table></figure><h4 id="9-2-4-concat"><a href="#9-2-4-concat" class="headerlink" title="9.2.4 concat"></a>9.2.4 concat</h4><p><code>concat()</code> joins two or more strings</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JS">text = <span class="hljs-string">&quot;Hello&quot;</span> + <span class="hljs-string">&quot; &quot;</span> + <span class="hljs-string">&quot;World!&quot;</span>;<br>text = <span class="hljs-string">&quot;Hello&quot;</span>.<span class="hljs-title function_">concat</span>(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;World!&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="9-2-5-trim"><a href="#9-2-5-trim" class="headerlink" title="9.2.5 trim"></a>9.2.5 trim</h4><p>The <code>trim()</code> method removes whitespace from both sides of a string</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> text1 = <span class="hljs-string">&quot;      Hello World!      &quot;</span>;<br><span class="hljs-keyword">let</span> text2 = text1.<span class="hljs-title function_">trim</span>();<br></code></pre></td></tr></table></figure><h5 id="trimStart"><a href="#trimStart" class="headerlink" title="trimStart"></a>trimStart</h5><p>The <code>trimStart()</code> method works like <code>trim()</code>, but removes whitespace only from the start of a string</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> text1 = <span class="hljs-string">&quot;     Hello World!     &quot;</span>;<br><span class="hljs-keyword">let</span> text2 = text1.<span class="hljs-title function_">trimStart</span>();<br></code></pre></td></tr></table></figure><h5 id="trimEnd"><a href="#trimEnd" class="headerlink" title="trimEnd"></a>trimEnd</h5><p>The <code>trimEnd()</code> method works like <code>trim()</code>, but removes whitespace only from the end of a string</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> text1 = <span class="hljs-string">&quot;     Hello World!     &quot;</span>;<br><span class="hljs-keyword">let</span> text2 = text1.<span class="hljs-title function_">trimEnd</span>();<br></code></pre></td></tr></table></figure><h3 id="9-3-String-Search"><a href="#9-3-String-Search" class="headerlink" title="9.3 String Search"></a>9.3 <a href="https://www.w3schools.com/js/js_string_search.asp">String Search</a></h3><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">String</span> <span class="hljs-function"><span class="hljs-title"><span class="hljs-built_in">indexOf</span></span>()</span><br><span class="hljs-variable">String</span> <span class="hljs-function"><span class="hljs-title">lastIndexOf</span>()</span><br><span class="hljs-variable">String</span> <span class="hljs-function"><span class="hljs-title">search</span>()</span><br><span class="hljs-variable">See</span> <span class="hljs-variable">Also</span>:<br><span class="hljs-variable">Basic</span> <span class="hljs-variable">String</span> <span class="hljs-variable">Methods</span><br><span class="hljs-variable">String</span> <span class="hljs-variable">Templates</span><br><span class="hljs-variable">String</span> <span class="hljs-function"><span class="hljs-title">match</span>()</span><br><span class="hljs-variable">String</span> <span class="hljs-function"><span class="hljs-title">matchAll</span>()</span><br><span class="hljs-variable">String</span> <span class="hljs-function"><span class="hljs-title">includes</span>()</span><br><span class="hljs-variable">String</span> <span class="hljs-function"><span class="hljs-title">startsWith</span>()</span><br><span class="hljs-variable">String</span> <span class="hljs-function"><span class="hljs-title">endsWith</span>()</span><br></code></pre></td></tr></table></figure><h4 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h4><p>The <code>indexOf()</code> method returns the <strong>index</strong> (position) of the <strong>first</strong> occurrence of a string in a string, or it returns -1 if the string is not found</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> text = <span class="hljs-string">&quot;Please locate where &#x27;locate&#x27; occurs!&quot;</span>;<br><span class="hljs-keyword">let</span> index = text.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;locate&quot;</span>);            <span class="hljs-comment">//7</span><br></code></pre></td></tr></table></figure><h4 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf"></a>lastIndexOf</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> text = <span class="hljs-string">&quot;Please locate where &#x27;locate&#x27; occurs!&quot;</span>;<br><span class="hljs-keyword">let</span> index = text.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&quot;locate&quot;</span>);        <span class="hljs-comment">//21</span><br></code></pre></td></tr></table></figure><ul><li>Both <code>indexOf()</code>, and <code>lastIndexOf()</code> return -1 if the text is not found</li><li>Both methods accept a second parameter as the starting position for the search</li></ul><h4 id="search"><a href="#search" class="headerlink" title="search"></a>search</h4><p>The <code>search()</code> method searches a string for a string (or a regular expression) and returns the position of the match</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> text = <span class="hljs-string">&quot;Please locate where &#x27;locate&#x27; occurs!&quot;</span>;<br>text.<span class="hljs-title function_">search</span>(<span class="hljs-string">&quot;locate&quot;</span>);<span class="hljs-comment">//7</span><br>text.<span class="hljs-title function_">search</span>(<span class="hljs-regexp">/locate/</span>);<span class="hljs-comment">//7</span><br></code></pre></td></tr></table></figure><ul><li>The <code>search()</code> method cannot take a second start position argument.</li><li>The <code>indexOf()</code> method cannot take powerful search values (regular expressions).</li></ul><h3 id="9-4-Template-Strings"><a href="#9-4-Template-Strings" class="headerlink" title="9.4 Template Strings"></a>9.4 Template Strings</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> text = <span class="hljs-string">`Hello World!`</span>;<br></code></pre></td></tr></table></figure><h4 id="Interpolation"><a href="#Interpolation" class="headerlink" title="Interpolation"></a>Interpolation</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> firstName = <span class="hljs-string">&quot;John&quot;</span>;<br><span class="hljs-keyword">let</span> lastName = <span class="hljs-string">&quot;Doe&quot;</span>;<br><br><span class="hljs-keyword">let</span> text = <span class="hljs-string">`Welcome <span class="hljs-subst">$&#123;firstName&#125;</span>, <span class="hljs-subst">$&#123;lastName&#125;</span>!`</span>;<br></code></pre></td></tr></table></figure><h2 id="10-Numbers"><a href="#10-Numbers" class="headerlink" title="10. Numbers"></a>10. Numbers</h2><p>JavaScript strings can have numeric content</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-keyword">let</span> x = <span class="hljs-number">100</span>;         <span class="hljs-comment">// x is a number</span><br><span class="hljs-keyword">let</span> y = <span class="hljs-string">&quot;100&quot;</span>;       <span class="hljs-comment">// y is a string</span><br><span class="hljs-keyword">var</span> z =  (x == y);   <span class="hljs-comment">// z is true</span><br><span class="hljs-keyword">var</span> z =  (x === y);  <span class="hljs-comment">// z is false</span><br>&#125;<br>&#123;<br>    <span class="hljs-keyword">let</span> x = <span class="hljs-string">&quot;100&quot;</span>;<br>    <span class="hljs-keyword">let</span> y = <span class="hljs-string">&quot;10&quot;</span>;<br>    <span class="hljs-keyword">let</span> z = x / y;       <span class="hljs-comment">// this will work</span><br>&#125;<br>&#123;<br>    <span class="hljs-keyword">let</span> x = <span class="hljs-string">&quot;100&quot;</span>;<br><span class="hljs-keyword">let</span> y = <span class="hljs-string">&quot;10&quot;</span>;<br><span class="hljs-keyword">let</span> z = x - y;<span class="hljs-comment">// this will work</span><br>&#125;<br>&#123;<br>    <span class="hljs-keyword">let</span> x = <span class="hljs-string">&quot;100&quot;</span>;<br><span class="hljs-keyword">let</span> y = <span class="hljs-string">&quot;10&quot;</span>;<br><span class="hljs-keyword">let</span> z = x + y;<span class="hljs-comment">// this will NOT work</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="NaN-Not-a-Number"><a href="#NaN-Not-a-Number" class="headerlink" title="NaN - Not a Number"></a>NaN - Not a Number</h4><p><code>NaN</code> is a JavaScript reserved word indicating that a number is not a legal number.</p><p>Trying to do arithmetic with a non-numeric string will result in <code>NaN</code> (Not a Number)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> x = <span class="hljs-number">100</span> / <span class="hljs-string">&quot;Apple&quot;</span>;<br><span class="hljs-built_in">isNaN</span>(x);<br></code></pre></td></tr></table></figure><h4 id="Infinity"><a href="#Infinity" class="headerlink" title="Infinity"></a>Infinity</h4><p><code>Infinity</code> (or <code>-Infinity</code>) is the value JavaScript will return if you calculate a number outside the largest possible number.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> x =  <span class="hljs-number">2</span> / <span class="hljs-number">0</span>;<br><span class="hljs-keyword">let</span> y = -<span class="hljs-number">2</span> / <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><h3 id="10-1-Methods"><a href="#10-1-Methods" class="headerlink" title="10.1 Methods"></a>10.1 Methods</h3><table><thead><tr><th align="left">Method</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">toString()</td><td align="left">Returns a number as a string</td></tr><tr><td align="left">toExponential()</td><td align="left">Returns a number written in exponential notation</td></tr><tr><td align="left">toFixed()</td><td align="left">Returns a number written with a number of decimals</td></tr><tr><td align="left">toPrecision()</td><td align="left">Returns a number written with a specified length</td></tr><tr><td align="left">ValueOf()</td><td align="left">Returns a number as a number</td></tr></tbody></table><p><strong>Converting Variables to Numbers</strong></p><table><thead><tr><th align="left">Method</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">Number()</td><td align="left">Returns a number converted from its argument.</td></tr><tr><td align="left">parseFloat()</td><td align="left">Parses its argument and returns a floating point number</td></tr><tr><td align="left">parseInt()</td><td align="left">Parses its argument and returns a whole number</td></tr></tbody></table><h3 id="10-2-Number-Properties"><a href="#10-2-Number-Properties" class="headerlink" title="10.2 Number Properties"></a>10.2 Number Properties</h3><table><thead><tr><th align="left">Property</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">EPSILON</td><td align="left">The difference between 1 and the smallest number > 1.</td></tr><tr><td align="left">MAX_VALUE</td><td align="left">The largest number possible in JavaScript</td></tr><tr><td align="left">MIN_VALUE</td><td align="left">The smallest number possible in JavaScript</td></tr><tr><td align="left">MAX_SAFE_INTEGER</td><td align="left">The maximum safe integer (253 - 1)</td></tr><tr><td align="left">MIN_SAFE_INTEGER</td><td align="left">The minimum safe integer -(253 - 1)</td></tr><tr><td align="left">POSITIVE_INFINITY</td><td align="left">Infinity (returned on overflow)</td></tr><tr><td align="left">NEGATIVE_INFINITY</td><td align="left">Negative infinity (returned on overflow)</td></tr><tr><td align="left">NaN</td><td align="left">A "Not-a-Number" value</td></tr></tbody></table><p><strong>Number Properties Cannot be Used on Variables</strong></p><p>Number properties belong to the JavaScript <strong>Number Object</strong>.</p><p>These properties can only be accessed as <code>Number.MAX_VALUE</code>.</p><p>Using x.MAX_VALUE, where x is a variable or a value, will return <code>undefined</code>:</p><h2 id="11-Array"><a href="#11-Array" class="headerlink" title="11. Array"></a>11. Array</h2><p>Create Access Chang toString Accessfullstring  Methods</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> cars = [<span class="hljs-string">&quot;Saab&quot;</span>, <span class="hljs-string">&quot;Volvo&quot;</span>, <span class="hljs-string">&quot;BMW&quot;</span>];<br><br>cars[<span class="hljs-number">0</span>]= <span class="hljs-string">&quot;Saab&quot;</span>;<br>cars[<span class="hljs-number">1</span>]= <span class="hljs-string">&quot;Volvo&quot;</span>;<br>cars[<span class="hljs-number">2</span>]= <span class="hljs-string">&quot;BMW&quot;</span>;<br><br>cars[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;Opel&quot;</span>;<br><br><span class="hljs-keyword">const</span> fruits = [<span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Orange&quot;</span>, <span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Mango&quot;</span>];<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;demo&quot;</span>).<span class="hljs-property">innerHTML</span> = fruits.<span class="hljs-title function_">toString</span>(); <span class="hljs-comment">//Banana,Orange,Apple,Mango</span><br><br><span class="hljs-keyword">const</span> cars = [<span class="hljs-string">&quot;Saab&quot;</span>, <span class="hljs-string">&quot;Volvo&quot;</span>, <span class="hljs-string">&quot;BMW&quot;</span>];<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;demo&quot;</span>).<span class="hljs-property">innerHTML</span> = cars; <span class="hljs-comment">//Saab,Volvo,BMW</span><br><br>cars.<span class="hljs-property">length</span>   <span class="hljs-comment">// Returns the number of elements</span><br>cars.<span class="hljs-title function_">sort</span>()   <span class="hljs-comment">// Sorts the array</span><br><br><span class="hljs-keyword">const</span> fruits = [<span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Orange&quot;</span>, <span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Mango&quot;</span>];<br><span class="hljs-keyword">let</span> fLen = fruits.<span class="hljs-property">length</span>;<br></code></pre></td></tr></table></figure><p> looping</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> text = <span class="hljs-string">&quot;&lt;ul&gt;&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; fLen; i++) &#123;<br>  text += <span class="hljs-string">&quot;&lt;li&gt;&quot;</span> + fruits[i] + <span class="hljs-string">&quot;&lt;/li&gt;&quot;</span>;<br>&#125;<br>text += <span class="hljs-string">&quot;&lt;/ul&gt;&quot;</span>;<br><span class="hljs-keyword">const</span> fruits = [<span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Orange&quot;</span>, <span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Mango&quot;</span>];<br><br><span class="hljs-keyword">let</span> text = <span class="hljs-string">&quot;&lt;ul&gt;&quot;</span>;<br>fruits.<span class="hljs-title function_">forEach</span>(myFunction);<br>text += <span class="hljs-string">&quot;&lt;/ul&gt;&quot;</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">myFunction</span>(<span class="hljs-params">value</span>) &#123;<br>  text += <span class="hljs-string">&quot;&lt;li&gt;&quot;</span> + value + <span class="hljs-string">&quot;&lt;/li&gt;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p> Adding (push)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fruits = [<span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Orange&quot;</span>, <span class="hljs-string">&quot;Apple&quot;</span>];<br>fruits.<span class="hljs-title function_">push</span>(<span class="hljs-string">&quot;Lemon&quot;</span>);  <span class="hljs-comment">// Adds a new element (Lemon) to fruits</span><br></code></pre></td></tr></table></figure><p><strong>WARNING !</strong></p><p>Adding elements with high indexes can create undefined "holes" in an array</p><h3 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h3><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">Basic</span> <span class="hljs-variable">Array</span> <span class="hljs-variable">Methods</span><br><span class="hljs-variable">Array</span> <span class="hljs-variable">length</span><br><span class="hljs-variable">Array</span> <span class="hljs-function"><span class="hljs-title">toString</span>()</span><br><span class="hljs-variable">Array</span> <span class="hljs-function"><span class="hljs-title">at</span>()</span><br><span class="hljs-variable">Array</span> <span class="hljs-function"><span class="hljs-title">join</span>()</span><br><span class="hljs-variable">Array</span> <span class="hljs-function"><span class="hljs-title">pop</span>()</span><br><span class="hljs-variable">Array</span> <span class="hljs-function"><span class="hljs-title">push</span>()</span><br><span class="hljs-variable">See</span> <span class="hljs-variable">Also</span>:<br><span class="hljs-variable">Search</span> <span class="hljs-variable">Methods</span><br><span class="hljs-variable">Sort</span> <span class="hljs-variable">Methods</span><br><span class="hljs-variable">Iteration</span> <span class="hljs-variable">Methods</span><br><span class="hljs-variable">Array</span> <span class="hljs-function"><span class="hljs-title">shift</span>()</span><br><span class="hljs-variable">Array</span> <span class="hljs-function"><span class="hljs-title">unshift</span>()</span><br><span class="hljs-variable">Array</span> <span class="hljs-function"><span class="hljs-title">delete</span>()</span><br><span class="hljs-variable">Array</span> <span class="hljs-function"><span class="hljs-title">concat</span>()</span><br><span class="hljs-variable">Array</span> <span class="hljs-function"><span class="hljs-title">copyWithin</span>()</span><br><span class="hljs-variable">Array</span> <span class="hljs-function"><span class="hljs-title">flat</span>()</span><br><span class="hljs-variable">Array</span> <span class="hljs-function"><span class="hljs-title">splice</span>()</span><br><span class="hljs-variable">Array</span> <span class="hljs-function"><span class="hljs-title">toSpliced</span>()</span><br><span class="hljs-variable">Array</span> <span class="hljs-function"><span class="hljs-title">slice</span>()</span><br></code></pre></td></tr></table></figure><h3 id="Array-Search"><a href="#Array-Search" class="headerlink" title="Array Search"></a>Array Search</h3><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">Array</span> <span class="hljs-function"><span class="hljs-title"><span class="hljs-built_in">indexOf</span></span>()</span><br><span class="hljs-variable">Array</span> <span class="hljs-function"><span class="hljs-title">lastIndexOf</span>()</span><br><span class="hljs-variable">Array</span> <span class="hljs-function"><span class="hljs-title">includes</span>()</span><br><span class="hljs-variable">See</span> <span class="hljs-variable">Also</span>:<br><span class="hljs-variable">Basic</span> <span class="hljs-variable">Methods</span><br><span class="hljs-variable">Sort</span> <span class="hljs-variable">Methods</span><br><span class="hljs-variable">Iteration</span> <span class="hljs-variable">Methods</span><span class="hljs-variable">Array</span> <span class="hljs-function"><span class="hljs-title">find</span>()</span><br><span class="hljs-variable">Array</span> <span class="hljs-function"><span class="hljs-title">findIndex</span>()</span><br><span class="hljs-variable">Array</span> <span class="hljs-function"><span class="hljs-title">findLast</span>()</span><br><span class="hljs-variable">Array</span> <span class="hljs-function"><span class="hljs-title">findLastIndex</span>()</span><br></code></pre></td></tr></table></figure><p><em>array</em>.indexOf(<em>item</em>, <em>start</em>)</p><table><thead><tr><th><em>item</em></th><th>Required. The item to search for.</th></tr></thead><tbody><tr><td><em>start</em></td><td>Optional. Where to start the search. Negative values will start at the given position counting from the end, and search to the end.</td></tr></tbody></table><p><code>Array.indexOf()</code> returns -1 if the item is not found.</p><p>If the item is present more than once, it returns the position of the <strong>first occurrence</strong>.</p><p><em>array</em>.lastIndexOf(<em>item</em>, <em>start</em>)</p><table><thead><tr><th><em>item</em></th><th>Required. The item to search for</th></tr></thead><tbody><tr><td><em>start</em></td><td>Optional. Where to start the search. Negative values will start at the given position counting from the end, and search to the beginning</td></tr></tbody></table><p>includes</p><p> <code>Array.includes()</code> to arrays. This allows us to <strong>check</strong> if an element is present in an array (including NaN, unlike indexOf).</p><h3 id="Sorting-Arrays"><a href="#Sorting-Arrays" class="headerlink" title="Sorting Arrays"></a>Sorting Arrays</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs arcade">Alpabetic <span class="hljs-built_in">Sort</span><br><span class="hljs-built_in">Array</span> <span class="hljs-built_in">sort</span>()<br><span class="hljs-built_in">Array</span> <span class="hljs-built_in">reverse</span>()<br><span class="hljs-built_in">Array</span> toSorted()<br><span class="hljs-built_in">Array</span> toReversed()<br><br>Numeric <span class="hljs-built_in">Sort</span><br><span class="hljs-built_in">Random</span> <span class="hljs-built_in">Sort</span><br>Math.<span class="hljs-built_in">min</span>()<br>Math.<span class="hljs-built_in">max</span>()<br>Home made <span class="hljs-built_in">Min</span>()<br>Home made <span class="hljs-built_in">Max</span>()<br></code></pre></td></tr></table></figure><p>The <code>sort()</code> method sorts an array alphabetically</p><p> <code>toSorted()</code> method is a safe way to sort an array <strong>without altering the original array</strong>.</p><p>The difference between <code>toSorted()</code> and <code>sort()</code> is that the first method creates a new array, keeping the original array unchanged, while the last method alters the original array.</p><p>By default, the <code>sort()</code> function sorts values as <strong>strings</strong>.</p><p>If numbers are sorted as strings, "25" is bigger than "100", because "2" is bigger than "1".</p><p>Because of this, the <code>sort()</code> method will produce incorrect result when sorting numbers.</p><p>Provide a <strong>compare function</strong> to sort numbers:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> points = [<span class="hljs-number">40</span>, <span class="hljs-number">100</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">25</span>, <span class="hljs-number">10</span>];<br>points.<span class="hljs-title function_">sort</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">a, b</span>)&#123;<span class="hljs-keyword">return</span> a - b&#125;);<br></code></pre></td></tr></table></figure><p>Sorting an Array in Random Order:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> points = [<span class="hljs-number">40</span>, <span class="hljs-number">100</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">25</span>, <span class="hljs-number">10</span>];<br>points.<span class="hljs-title function_">sort</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">0.5</span> - <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()&#125;);<br></code></pre></td></tr></table></figure><h3 id="Max-Min-value-of-array"><a href="#Max-Min-value-of-array" class="headerlink" title="Max/Min value of array"></a>Max/Min value of array</h3><h4 id="Using-Math-min-on-an-Array"><a href="#Using-Math-min-on-an-Array" class="headerlink" title="Using Math.min() on an Array"></a>Using Math.min() on an Array</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">myArrayMin</span>(<span class="hljs-params">arr</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-property">min</span>.<span class="hljs-title function_">apply</span>(<span class="hljs-literal">null</span>, arr);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Using-Math-max-on-an-Array"><a href="#Using-Math-max-on-an-Array" class="headerlink" title="Using Math.max() on an Array"></a>Using Math.max() on an Array</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">myArrayMax</span>(<span class="hljs-params">arr</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-property">max</span>.<span class="hljs-title function_">apply</span>(<span class="hljs-literal">null</span>, arr);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Iteration"><a href="#Iteration" class="headerlink" title="Iteration"></a>Iteration</h3><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">Array</span> <span class="hljs-variable"><span class="hljs-keyword">forEach</span></span><br><span class="hljs-variable">Array</span> <span class="hljs-function"><span class="hljs-title">map</span>()</span><br><span class="hljs-variable">Array</span> <span class="hljs-function"><span class="hljs-title">flatMap</span>()</span><br><span class="hljs-variable">Array</span> <span class="hljs-function"><span class="hljs-title">filter</span>()</span><br><span class="hljs-variable">Array</span> <span class="hljs-function"><span class="hljs-title">reduce</span>()</span><br><span class="hljs-variable">Array</span> <span class="hljs-function"><span class="hljs-title">reduceRigth</span>()</span><br><span class="hljs-variable">See</span> <span class="hljs-variable">Also</span>:<br><span class="hljs-variable">Basic</span> <span class="hljs-variable">Array</span> <span class="hljs-variable">Methods</span><br><span class="hljs-variable">Array</span> <span class="hljs-variable">Search</span> <span class="hljs-variable">Methods</span><br><span class="hljs-variable">Array</span> <span class="hljs-variable">Sort</span> <span class="hljs-variable">Methods</span><span class="hljs-variable">Array</span> <span class="hljs-function"><span class="hljs-title">every</span>()</span><br><span class="hljs-variable">Array</span> <span class="hljs-function"><span class="hljs-title">some</span>()</span><br><span class="hljs-variable">Array</span> <span class="hljs-function"><span class="hljs-title">from</span>()</span><br><span class="hljs-variable">Array</span> <span class="hljs-function"><span class="hljs-title">keys</span>()</span><br><span class="hljs-variable">Array</span> <span class="hljs-function"><span class="hljs-title">entries</span>()</span><br><span class="hljs-variable">Array</span> <span class="hljs-function"><span class="hljs-title">with</span>()</span><br><span class="hljs-variable">Array</span> <span class="hljs-variable">Spread</span> (...)<br></code></pre></td></tr></table></figure><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><p>The <code>map()</code> method <strong>creates a new array</strong> by performing a function on each array element.</p><p>The <code>map()</code> method does not execute the function for array elements without values.</p><p>The <code>map()</code> method does not change the original array.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> numbers1 = [<span class="hljs-number">45</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>];<br><span class="hljs-keyword">const</span> numbers2 = numbers1.<span class="hljs-title function_">map</span>(myFunction);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">myFunction</span>(<span class="hljs-params">value, index, array</span>) &#123;<br>  <span class="hljs-keyword">return</span> value * <span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-comment">/*or function myFunction(value) &#123;</span><br><span class="hljs-comment">  return value * 2;</span><br><span class="hljs-comment">&#125;*/</span><br></code></pre></td></tr></table></figure><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p>The <code>filter()</code> method creates a new array with array elements that pass a test.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> numbers = [<span class="hljs-number">45</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>];<br><span class="hljs-keyword">const</span> over18 = numbers.<span class="hljs-title function_">filter</span>(myFunction);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">myFunction</span>(<span class="hljs-params">value, index, array</span>) &#123;<br>  <span class="hljs-keyword">return</span> value &gt; <span class="hljs-number">18</span>;<br>&#125;<br><br><span class="hljs-comment">/*or function myFunction(value) &#123;</span><br><span class="hljs-comment">  return value &gt; 18;</span><br><span class="hljs-comment">&#125;*/</span><br></code></pre></td></tr></table></figure><h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h4><p>The <code>reduce()</code> method runs a function on each array element to produce (reduce it to) a single value.</p><p>The <code>reduce()</code> method works from left-to-right in the array. See also <code>reduceRight()</code>.</p><p>The <code>reduce()</code> method does not reduce the original array.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> numbers = [<span class="hljs-number">45</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>];<br><span class="hljs-keyword">let</span> sum = numbers.<span class="hljs-title function_">reduce</span>(myFunction);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">myFunction</span>(<span class="hljs-params">total, value, index, array</span>) &#123;<br>  <span class="hljs-keyword">return</span> total + value;<br>&#125;<br><span class="hljs-comment">/*or function myFunction(total, value) &#123;</span><br><span class="hljs-comment">  return total + value;</span><br><span class="hljs-comment">&#125;*/</span><br></code></pre></td></tr></table></figure><h2 id="12-if-else-switch-statement"><a href="#12-if-else-switch-statement" class="headerlink" title="12. if else switch statement"></a>12. if else switch statement</h2><ul><li>Use <code>if</code> to specify a block of code to be executed, if a specified condition is true</li><li>Use <code>else</code> to specify a block of code to be executed, if the same condition is false</li><li>Use <code>else if</code> to specify a new condition to test, if the first condition is false</li><li>Use <code>switch</code> to specify many alternative blocks of code to be executed</li><li>Same as C  Java Cpp</li></ul><p>Switch</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">switch</span>(expression) &#123;<br>  <span class="hljs-keyword">case</span> <span class="hljs-attr">x</span>:<br>    <span class="hljs-comment">// code block</span><br>    <span class="hljs-keyword">break</span>;<br>  <span class="hljs-keyword">case</span> <span class="hljs-attr">y</span>:<br>    <span class="hljs-comment">// code block</span><br>    <span class="hljs-keyword">break</span>;<br>  <span class="hljs-attr">default</span>:<br>    <span class="hljs-comment">// code block</span><br>&#125;<br></code></pre></td></tr></table></figure><p>Same as C</p><h2 id="13-Loop"><a href="#13-Loop" class="headerlink" title="13. Loop"></a>13. Loop</h2><ul><li><code>for</code> - loops through a block of code a number of times</li><li><code>for/in</code> - loops through the properties of an object</li><li><code>for/of</code> - loops through the values of an iterable object</li><li><code>while</code> - loops through a block of code while a specified condition is true</li><li><code>do/while</code> - also loops through a block of code while a specified condition is true</li></ul><h3 id="For-loop-like-C"><a href="#For-loop-like-C" class="headerlink" title="For loop (like C)"></a>For loop (like C)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span> (expression <span class="hljs-number">1</span>; expression <span class="hljs-number">2</span>; expression <span class="hljs-number">3</span>) &#123;<br>  <span class="hljs-comment">// code block to be executed</span><br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>  text += <span class="hljs-string">&quot;The number is &quot;</span> + i + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="For-in-like-Python"><a href="#For-in-like-Python" class="headerlink" title="For in (like Python)"></a>For in (like Python)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span> (key <span class="hljs-keyword">in</span> object) &#123;<br>  <span class="hljs-comment">// code block to be executed</span><br>&#125;<br><br><span class="hljs-keyword">const</span> person = &#123;<span class="hljs-attr">fname</span>:<span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-attr">lname</span>:<span class="hljs-string">&quot;Doe&quot;</span>, <span class="hljs-attr">age</span>:<span class="hljs-number">25</span>&#125;;<br><span class="hljs-keyword">let</span> text = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> x <span class="hljs-keyword">in</span> person) &#123;<br>  text += person[x];<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span> (variable <span class="hljs-keyword">in</span> array) &#123;<br>  code<br>&#125;<br><br><span class="hljs-keyword">const</span> numbers = [<span class="hljs-number">45</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>];<br><span class="hljs-keyword">let</span> txt = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> x <span class="hljs-keyword">in</span> numbers) &#123;<br>  txt += numbers[x];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Array-forEach"><a href="#Array-forEach" class="headerlink" title="Array.forEach()"></a>Array.forEach()</h3><p>The <code>forEach()</code> method calls a function (a callback function) once for each array element.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> numbers = [<span class="hljs-number">45</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>];<br><br><span class="hljs-keyword">let</span> txt = <span class="hljs-string">&quot;&quot;</span>;<br>numbers.<span class="hljs-title function_">forEach</span>(myFunction);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">myFunction</span>(<span class="hljs-params">value, index, array</span>) &#123;<br>  txt += value;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="For-of"><a href="#For-of" class="headerlink" title="For of"></a>For of</h3><p>The JavaScript <code>for of</code> statement loops through the values of an iterable object.</p><p>It lets you loop over iterable data structures such as Arrays, Strings, Maps, NodeLists, and more:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span> (variable <span class="hljs-keyword">of</span> iterable) &#123;<br>  <span class="hljs-comment">// code block to be executed</span><br>&#125;<br><br><span class="hljs-keyword">const</span> cars = [<span class="hljs-string">&quot;BMW&quot;</span>, <span class="hljs-string">&quot;Volvo&quot;</span>, <span class="hljs-string">&quot;Mini&quot;</span>];<br><span class="hljs-keyword">let</span> text = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> x <span class="hljs-keyword">of</span> cars) &#123;<br>  text += x;<br>&#125;<br><br><span class="hljs-keyword">let</span> language = <span class="hljs-string">&quot;JavaScript&quot;</span>;<br><span class="hljs-keyword">let</span> text = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> x <span class="hljs-keyword">of</span> language) &#123;<br>text += x;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="While-loop"><a href="#While-loop" class="headerlink" title="While loop"></a>While loop</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">while</span> (condition) &#123;<br>  <span class="hljs-comment">// code block to be executed</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">do</span> &#123;<br>  <span class="hljs-comment">// code block to be executed</span><br>&#125;<br><span class="hljs-keyword">while</span> (condition);<br></code></pre></td></tr></table></figure><h2 id="14-HTML-DOM"><a href="#14-HTML-DOM" class="headerlink" title="14.  HTML DOM"></a>14.  HTML DOM</h2><ul><li>JavaScript can change all the HTML elements in the page</li><li>JavaScript can change all the HTML attributes in the page</li><li>JavaScript can change all the CSS styles in the page</li><li>JavaScript can remove existing HTML elements and attributes</li><li>JavaScript can add new HTML elements and attributes</li><li>JavaScript can react to all existing HTML events in the page</li><li>JavaScript can create new HTML events in the page</li></ul>]]></content>
    
    
    <categories>
      
      <category>Develop</category>
      
      <category>Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node</tag>
      
      <tag>Backend</tag>
      
      <tag>Javascript</tag>
      
      <tag>Frontend</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>17 模块和包</title>
    <link href="/2022/10/25/17%20%E6%A8%A1%E5%9D%97%E5%92%8C%E5%8C%85/"/>
    <url>/2022/10/25/17%20%E6%A8%A1%E5%9D%97%E5%92%8C%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h1 id="模块和包"><a href="#模块和包" class="headerlink" title="模块和包"></a>模块和包</h1><h2 id="1-1-导入模块"><a href="#1-1-导入模块" class="headerlink" title="1.1 导入模块"></a>1.1 导入模块</h2><ul><li>直接导入module</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 导入模块</span><br><span class="hljs-keyword">import</span> module_name1<br><span class="hljs-keyword">import</span> module_name2<br>...<br><br><span class="hljs-comment"># 调用模块</span><br>module_name1.function_name()<br></code></pre></td></tr></table></figure><ul><li>导入module中的指定function</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 导入模块</span><br><span class="hljs-keyword">from</span> module_name1 <span class="hljs-keyword">import</span> function1, function2, function3, ...<br><br><span class="hljs-comment"># 调用模块</span><br>function_name()<br></code></pre></td></tr></table></figure><ul><li>给module命别名</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 导入模块</span><br><span class="hljs-keyword">import</span> module_name1 <span class="hljs-keyword">as</span> mn1<br><br><span class="hljs-comment"># 调用模块</span><br>mn1.function_name()<br></code></pre></td></tr></table></figure><ul><li>导入module中的所有function</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 导入模块</span><br><span class="hljs-keyword">from</span> module_name1 <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment"># 调用模块</span><br>function_name()<br></code></pre></td></tr></table></figure><ul><li>导入所有module</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 导入模块</span><br><span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment"># 调用模块</span><br>module_name1.function_name1()<br>module_name2.function_name2()<br>...<br></code></pre></td></tr></table></figure><h2 id="1-2-制作模块"><a href="#1-2-制作模块" class="headerlink" title="1.2 制作模块"></a>1.2 制作模块</h2><p>每个Python文件都可以作为一个模块</p><p>testA.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">testAdd</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-keyword">return</span> a + b<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>古老的学习笔记</category>
      
      <category>Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>16 异常</title>
    <link href="/2022/10/25/16%20%E5%BC%82%E5%B8%B8/"/>
    <url>/2022/10/25/16%20%E5%BC%82%E5%B8%B8/</url>
    
    <content type="html"><![CDATA[<h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><ul><li>捕获异常</li><li>else</li><li>finally</li><li>异常传递</li><li>自定义异常</li></ul><h2 id="1-异常的写法"><a href="#1-异常的写法" class="headerlink" title="1. 异常的写法"></a>1. 异常的写法</h2><h3 id="1-1-用法"><a href="#1-1-用法" class="headerlink" title="1.1 用法"></a>1.1 用法</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">try</span>：<br>    可能发生错误的代码<br><span class="hljs-keyword">except</span>:<br>    如果出现异常执行的代码<br></code></pre></td></tr></table></figure><p>例子</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">try</span>：<br>    <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>)<br><span class="hljs-keyword">except</span>:<br>    <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>)<br></code></pre></td></tr></table></figure><p>该程序尝试以只读打开文件，如果文件名称不存在，上面的语句会出现异常。转而会执行下面的语句，创建一个新的文件</p><h2 id="2-捕获指定异常"><a href="#2-捕获指定异常" class="headerlink" title="2. 捕获指定异常"></a>2. 捕获指定异常</h2><h3 id="2-1-用法"><a href="#2-1-用法" class="headerlink" title="2.1 用法"></a>2.1 用法</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">try</span>：<br>    可能发生错误的代码<br><span class="hljs-keyword">except</span> 异常类型:<br>    如果出现异常执行的代码<br></code></pre></td></tr></table></figure><p>比如</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">print</span>(<span class="hljs-number">2</span>/<span class="hljs-number">0</span>) <span class="hljs-comment"># ZeroDivisionError</span><br><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Traceback (most recent call last):</span><br><span class="hljs-string">  File &quot;/Users/xuxuan/PycharmProjects/Students/modify.py&quot;, line 1, in &lt;module&gt;</span><br><span class="hljs-string">    print(2/0)</span><br><span class="hljs-string">ZeroDivisionError: division by zero</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>可以这样抛出</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-number">2</span>/<span class="hljs-number">0</span>)<br><span class="hljs-keyword">except</span> ZeroDivisionError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;除数不能为零&quot;</span>)<br>    <br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">除数不能为零</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>这样可以抛出指定异常，如果发生了其他异常可以报错后修正</p><h3 id="2-2-捕获多个异常"><a href="#2-2-捕获多个异常" class="headerlink" title="2.2 捕获多个异常"></a>2.2 捕获多个异常</h3><p>当不确定会出什么异常时，使用捕获多个异常来确定。</p><p>except后面用一个元组来储存多个异常</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-number">2</span>/<span class="hljs-number">0</span>)<br><span class="hljs-keyword">except</span> (ZeroDivisionError, NameError) <span class="hljs-keyword">as</span> result:<br>    <span class="hljs-built_in">print</span>(result)<br>    <br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">division by zero</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h3 id="2-3-捕获所有异常"><a href="#2-3-捕获所有异常" class="headerlink" title="2.3 捕获所有异常"></a>2.3 捕获所有异常</h3><p>捕获所有异常的父类Exception</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-number">2</span> / <span class="hljs-number">0</span>)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> result:<br>    <span class="hljs-built_in">print</span>(result)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">division by zero</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="3-else"><a href="#3-else" class="headerlink" title="3. else"></a>3. else</h2><p>else表示没有异常实质性的代码</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-number">2</span> / <span class="hljs-number">0</span>)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> result:<br>    <span class="hljs-built_in">print</span>(result)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;No error occurred&quot;</span>)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">division by zero</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>没有异常时</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-number">2</span>)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> result:<br>    <span class="hljs-built_in">print</span>(result)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;No error occurred&quot;</span>)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">2</span><br><span class="hljs-string">No error occurred</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="4-finally"><a href="#4-finally" class="headerlink" title="4. finally"></a>4. finally</h2><p>无论有没有异常都要执行的代码</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">try</span>:<br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&#x27;r&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;read mode&quot;</span>)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> result:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;an error occurred: <span class="hljs-subst">&#123;result&#125;</span>&quot;</span>)<br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&#x27;w&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;write mode&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    read = f.read()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;There is no error occurred. read successfully executed&quot;</span>)<br><span class="hljs-keyword">finally</span>:<br>    f.close()<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">an error occurred: [Errno 2] No such file or directory: &#x27;test.txt&#x27;</span><br><span class="hljs-string">write mode</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>先尝试以read模式打开一个文件，如果文件不存在，则输出错误信息并新建一个文件。如果文件存在就读取文件信息。最终关闭文件</p><h2 id="5-自定义异常"><a href="#5-自定义异常" class="headerlink" title="5. 自定义异常"></a>5. 自定义异常</h2><p>将不满足程序逻辑要求的情况定义为错误</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">raise</span> error_object<br></code></pre></td></tr></table></figure><p>需求：密码长度不足时，报异常</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ShortInputError</span>(<span class="hljs-title class_ inherited__">Exception</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, length</span>):<br>        self.length = length<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;您输入的长度为<span class="hljs-subst">&#123;self.length&#125;</span>,密码最小长度为5&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inputPswd</span>():<br>    <span class="hljs-keyword">try</span>:<br>        con = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入密码: &quot;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(con)&lt;<span class="hljs-number">5</span> :<br>            <span class="hljs-keyword">raise</span> ShortInputError(<span class="hljs-built_in">len</span>(con))<br>    <span class="hljs-keyword">except</span> ShortInputError <span class="hljs-keyword">as</span> sie:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;发生了一个错误,<span class="hljs-subst">&#123;sie&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;设置成功&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    inputPswd()<br>    <br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">请输入密码: 123</span><br><span class="hljs-string">发生了一个错误,您输入的长度为3, 密码最小长度为5</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>古老的学习笔记</category>
      
      <category>Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>15 面向对象</title>
    <link href="/2022/10/25/15%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <url>/2022/10/25/15%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="面向对象基础"><a href="#面向对象基础" class="headerlink" title="面向对象基础"></a>面向对象基础</h1><p>面向对象就是将变成当成一个事物，对外界来说，事物就是直接使用的，不用去管它内部的情况。编程就是设置事物能做成什么事</p><h2 id="1-类和对象"><a href="#1-类和对象" class="headerlink" title="1. 类和对象"></a>1. 类和对象</h2><p>类相当于蓝图，对象相当于在蓝图下创建的机器（实例化）</p><h3 id="1-1-类"><a href="#1-1-类" class="headerlink" title="1.1 类"></a>1.1 类</h3><ul><li>类是对一系列具有相同特征和行为的统称，不是真实存在的</li><li>特征即是属性</li><li>行为即是方法</li></ul><h3 id="1-2-对象"><a href="#1-2-对象" class="headerlink" title="1.2 对象"></a>1.2 对象</h3><p>对象是类创建出来的真实存在的事物，是真实存在的</p><h2 id="2-面向对象实现的方法"><a href="#2-面向对象实现的方法" class="headerlink" title="2. 面向对象实现的方法"></a>2. 面向对象实现的方法</h2><h3 id="2-1-定义类"><a href="#2-1-定义类" class="headerlink" title="2.1 定义类"></a>2.1 定义类</h3><p><strong>用大驼峰命名习惯</strong></p><h3 id="2-2-创建对象"><a href="#2-2-创建对象" class="headerlink" title="2.2 创建对象"></a>2.2 创建对象</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">object_name = class_name()<br></code></pre></td></tr></table></figure><h3 id="2-3-创建洗衣机类"><a href="#2-3-创建洗衣机类" class="headerlink" title="2.3 创建洗衣机类"></a>2.3 创建洗衣机类</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">WashingMachine</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wash</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;washingmachine is washing clothes&quot;</span>)<br><br>washer = WashingMachine()<br>washer.wash()<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">washingmachine is washing clothes</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h3 id="2-4-类中的self"><a href="#2-4-类中的self" class="headerlink" title="2.4 类中的self"></a>2.4 类中的self</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">WashingMachine</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wash</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;washingmachine is washing clothes&quot;</span>)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">washwash</span>(<span class="hljs-params">self</span>):<br>        self.wash()<br>        self.wash()<br><br>washer = WashingMachine()<br>washer.washwash()<span class="hljs-comment"># 此时self为实例化的washer</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">washingmachine is washing clothes</span><br><span class="hljs-string">washingmachine is washing clothes</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h3 id="2-5-类外面获取对象的属性"><a href="#2-5-类外面获取对象的属性" class="headerlink" title="2.5 类外面获取对象的属性"></a>2.5 类外面获取对象的属性</h3><p>在类外定义属性名不用定义属性</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">WashingMachine</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wash</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;washingmachine is washing clothes&quot;</span>)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">washwash</span>(<span class="hljs-params">self</span>):<br>        self.wash()<br>        self.wash()<br><br>washer = WashingMachine()<br>washer.height = <span class="hljs-number">100</span><br>washer.width = <span class="hljs-number">200</span><br><span class="hljs-built_in">print</span>(washer.height)<br><span class="hljs-built_in">print</span>(washer.width)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">100</span><br><span class="hljs-string">200</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h3 id="2-6-在类中获取对象的属性"><a href="#2-6-在类中获取对象的属性" class="headerlink" title="2.6 在类中获取对象的属性"></a>2.6 在类中获取对象的属性</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">WashingMachine</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">print_info</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Height: <span class="hljs-subst">&#123;self.height&#125;</span>&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Width: <span class="hljs-subst">&#123;self.width&#125;</span>&quot;</span>)<br><br>washer = WashingMachine()<br>washer.height = <span class="hljs-number">100</span><br>washer.width = <span class="hljs-number">200</span><br>washer.print_info()<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Height: 100</span><br><span class="hljs-string">Width: 200</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>如果没有定义</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">WashingMachine</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">print_info</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Height: <span class="hljs-subst">&#123;self.height&#125;</span>&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Width: <span class="hljs-subst">&#123;self.width&#125;</span>&quot;</span>)<br><br>washer = WashingMachine()<br><span class="hljs-comment">#washer.height = 100</span><br><span class="hljs-comment">#washer.width = 200</span><br>washer.print_info()<br><br><span class="hljs-comment">#报错</span><br></code></pre></td></tr></table></figure><h2 id="4-魔法方法"><a href="#4-魔法方法" class="headerlink" title="4. 魔法方法"></a>4. 魔法方法</h2><p><code>__function__()</code>的方法称为魔法方法，会被自动调用</p><h3 id="4-1-init"><a href="#4-1-init" class="headerlink" title="4.1 __init__()"></a>4.1 <code>__init__()</code></h3><p>构造方法，初始化对象，在创建一个方法时被自动调用</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">WashingMachine</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, height=<span class="hljs-number">100</span>, width=<span class="hljs-number">200</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-comment">#添加实例属性</span><br>        self.height = height<br>        self.width = width<br><br><span class="hljs-comment">#无参构造</span><br>washer = WashingMachine()<br><span class="hljs-built_in">print</span>(washer.height)<br><span class="hljs-built_in">print</span>(washer.width)<br><br><span class="hljs-comment">#带参构造</span><br>washer2 = WashingMachine(<span class="hljs-number">300</span>, <span class="hljs-number">400</span>)<br><span class="hljs-built_in">print</span>(washer2.height)<br><span class="hljs-built_in">print</span>(washer2.width)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">100</span><br><span class="hljs-string">200</span><br><span class="hljs-string">300</span><br><span class="hljs-string">400</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h3 id="4-2-str"><a href="#4-2-str" class="headerlink" title="4.2 __str__()"></a>4.2 <code>__str__()</code></h3><p>相当于Java中<code>toString()</code>方法</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">WashingMachine</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, height=<span class="hljs-number">100</span>, width=<span class="hljs-number">200</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-comment">#添加实例属性</span><br>        self.height = height<br>        self.width = width<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">str</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;Height: <span class="hljs-subst">&#123;self.height&#125;</span>\nWidth: <span class="hljs-subst">&#123;self.width&#125;</span>&quot;</span><br><br><span class="hljs-comment">#无参构造方法</span><br>washer = WashingMachine()<br><span class="hljs-built_in">print</span>(washer)<br><br><span class="hljs-comment">#带参构造方法</span><br>washer2 = WashingMachine(<span class="hljs-number">300</span>, <span class="hljs-number">400</span>)<br><span class="hljs-built_in">print</span>(washer2)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Height: 100</span><br><span class="hljs-string">Width: 200</span><br><span class="hljs-string">Height: 300</span><br><span class="hljs-string">Width: 400</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h3 id="4-3-del"><a href="#4-3-del" class="headerlink" title="4.3 __del__()"></a>4.3 <code>__del__()</code></h3><p>但删除对象时，python解释器会默认调用<code>__del__()</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">WashingMachine</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, height=<span class="hljs-number">100</span>, width=<span class="hljs-number">200</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-comment"># 添加实例属性</span><br>        self.height = height<br>        self.width = width<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">str</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;Height: <span class="hljs-subst">&#123;self.height&#125;</span>\nWidth: <span class="hljs-subst">&#123;self.width&#125;</span>&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__del__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;对象<span class="hljs-subst">&#123;self&#125;</span>成功被删除&quot;</span>)<br><br><br><span class="hljs-comment"># 无参构造方法</span><br>washer = WashingMachine()<br><span class="hljs-built_in">print</span>(washer)<br><br><span class="hljs-comment"># 带参构造方法</span><br>washer2 = WashingMachine(<span class="hljs-number">300</span>, <span class="hljs-number">400</span>)<br><span class="hljs-built_in">print</span>(washer2)<br><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Height: 100</span><br><span class="hljs-string">Width: 200</span><br><span class="hljs-string">Height: 300</span><br><span class="hljs-string">Width: 400</span><br><span class="hljs-string">对象Height: 100</span><br><span class="hljs-string">Width: 200成功被删除</span><br><span class="hljs-string">对象Height: 300</span><br><span class="hljs-string">Width: 400成功被删除</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>案例：烤地瓜（娱乐版）</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> time<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SweetPotato</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 生的 半生不熟 熟的 烤焦的</span><br>        self.level = <span class="hljs-string">&#x27;生的&#x27;</span><br>        self.time = <span class="hljs-string">&#x27;0&#x27;</span><br>        self.condiment = []<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">toast</span>(<span class="hljs-params">self</span>):<br>        level = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;想要几分熟的？&quot;</span>)<br>        self.level = level<br>        <span class="hljs-keyword">if</span> self.level == <span class="hljs-string">&#x27;生的&#x27;</span>:<br>            self.time = <span class="hljs-string">&#x27;2分钟以下&#x27;</span><br>        <span class="hljs-keyword">elif</span> self.level == <span class="hljs-string">&#x27;半生不熟的&#x27;</span>:<br>            self.time = <span class="hljs-string">&#x27;5分钟&#x27;</span><br>        <span class="hljs-keyword">elif</span> self.level == <span class="hljs-string">&#x27;全熟的&#x27;</span>:<br>            self.time = <span class="hljs-string">&#x27;7分钟&#x27;</span><br>        <span class="hljs-keyword">elif</span> self.level == <span class="hljs-string">&#x27;烤焦的&#x27;</span>:<br>            self.time = <span class="hljs-string">&#x27;10分钟以上&#x27;</span><br>        <span class="hljs-keyword">if</span> level == <span class="hljs-string">&#x27;烤焦的&#x27;</span> <span class="hljs-keyword">or</span> level == <span class="hljs-string">&#x27;生的&#x27;</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;你真是个小可爱，给你个<span class="hljs-subst">&#123;level&#125;</span>你啃啊&quot;</span>)<br>        <span class="hljs-keyword">if</span> level != <span class="hljs-string">&#x27;生的&#x27;</span>:<br>            time.sleep(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add_condiment</span>(<span class="hljs-params">self</span>):<br>        condiment_list = [<span class="hljs-string">&quot;蕃茄酱&quot;</span>, <span class="hljs-string">&quot;沙拉酱&quot;</span>, <span class="hljs-string">&quot;黑椒酱&quot;</span>, <span class="hljs-string">&quot;千岛酱&quot;</span>]<br>        <span class="hljs-keyword">if</span> self.level != <span class="hljs-string">&#x27;生的&#x27;</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;快烤好了，想要什么调料？我们这儿有蕃茄酱，沙拉酱，黑椒酱，千岛酱&quot;</span>)<br>        <span class="hljs-keyword">elif</span> self.level == <span class="hljs-string">&#x27;生的&#x27;</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;想要什么调料？我们这儿有蕃茄酱，沙拉酱，黑椒酱，千岛酱&quot;</span>)<br>        con = <span class="hljs-built_in">input</span>()<br>        self.condiment.append(con)<br>        <span class="hljs-keyword">if</span> con <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> condiment_list:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;我们这儿没有<span class="hljs-subst">&#123;con&#125;</span>，你找茬是吧，不卖了&quot;</span>)<br>            sys.exit()<br>        <span class="hljs-keyword">while</span> (con != <span class="hljs-string">&#x27;不要了&#x27;</span>) <span class="hljs-keyword">and</span> (con != <span class="hljs-string">&#x27;可以了&#x27;</span>):<br>            con = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;还要什么调料?&quot;</span>)<br>            <span class="hljs-keyword">if</span> con == <span class="hljs-string">&#x27;不要了&#x27;</span> <span class="hljs-keyword">or</span> con == <span class="hljs-string">&#x27;可以了&#x27;</span>:<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">if</span> con <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> condiment_list:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;我们这儿没有<span class="hljs-subst">&#123;con&#125;</span>，你找茬是吧，不卖了&quot;</span>)<br>                sys.exit()<br>            self.condiment.append(con)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;地瓜烤好了， 这个地瓜烤了<span class="hljs-subst">&#123;self.time&#125;</span>，是<span class="hljs-subst">&#123;self.level&#125;</span>，加的调味料有<span class="hljs-subst">&#123;self.condiment&#125;</span>&#x27;</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    sp = SweetPotato()<br>    sp.toast()<br>    sp.add_condiment()<br>    <span class="hljs-built_in">print</span>(sp)<br><br></code></pre></td></tr></table></figure><h2 id="5-继承"><a href="#5-继承" class="headerlink" title="5. 继承"></a>5. 继承</h2><h3 id="5-1-单继承"><a href="#5-1-单继承" class="headerlink" title="5.1 单继承"></a>5.1 单继承</h3><p>子类继承父类的属性</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">class_name</span>(<span class="hljs-title class_ inherited__">parent_class_name</span>):<br>    code<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 父类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    height = <span class="hljs-number">10</span><br>    width = <span class="hljs-number">20</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.length = <span class="hljs-number">30</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">method</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;This is A&quot;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>(<span class="hljs-title class_ inherited__">A</span>):<br>    <span class="hljs-keyword">pass</span><br><br><br>b = B()<br><span class="hljs-built_in">print</span>(b.length)<br><span class="hljs-built_in">print</span>(b.height)<br><span class="hljs-built_in">print</span>(b.width)<br>b.method()<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">30</span><br><span class="hljs-string">10</span><br><span class="hljs-string">20</span><br><span class="hljs-string">This is A</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h3 id="5-2-多继承"><a href="#5-2-多继承" class="headerlink" title="5.2 多继承"></a>5.2 多继承</h3><p>多继承时如果继承多个父类，则默认继承第一个父类的同名函数</p><p>多继承有继承顺序</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 父类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Master1</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.skill = <span class="hljs-string">&#x27;C++&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">method</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;I can use C++&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Master2</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.skill = <span class="hljs-string">&#x27;Java&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">method</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;I can use Java&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Noob</span>(Master1, Master2):<br>    <span class="hljs-keyword">pass</span><br><br><br>noob = Noob()<br><span class="hljs-built_in">print</span>(noob.skill)<br>noob.method()<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">C++</span><br><span class="hljs-string">I can use C++</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h3 id="5-3-子类重写父类属性"><a href="#5-3-子类重写父类属性" class="headerlink" title="5.3 子类重写父类属性"></a>5.3 子类重写父类属性</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 父类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Master1</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.skill = <span class="hljs-string">&#x27;C++&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">method</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;I can use C++&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Master2</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.skill = <span class="hljs-string">&#x27;Java&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">method</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;I can use Java&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Noob</span>(Master1, Master2):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">method</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;I know how to use both Java and C++&quot;</span>)<br><br><br>noob = Noob()<br><span class="hljs-built_in">print</span>(noob.skill)<br>noob.method()<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">C++</span><br><span class="hljs-string">I know how to use both Java and C++</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>可以通过</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">class_name.__mro__<br></code></pre></td></tr></table></figure><p>来查看类的继承关系</p><h3 id="5-4-子类调用父类的同名函数"><a href="#5-4-子类调用父类的同名函数" class="headerlink" title="5.4 子类调用父类的同名函数"></a>5.4 子类调用父类的同名函数</h3><p>下面的函数两个不同的父类有相同的成员函数。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 父类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Master1</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.skill = <span class="hljs-string">&#x27;C++&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">method</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;I can use <span class="hljs-subst">&#123;self.skill&#125;</span>&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Master2</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.skill = <span class="hljs-string">&#x27;Java&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">method</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;I can use <span class="hljs-subst">&#123;self.skill&#125;</span>&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Noob</span>(Master1, Master2):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">method</span>(<span class="hljs-params">self</span>):<br>        Master2.__init__(self)<br>        Master1.method(self)<br>        Master2.method(self)<br><br><br>noob = Noob()<br><span class="hljs-built_in">print</span>(noob.skill)<br>noob.method()<br><span class="hljs-built_in">print</span>(noob.skill)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">C++</span><br><span class="hljs-string">I can use Java</span><br><span class="hljs-string">I can use Java</span><br><span class="hljs-string">Java</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Noob</span>(Master1, Master2):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">method</span>(<span class="hljs-params">self</span>):<br>        Master2.__init__(self)<br>        Master1.method(self)<br>        Master2.method(self)<br></code></pre></td></tr></table></figure><p>事实上，在<code>method</code>中如果不使用<code>Master2.__init__(self)</code>会自动调用<code>self.__init__()</code>，然后会自动讲其skill属性设置为多继承默认继承到的skill属性也就是Master1的属性。</p><p>如果method中的先<code>Master2.__init__(self)</code>再<code>Master1.__init__(self)</code>则会造成最后输出</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">C++</span><br><span class="hljs-string">I can use C++</span><br><span class="hljs-string">I can use C++</span><br><span class="hljs-string">C++</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>也就说</p><ol><li>如果不调用<code>Master.__init__(self)</code>则会自动调用<code>self.__init__()</code>继承Master1的skill，输出C++</li><li>如果调用<code>Master2.__init__(self)</code>则会相当于使用Master2的方法去init Noob对象，最后输出Java</li></ol><p>可以实现以下需求</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs py"> --snip--<br> <br> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Noob</span>(Master1, Master2):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.skill = <span class="hljs-string">&#x27;Golang&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">method</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;I can use <span class="hljs-subst">&#123;self.skill&#125;</span>&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">master2_method</span>(<span class="hljs-params">self</span>):<br>        Master2.__init__(self)<br>        self.method()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">master1_method</span>(<span class="hljs-params">self</span>):<br>        Master1.__init__(self)<br>        self.method()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">noob_method</span>(<span class="hljs-params">self</span>):<br>        self.__init__()<br>        self.method()<br>        <br>noob = Noob()<br><br>noob.master2_method() <span class="hljs-comment"># I can use Java</span><br><span class="hljs-built_in">print</span>(noob.skill)     <span class="hljs-comment"># Java</span><br><br>noob.master1_method() <span class="hljs-comment"># I can use C++</span><br><span class="hljs-built_in">print</span>(noob.skill)     <span class="hljs-comment"># C++</span><br><br>noob.noob_method()    <span class="hljs-comment"># I can use Golang</span><br><span class="hljs-built_in">print</span>(noob.skill)     <span class="hljs-comment"># Golang</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">I can use Java</span><br><span class="hljs-string">Java</span><br><span class="hljs-string">I can use C++</span><br><span class="hljs-string">C++</span><br><span class="hljs-string">I can use Golang</span><br><span class="hljs-string">Golang</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h3 id="5-5-super-调用父类方法"><a href="#5-5-super-调用父类方法" class="headerlink" title="5.5 super() 调用父类方法"></a>5.5 super() 调用父类方法</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">super</span><span class="hljs-params">()</span></span><span class="hljs-selector-class">.parent_method</span>()<br></code></pre></td></tr></table></figure><p>使用super()可以自动查找父类，按照<code>__mro__</code>的顺序继承</p><p>多继承时使用<code>super()</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 父类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Master1</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.skill = <span class="hljs-string">&#x27;C++&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">method</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;I can use <span class="hljs-subst">&#123;self.skill&#125;</span>&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Master2</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.skill = <span class="hljs-string">&#x27;Java&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">method</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;I can use <span class="hljs-subst">&#123;self.skill&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Noob</span>(Master1, Master2):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.skill = <span class="hljs-string">&#x27;Golang&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">method</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;I can use <span class="hljs-subst">&#123;self.skill&#125;</span>&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">master2_method</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br>        self.method()<br>        <br>        <br>noob = Noob()<br><br>noob.master2_method()  <span class="hljs-comment"># I can use Java</span><br><span class="hljs-built_in">print</span>(noob.skill)  <span class="hljs-comment"># Java</span><br><br></code></pre></td></tr></table></figure><h3 id="5-6-私有权限"><a href="#5-6-私有权限" class="headerlink" title="5.6 私有权限"></a>5.6 私有权限</h3><h4 id="5-6-1-定义私有属性和方法"><a href="#5-6-1-定义私有属性和方法" class="headerlink" title="5.6.1 定义私有属性和方法"></a>5.6.1 定义私有属性和方法</h4><p> 可以通过建立私有属性和方法使子类不能继承</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">self.__privateProperty = ?<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>():<br>    pub = <span class="hljs-string">&#x27;pub&#x27;</span><br>    __pri = <span class="hljs-string">&#x27;pri&#x27;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.public = <span class="hljs-string">&#x27;public&#x27;</span><br>        self.__private = <span class="hljs-string">&#x27;private&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">public_method</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;I am a public method&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__private_method</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;I am a private method&#x27;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>(<span class="hljs-title class_ inherited__">A</span>):<br>    <span class="hljs-keyword">pass</span><br><br>b = B()<br><br><span class="hljs-built_in">print</span>(b.public)<br><span class="hljs-built_in">print</span>(b.pub)<br>b.public_method()<br><br><span class="hljs-built_in">print</span>(b.__private)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Traceback (most recent call last):</span><br><span class="hljs-string">  File &quot;/Users/xuxuan/PycharmProjects/Students/modify.py&quot;, line 23, in &lt;module&gt;</span><br><span class="hljs-string">    print(b.__private)</span><br><span class="hljs-string">AttributeError: &#x27;B&#x27; object has no attribute &#x27;__private&#x27;. Did you mean: &#x27;_A__private&#x27;?</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-built_in">print</span>(b.__pri)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Traceback (most recent call last):</span><br><span class="hljs-string">  File &quot;/Users/xuxuan/PycharmProjects/Students/modify.py&quot;, line 31, in &lt;module&gt;</span><br><span class="hljs-string">    print(b.__pri)</span><br><span class="hljs-string">AttributeError: &#x27;B&#x27; object has no attribute &#x27;__pri&#x27;. Did you mean: &#x27;_A__pri&#x27;?</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>b.__private_method()<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Traceback (most recent call last):</span><br><span class="hljs-string">  File &quot;/Users/xuxuan/PycharmProjects/Students/modify.py&quot;, line 39, in &lt;module&gt;</span><br><span class="hljs-string">    b.__private_method()</span><br><span class="hljs-string">AttributeError: &#x27;B&#x27; object has no attribute &#x27;__private_method&#x27;. Did you mean: &#x27;_A__private_method&#x27;?</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h4 id="5-6-2-修改私有属性的方法"><a href="#5-6-2-修改私有属性的方法" class="headerlink" title="5.6.2 修改私有属性的方法"></a>5.6.2 修改私有属性的方法</h4><ol><li>可以在父类中设置<code>get</code> <code>set</code>方法来方便子类调用和修改父类的私有变量</li><li>使用<code>class_parentclass__method()</code>或者 <code>class_parentclass__privateProperty</code>来访问和修改<br>例如<code>b._A__private_method</code></li></ol><h2 id="6-多态"><a href="#6-多态" class="headerlink" title="6. 多态"></a>6. 多态</h2><p>一个事物有多种形态（一个抽象类有多个子类，因而多态的概念依赖于继承）</p><ul><li>定义：多态是一种使用对象的方式，子类重写父类方法，调用不同子类对象的相同父类方法可以产生不同的执行结果</li><li>实现步骤：<ul><li>定义父类，提供公共方法</li><li>定义子类，重写父类方法</li><li>传递子类对象给调用者，可以看到不同子类执行效果不同</li></ul></li></ul><p>经典的猫狗类</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.length<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-title class_ inherited__">Animal</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, length=<span class="hljs-number">100</span></span>):<br>        self.length = length<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;狗啃骨头&quot;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span>(<span class="hljs-title class_ inherited__">Animal</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, length=<span class="hljs-number">80</span></span>):<br>        self.length = length<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;猫吃鱼&quot;</span>)<br><br><br>dog = Dog()<br>cat = Cat()<br><br>dog.eat()<br><span class="hljs-built_in">print</span>(dog.length)<br><br>cat.eat()<br><span class="hljs-built_in">print</span>(cat.length)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">狗啃骨头</span><br><span class="hljs-string">100</span><br><span class="hljs-string">猫吃鱼</span><br><span class="hljs-string">80</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>另一个案例</p><p>Person类实现了携带警犬工作的需求</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">work</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ArmyDog</span>(<span class="hljs-title class_ inherited__">Dog</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">work</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;追击敌人&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DrugDog</span>(<span class="hljs-title class_ inherited__">Dog</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">work</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;搜查毒品&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">work</span>(<span class="hljs-params">self, d</span>):<br>        d.work()<br><br><br>ad = ArmyDog()<br>dd = DrugDog()<br><br>p = Person()<br>p.work(ad)<br>p.work(dd)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">追击敌人</span><br><span class="hljs-string">搜查毒品</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="7-类属性和实例属性"><a href="#7-类属性和实例属性" class="headerlink" title="7. 类属性和实例属性"></a>7. 类属性和实例属性</h2><h3 id="7-1-设置和访问类属性"><a href="#7-1-设置和访问类属性" class="headerlink" title="7.1 设置和访问类属性"></a>7.1 设置和访问类属性</h3><ul><li>类属性就是类对象的属性，可以被改类的所有实例对象所共有，可以通过类对象和实例对象访问。</li><li>记录的某项数据始终保持一致时定义类属性</li></ul><p>前面的属性都是类属性</p><h3 id="7-2-修改类属性"><a href="#7-2-修改类属性" class="headerlink" title="7.2 修改类属性"></a>7.2 修改类属性</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">class_name.property_name</span> = val<br></code></pre></td></tr></table></figure><p>可以修改类属性</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>():<br>    tooth = <span class="hljs-number">10</span><br><br>wangcai = Dog()<br>xiaohei = Dog()<br><br><span class="hljs-built_in">print</span>(wangcai.tooth) <span class="hljs-comment"># 10</span><br><span class="hljs-built_in">print</span>(xiaohei.tooth) <span class="hljs-comment"># 10</span><br><br>Dog.tooth = <span class="hljs-number">15</span><br><br><span class="hljs-built_in">print</span>(wangcai.tooth) <span class="hljs-comment"># 15</span><br><span class="hljs-built_in">print</span>(xiaohei.tooth) <span class="hljs-comment"># 15</span><br><br>qiqi = Dog()<br><span class="hljs-built_in">print</span>(qiqi.tooth) <span class="hljs-comment"># 15</span><br><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">10</span><br><span class="hljs-string">10</span><br><span class="hljs-string">15</span><br><span class="hljs-string">15</span><br><span class="hljs-string">15</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>实例属性为<code>xiaohei.tooth</code>类属性为<code>Dog.tooth</code></p><h2 id="8-类方法和静态方法"><a href="#8-类方法和静态方法" class="headerlink" title="8. 类方法和静态方法"></a>8. 类方法和静态方法</h2><h3 id="8-1-类方法"><a href="#8-1-类方法" class="headerlink" title="8.1 类方法"></a>8.1 类方法</h3><ul><li>当方法中需要使用类对象(如访问私有类属性等)时，定义类方法</li><li>类方法一般和类属性配合使用</li></ul><img src="../img/image-20221011172519630.png" alt="image-20221011172519630" style="zoom:33%;" /><h3 id="8-2-静态方法-static-method"><a href="#8-2-静态方法-static-method" class="headerlink" title="8.2 静态方法 static method"></a>8.2 静态方法 static method</h3><h3 id="8-2-1-静态方法的特点"><a href="#8-2-1-静态方法的特点" class="headerlink" title="8.2.1 静态方法的特点"></a>8.2.1 静态方法的特点</h3><ul><li>使用 <code>@staticmethod</code> 装饰</li><li>能够通过实例对象和类对象进行访问</li></ul><h3 id="8-2-2-静态方法的使用场景"><a href="#8-2-2-静态方法的使用场景" class="headerlink" title="8.2.2 静态方法的使用场景"></a>8.2.2 静态方法的使用场景</h3><ul><li>当方法中既不需要使用实例对象，也不需要使用类对象时，定义静态方法</li><li>取消不必要的参数传递，减少内存消耗</li></ul><p>静态方法并不是真正意义上的类方法，它只是一个被放到类里的函数而已。<br>尽管如此，仍然称之为方法，但它没有关于 class 或 object 的任何信息，所以它实际上是一个独立的函数，只是被放到了类里，静态方法既没有 self 也没有 cls 参数 。（静态方法可以访问类属性，例如 Book.TYPES)</p><p>静态方法通常用于组织代码，例如如果认为将某个函数放到某个类里，整体代码会因此更符合逻辑，于是可以将这个函数变成该类的静态方法。所以如果需要在类里放一个函数进去，此函数不会用到任何关于类或实例的信息，那么就可以用 @staticmethod 对其进行装饰。</p><p>三种方法中，实例方法和类方法用得最多，静态方法不常用。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>():<br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">info_print</span>(<span class="hljs-params">a=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;dog <span class="hljs-subst">&#123;a&#125;</span>&quot;</span>)<br><br>qiqi = Dog()<br>qiqi.info_print(<span class="hljs-number">2</span>)<br>Dog.info_print(<span class="hljs-number">2</span>)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">dog 2</span><br><span class="hljs-string">dog 2</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h3 id="8-3-实例方法，类方法和静态方法的区别"><a href="#8-3-实例方法，类方法和静态方法的区别" class="headerlink" title="8.3 实例方法，类方法和静态方法的区别"></a>8.3 实例方法，类方法和静态方法的区别</h3><p>在调用上的区别在于，实例方法要先实例化一个对象再调用这个实例化方法，而类方法不需要有类的实例，直接类名.方法名就可以调用。</p><p>实例方法至少有一个参数，通常用self，这个参数里面是这个实例本身。类方法至少有一个参数，通常用cls，这个参数里面是这个类本身。</p><p>实例方法由于有实例，所以实例的属性对其实可见的，但类方法显然没有属性。</p><p>本质上来讲，类方法和实例方法没有本质区别，只不过在调用的时候，实例方法把这个实例本身当做参数传过去了。</p><p>　　1.静态方法不可以继承　　</p><p>　　2.类方法不能访问实例变量，只能访问类变量</p>]]></content>
    
    
    <categories>
      
      <category>古老的学习笔记</category>
      
      <category>Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>14 文件</title>
    <link href="/2022/10/25/14%20%E6%96%87%E4%BB%B6/"/>
    <url>/2022/10/25/14%20%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><ul><li>文件操作的作用</li><li>文件的基本操作<ul><li>打开</li><li>读写</li><li>关闭</li></ul></li><li>文件备份</li><li>文件和文件夹操作</li></ul><h2 id="1-文件的基本操作"><a href="#1-文件的基本操作" class="headerlink" title="1. 文件的基本操作"></a>1. 文件的基本操作</h2><h3 id="1-1-文件的操作步骤"><a href="#1-1-文件的操作步骤" class="headerlink" title="1.1 文件的操作步骤"></a>1.1 文件的操作步骤</h3><ol><li>打开文件</li><li>读写等操作（或者不操作）</li><li>关闭文件</li></ol><h4 id="1-1-1-打开"><a href="#1-1-1-打开" class="headerlink" title="1.1.1 打开"></a>1.1.1 打开</h4><p>使用<code>open()</code>可以打开一个已经存在的文件或者创建一个新文件</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">open</span>(name, mode)<br></code></pre></td></tr></table></figure><p>一个例子</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>)<br>f.write(<span class="hljs-string">&#x27;Hello world&#x27;</span>)<br>f.close()<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">test.txt</span><br><span class="hljs-string">Hello world</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>open的模式</p><ul><li>带有w的都是可写，并且在文件不存在时创建一个新的文件</li><li>带有r的都是可读</li><li>带有+的都是可读可写</li><li>带有b的都是以二进制形式</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs markdown">一、访问模式总体概览：<br><br>r  w  a<br>rbwbab<br>r+w+a+<br>rb+wb+ab+<br>二、访问模式详细解说：<br>**<br>r <br>以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。<br>w<br>打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。<br>a<br>打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。<br>**<br>rb<br>以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。<br>wb<br>以二进制格式打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。<br>ab<br>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。<br>r+<br>打开一个文件用于读写。文件指针将会放在文件的开头。<br>w+<br>打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。<br>a+<br>打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。<br>rb+<br>以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。<br>wb+<br>以二进制格式打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。<br>ab+<br>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。<br></code></pre></td></tr></table></figure><h4 id="1-1-2-文件对象方法"><a href="#1-1-2-文件对象方法" class="headerlink" title="1.1.2 文件对象方法"></a>1.1.2 文件对象方法</h4><h5 id="1-1-2-1-写"><a href="#1-1-2-1-写" class="headerlink" title="1.1.2.1 写"></a>1.1.2.1 写</h5><ol><li>以<code>w</code>模式打开</li></ol><ul><li>名称不存在时，新建一个文件</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>)<br>f.write(<span class="hljs-string">&#x27;Hello world&#x27;</span>)<br>f.close()<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">test.txt</span><br><span class="hljs-string">Hello world</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><ul><li>名称存在时，覆盖文件内容</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>)<br>f.write(<span class="hljs-string">&#x27;你好&#x27;</span>)<br>f.close()<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">test.txt</span><br><span class="hljs-string">你好</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>以<code>a</code>模式打开</li></ol><ul><li><p>名称不存在时，新建一个文件</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test1.txt&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>)<br>f.write(<span class="hljs-string">&#x27;你好&#x27;</span>)<br>f.close()<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">test1.txt</span><br><span class="hljs-string">你好</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>名称存在时，在原来的文本后面追加内容</p></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test1.txt&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>)<br>f.write(<span class="hljs-string">&#x27;Hello world&#x27;</span>)<br>f.close()<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">test1.txt</span><br><span class="hljs-string">你好Hello world</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h5 id="1-1-2-2-读"><a href="#1-1-2-2-读" class="headerlink" title="1.1.2.2 读"></a>1.1.2.2 读</h5><ul><li><code>read()</code></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">file.read(num)<br></code></pre></td></tr></table></figure><blockquote><p>num表示读取的长度，缺省时选择全部</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test1.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>)<br>s = f.read()<br><span class="hljs-built_in">print</span>(s)<br>f.close()<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">你好Hello world</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><ul><li><code>readlines()</code></li></ul><p>readlines可以按照整行的方式读取并返回一个列表，每行的数据作为一个元素</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">test1.txt</span><br><span class="hljs-string">你好Hello world</span><br><span class="hljs-string">hello</span><br><span class="hljs-string">yy is beautiful</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test1.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>)<br>s = f.readlines()<br><span class="hljs-built_in">print</span>(s)<br>f.close()<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">[&#x27;你好Hello world\n&#x27;, &#x27;hello\n&#x27;, &#x27;yy is beautiful&#x27;]</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><ul><li><code>readline()</code></li></ul><p>readline可以按照整行的方式读取并返回一个列表，每行的数据作为一个元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">test1.txt</span><br><span class="hljs-string">你好Hello world</span><br><span class="hljs-string">hello</span><br><span class="hljs-string">yy is beautiful</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test1.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>)<br>s = f.readline()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;The first line is: <span class="hljs-subst">&#123;s&#125;</span>&quot;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br><br>s = f.readline()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;The second line is: <span class="hljs-subst">&#123;s&#125;</span>&quot;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br><br>s = f.readline()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;The third line is: <span class="hljs-subst">&#123;s&#125;</span>&quot;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>f.close()<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">The first line is: 你好Hello world</span><br><span class="hljs-string">The second line is: hello</span><br><span class="hljs-string">The third line is: yy is beautiful% </span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>1.1.2.3 seek()</p><p>用法: </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">file.seek(偏移量， 起始位置)<br></code></pre></td></tr></table></figure><p>作用：改变文件指针的位置和每次读取的偏移量</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test1.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>)<br>f.seek(<span class="hljs-number">12</span>, <span class="hljs-number">0</span>)<br>s = f.read()<br><span class="hljs-built_in">print</span>(s)<br>f.close()<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">world</span><br><span class="hljs-string">hello</span><br><span class="hljs-string">yy is beautiful</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="2-文件备份"><a href="#2-文件备份" class="headerlink" title="2. 文件备份"></a>2. 文件备份</h2><p>需求：对一个文件完成备份</p><h3 id="2-1-步骤"><a href="#2-1-步骤" class="headerlink" title="2.1 步骤"></a>2.1 步骤</h3><ul><li>接受用户输入的文件名</li><li>规划备份文件名</li><li>备份文件写入数据</li></ul><h3 id="2-2-代码实现"><a href="#2-2-代码实现" class="headerlink" title="2.2 代码实现"></a>2.2 代码实现</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 1. 接受用户输入的文件名</span><br><span class="hljs-keyword">import</span> sys<br>old_file_name = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入一个文件名：\n&quot;</span>)<br><span class="hljs-keyword">if</span> old_file_name[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;.&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;输入的文件名无效&#x27;</span>)<br>    sys.exit()<br><span class="hljs-comment"># 2. 规划备份文件名</span><br>new_file_name = <span class="hljs-string">&#x27;&#x27;</span><br>index = old_file_name.rfind(<span class="hljs-string">&#x27;.&#x27;</span>)<br>new_file_name = old_file_name[:index] + <span class="hljs-string">&#x27;_copy&#x27;</span> + old_file_name[index:]<br><span class="hljs-comment"># 3. 备份文件写入数据</span><br>file_old = <span class="hljs-built_in">open</span>(old_file_name, <span class="hljs-string">&#x27;rb&#x27;</span>)<br>file_new = <span class="hljs-built_in">open</span>(new_file_name, <span class="hljs-string">&#x27;wb&#x27;</span>)<br><span class="hljs-comment"># 在学习资料中用了循环来复制 while True: con = file_old.read(1024) if len(con) == 0 break 在Java中讲到字节流的时候确实也是用到的这种方法，但此处read完全可以满足需求。</span><br>file_new.write(file_old.read())<br>file_new.close()<br>file_old.close()<br></code></pre></td></tr></table></figure><h2 id="3-文件和文件夹操作"><a href="#3-文件和文件夹操作" class="headerlink" title="3. 文件和文件夹操作"></a>3. 文件和文件夹操作</h2><p>导入Python的os模块来使用相关功能</p><h3 id="3-1-文件重命名-rename"><a href="#3-1-文件重命名-rename" class="headerlink" title="3.1 文件重命名 rename()"></a>3.1 文件重命名 rename()</h3><ul><li>介绍</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py">rename(src, dst, *, src_dir_fd=<span class="hljs-literal">None</span>, dst_dir_fd=<span class="hljs-literal">None</span>)<br>    Rename a file <span class="hljs-keyword">or</span> directory.<br>    <br>    If either src_dir_fd <span class="hljs-keyword">or</span> dst_dir_fd <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>, it should be a file<br>      descriptor <span class="hljs-built_in">open</span> to a directory, <span class="hljs-keyword">and</span> the respective path string (src <span class="hljs-keyword">or</span> dst)<br>      should be relative; the path will then be relative to that directory.<br>    src_dir_fd <span class="hljs-keyword">and</span> dst_dir_fd, may <span class="hljs-keyword">not</span> be implemented on your platform.<br>      If they are unavailable, using them will <span class="hljs-keyword">raise</span> a NotImplementedError.<br></code></pre></td></tr></table></figure><ul><li>实例</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> os<br>os.rename(<span class="hljs-string">&#x27;test.txt&#x27;</span>, <span class="hljs-string">&#x27;test2.txt&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="3-2-删除文件-remove"><a href="#3-2-删除文件-remove" class="headerlink" title="3.2 删除文件 remove()"></a>3.2 删除文件 remove()</h3><ul><li>介绍</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py">remove(path, *, dir_fd=<span class="hljs-literal">None</span>)<br>    Remove a file (same <span class="hljs-keyword">as</span> unlink()).<br>    <br>    If dir_fd <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>, it should be a file descriptor <span class="hljs-built_in">open</span> to a directory,<br>      <span class="hljs-keyword">and</span> path should be relative; path will then be relative to that directory.<br>    dir_fd may <span class="hljs-keyword">not</span> be implemented on your platform.<br>      If it <span class="hljs-keyword">is</span> unavailable, using it will <span class="hljs-keyword">raise</span> a NotImplementedError.<br></code></pre></td></tr></table></figure><ul><li>实例</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> os<br>os.remove(<span class="hljs-string">&#x27;test2.txt&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="3-3-创建文件夹-mkdir"><a href="#3-3-创建文件夹-mkdir" class="headerlink" title="3.3 创建文件夹 mkdir()"></a>3.3 创建文件夹 mkdir()</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> os<br><span class="hljs-meta">&gt;&gt;&gt; </span>os.mkdir(<span class="hljs-string">&#x27;test1&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="3-4-删除文件夹-rmdir"><a href="#3-4-删除文件夹-rmdir" class="headerlink" title="3.4 删除文件夹 rmdir()"></a>3.4 删除文件夹 rmdir()</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> os<br><span class="hljs-meta">&gt;&gt;&gt; </span>os.rmdir(<span class="hljs-string">&#x27;test1&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="3-5-获取当前目录-getcwd"><a href="#3-5-获取当前目录-getcwd" class="headerlink" title="3.5 获取当前目录 getcwd()"></a>3.5 获取当前目录 getcwd()</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> os<br><span class="hljs-meta">&gt;&gt;&gt; </span>os.getcwd()<br><span class="hljs-string">&#x27;/Users/xuxuan&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="3-6-改变默认目录-chdir"><a href="#3-6-改变默认目录-chdir" class="headerlink" title="3.6 改变默认目录 chdir()"></a>3.6 改变默认目录 chdir()</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> os<br><span class="hljs-meta">&gt;&gt;&gt; </span>os.chdir(<span class="hljs-string">&#x27;test1&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>os.getcwd()<br><span class="hljs-string">&#x27;/Users/xuxuan/test1&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="3-7-获取文件目录-os-listdir"><a href="#3-7-获取文件目录-os-listdir" class="headerlink" title="3.7 获取文件目录 os.listdir()"></a>3.7 获取文件目录 os.listdir()</h3><p>相当于终端中使用<code>ls</code>并返回一个列表</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>os.listdir()<br>[<span class="hljs-string">&#x27;Music&#x27;</span>, <span class="hljs-string">&#x27;out.txt&#x27;</span>, <span class="hljs-string">&#x27;test1&#x27;</span>, <span class="hljs-string">&#x27;test.py&#x27;</span>, <span class="hljs-string">&#x27;IdeaProjects&#x27;</span>]<br></code></pre></td></tr></table></figure><h3 id="3-7-重命名文件夹"><a href="#3-7-重命名文件夹" class="headerlink" title="3.7 重命名文件夹"></a>3.7 重命名文件夹</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> os<br>os.rename(<span class="hljs-string">&#x27;test&#x27;</span>, <span class="hljs-string">&#x27;test2&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="3-8-案例"><a href="#3-8-案例" class="headerlink" title="3.8 案例"></a>3.8 案例</h3><p>需求1： 把code文件夹所有<code>.txt</code>文件重命名为 <code>Python+file</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> os<br><br>file_list = os.listdir()<br><span class="hljs-keyword">for</span> file_old <span class="hljs-keyword">in</span> file_list:<br>    <span class="hljs-keyword">if</span> file_old[-<span class="hljs-number">4</span>:] == <span class="hljs-string">&#x27;.txt&#x27;</span>:<br>        file_new = <span class="hljs-string">&#x27;Python &#x27;</span> + file_old<br>        os.rename(file_old, file_new)<br>        <br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">使用前的列表：</span><br><span class="hljs-string">[&#x27;.DS_Store&#x27;, &#x27;Python Python test_copy.txt&#x27;, &#x27;test.py&#x27;, &#x27;Python Python test1.txt&#x27;, &#x27;Python Python test1_copy.txt&#x27;]</span><br><span class="hljs-string">使用后的列表：</span><br><span class="hljs-string">[&#x27;.DS_Store&#x27;, &#x27;Python Python Python test_copy.txt&#x27;, &#x27;test.py&#x27;, &#x27;Python Python Python test1_copy.txt&#x27;, &#x27;Python Python Python test1.txt&#x27;]</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>清除</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> os<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;使用前的列表：\n<span class="hljs-subst">&#123;os.listdir()&#125;</span>&#x27;</span>)<br><br>file_list = os.listdir()<br><span class="hljs-keyword">for</span> file_old <span class="hljs-keyword">in</span> file_list:<br>    file_new = file_old.replace(<span class="hljs-string">&#x27;Python &#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>    os.rename(file_old, file_new)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;使用后的列表：\n<span class="hljs-subst">&#123;os.listdir()&#125;</span>&#x27;</span>)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">使用前的列表：</span><br><span class="hljs-string">[&#x27;.DS_Store&#x27;, &#x27;Python Python Python test_copy.txt&#x27;, &#x27;test.py&#x27;, &#x27;Python Python Python test1_copy.txt&#x27;, &#x27;Python Python Python test1.txt&#x27;]</span><br><span class="hljs-string">使用后的列表：</span><br><span class="hljs-string">[&#x27;.DS_Store&#x27;, &#x27;test1.txt&#x27;, &#x27;test_copy.txt&#x27;, &#x27;test.py&#x27;, &#x27;test1_copy.txt&#x27;]</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>需求2：批量修改文件名，既可添加指定字符串，又能删除指定字符串</p><p>花了一点儿时间写了个简单的控制</p><p>That’s very cute and I will continue to impove this</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">file name modification</span><br><span class="hljs-string"></span><br><span class="hljs-string">Author: Xuan</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 0.1</span><br><span class="hljs-string"></span><br><span class="hljs-string">Date: 2022.10.11</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_str</span>(<span class="hljs-params">string: <span class="hljs-built_in">str</span>, file_name:<span class="hljs-built_in">str</span> = <span class="hljs-literal">None</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    This will add some word before the last &#x27;.&#x27; of the filename</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    index = file_name.rfind(<span class="hljs-string">&#x27;.&#x27;</span>)<br>    new_file_name = file_name[:index] + string + file_name[index:]<br>    os.rename(file_name, new_file_name)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;successfully changed \033[31m<span class="hljs-subst">&#123;file_name&#125;</span>\033[0m to \033[31m<span class="hljs-subst">&#123;new_file_name&#125;</span>\033[0m&#x27;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">change_str</span>(<span class="hljs-params">old_string: <span class="hljs-built_in">str</span>, new_string: <span class="hljs-built_in">str</span>, file_name:<span class="hljs-built_in">str</span> = <span class="hljs-literal">None</span></span>) -&gt;<span class="hljs-built_in">bool</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    This function will change the old word to the new word the user inputs</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    new_file_name = file_name.replace(old_string, new_string)<br>    os.rename(file_name, new_file_name)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;successfully changed \033[31m<span class="hljs-subst">&#123;file_name&#125;</span>\033[0m to \033[31m<span class="hljs-subst">&#123;new_file_name&#125;</span>\033[0m&#x27;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete_str</span>(<span class="hljs-params">string: <span class="hljs-built_in">str</span>, file_name:<span class="hljs-built_in">str</span> = <span class="hljs-literal">None</span></span>) -&gt;<span class="hljs-built_in">bool</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    This function will delete the word the user chooses</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    new_file_name = file_name.replace(string, <span class="hljs-string">&#x27;&#x27;</span>)<br>    os.rename(file_name, new_file_name)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;successfully changed \033[31m<span class="hljs-subst">&#123;file_name&#125;</span>\033[0m to \033[31m<span class="hljs-subst">&#123;new_file_name&#125;</span>\033[0m&#x27;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">start</span>() -&gt; <span class="hljs-literal">None</span>:<br>    path = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Input a path where you want to change the file name of the directory: &#x27;</span>)<br>    os.chdir(path)<br>    file_name = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Input the file name which you want to change, all for all the file in that directory: &#x27;</span>)<br>    <span class="hljs-keyword">if</span> file_name == <span class="hljs-string">&#x27;all&#x27;</span> <span class="hljs-keyword">or</span> file_name == <span class="hljs-string">&#x27;\n&#x27;</span>:<br>        file_name =  <span class="hljs-string">&#x27;&#x27;</span><br>    file_list = os.listdir()<br>    <span class="hljs-keyword">if</span> file_name != <span class="hljs-string">&#x27;&#x27;</span>:<br>        <span class="hljs-keyword">if</span> file_name <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> file_list:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;file name does NOT exist&#x27;</span>)<br>            sys.exit()<br>        file_list = [file_name]<br><br>    mode = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Input a mode, a for append some word before the last . c for change some word, d for delete some word: &#x27;</span>)<br>    <span class="hljs-keyword">if</span> mode != <span class="hljs-string">&#x27;c&#x27;</span> <span class="hljs-keyword">and</span> mode != <span class="hljs-string">&#x27;d&#x27;</span> <span class="hljs-keyword">and</span> mode != <span class="hljs-string">&#x27;a&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Input error. You can only input a, d or c: &quot;</span>)<br>        sys.exit()<br>    <span class="hljs-keyword">if</span> file_name == <span class="hljs-string">&#x27;&#x27;</span>:<br>        surfix = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;choose a suffix if you want, all for all kinds of suffix in that directory(for example .txt): &#x27;</span>)<br>        <span class="hljs-keyword">if</span> surfix == <span class="hljs-string">&#x27;all&#x27;</span> <span class="hljs-keyword">or</span> surfix == <span class="hljs-string">&#x27;\n&#x27;</span>:<br>            surfix == <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">if</span> surfix <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> file_list:<br>                <span class="hljs-keyword">if</span> f.find(surfix) == -<span class="hljs-number">1</span>:<br>                    file_list.remove(f)<br>    <span class="hljs-keyword">else</span>:<br>        surfix = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;You have chosen the folling files. Check that again.&#x27;</span>)<br>    <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> file_list:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;\033[31m<span class="hljs-subst">&#123;f&#125;</span>\033[0m&#x27;</span>, end=<span class="hljs-string">&#x27;   &#x27;</span>)<br>    <span class="hljs-built_in">print</span>()<br>    <span class="hljs-keyword">if</span>(mode == <span class="hljs-string">&#x27;a&#x27;</span>):<br>        new_str = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;input the word you want to add: &#x27;</span>)<br>        <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> file_list:<br>            add_str(string=new_str, file_name=f)<br>    <span class="hljs-keyword">if</span>(mode == <span class="hljs-string">&#x27;c&#x27;</span>):<br>        old_str = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;selete the word you want to replace: &#x27;</span>)<br>        new_str = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;input the word you want to use to replace the old one: &#x27;</span>)<br>        <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> file_list:<br>            change_str(old_string=old_str, new_string=new_str, file_name=f)<br>    <span class="hljs-keyword">elif</span>(mode == <span class="hljs-string">&#x27;d&#x27;</span>):<br>        old_str = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;selete the word you want to delete: &#x27;</span>)<br>        <span class="hljs-comment">#times = input(f&#x27;how many &quot;&#123;old_str&#125;&quot; you want to delete&#x27;)</span><br>        <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> file_list:<br>            delete_str(string=old_str, file_name=f)<br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    start()<br></code></pre></td></tr></table></figure><p>To do list:</p><ul><li>GUI</li><li>more options</li></ul>]]></content>
    
    
    <categories>
      
      <category>古老的学习笔记</category>
      
      <category>Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>13 函数</title>
    <link href="/2022/10/25/13%20%E5%87%BD%E6%95%B0/"/>
    <url>/2022/10/25/13%20%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="1-函数基础"><a href="#1-函数基础" class="headerlink" title="1. 函数基础"></a>1. 函数基础</h1><ul><li>函数的作用</li><li>函数的使用步骤</li><li>函数的参数作用</li><li>函数返回值的作用</li><li>函数说明文档</li><li>函数嵌套</li></ul><h2 id="1-1-函数的作用"><a href="#1-1-函数的作用" class="headerlink" title="1.1 函数的作用"></a>1.1 函数的作用</h2><p>提高代码的复用性</p><h2 id="1-2-函数的使用步骤"><a href="#1-2-函数的使用步骤" class="headerlink" title="1.2 函数的使用步骤"></a>1.2 函数的使用步骤</h2><h3 id="1-2-1-定义函数"><a href="#1-2-1-定义函数" class="headerlink" title="1.2.1 定义函数"></a>1.2.1 定义函数</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">function</span>(<span class="hljs-params">参数</span>):<br>  code<br></code></pre></td></tr></table></figure><h3 id="1-2-2-调用函数"><a href="#1-2-2-调用函数" class="headerlink" title="1.2.2 调用函数"></a>1.2.2 调用函数</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">function(参数)<br></code></pre></td></tr></table></figure><p>Python中函数必须先定义再使用</p><p>一个简单的add函数:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">*value</span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> value:<br>        <span class="hljs-built_in">sum</span> += i<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span><br><br><span class="hljs-built_in">print</span>(add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span> ,<span class="hljs-number">5</span>))<br></code></pre></td></tr></table></figure><h2 id="1-3-函数说明文档"><a href="#1-3-函数说明文档" class="headerlink" title="1.3. 函数说明文档"></a>1.3. 函数说明文档</h2><ul><li>定义函数的说明文档</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func_name</span>(<span class="hljs-params">参数</span>):<br>  <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">  说明文档</span><br><span class="hljs-string">  &quot;&quot;&quot;</span><br>  code<br>  ...<br></code></pre></td></tr></table></figure><ul><li>查看函数的说明文档</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">help</span>(func_name)<br></code></pre></td></tr></table></figure><p>查看len的说明</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">help</span>(<span class="hljs-built_in">len</span>)<br><br>Help on built-<span class="hljs-keyword">in</span> function <span class="hljs-built_in">len</span> <span class="hljs-keyword">in</span> module builtins:<br><br><span class="hljs-built_in">len</span>(obj, /)<br>    Return the number of items <span class="hljs-keyword">in</span> a container.<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs py"><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">*value</span>) -&gt; <span class="hljs-built_in">int</span>:<br><span class="hljs-meta">... </span>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"><span class="hljs-meta">... </span>    求和函数</span><br><span class="hljs-string"><span class="hljs-meta">... </span>    &quot;&quot;&quot;</span><br><span class="hljs-meta">... </span>    <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br><span class="hljs-meta">... </span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> value:<br><span class="hljs-meta">... </span>        <span class="hljs-built_in">sum</span> += i<br><span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">help</span>(add))<br><br><br>Help on function add <span class="hljs-keyword">in</span> module __main__:<br><br>add(*value) -&gt; <span class="hljs-built_in">int</span><br>    求和函数<br></code></pre></td></tr></table></figure><h1 id="2-函数进阶"><a href="#2-函数进阶" class="headerlink" title="2. 函数进阶"></a>2. 函数进阶</h1><ul><li>变量的作用域</li><li>多函数执行流程</li><li>函数返回值</li><li>函数的参数</li><li>拆包和交换变量的值</li><li>引用</li><li>可变和不可变类型</li></ul><h2 id="2-1-变量的作用域"><a href="#2-1-变量的作用域" class="headerlink" title="2.1 变量的作用域"></a>2.1 变量的作用域</h2><p>按照变量生效的范围来分：可以分为 局部变量 和 全局变量</p><h3 id="2-1-1-局部变量"><a href="#2-1-1-局部变量" class="headerlink" title="2.1.1 局部变量"></a>2.1.1 局部变量</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>():<br>  a = <span class="hljs-number">100</span><br>  <span class="hljs-keyword">return</span> a<br><br><span class="hljs-comment">#print(a) 这将报错，因为a值在test()中被定义，是局部变量</span><br></code></pre></td></tr></table></figure><h3 id="2-1-2-全局变量"><a href="#2-1-2-全局变量" class="headerlink" title="2.1.2 全局变量"></a>2.1.2 全局变量</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py">a = <span class="hljs-number">100</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>():<br>  <span class="hljs-built_in">print</span>(a)<br>  <br>test()<br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></table></figure><p>这里test()和下面的a都将有效</p><h3 id="2-1-3-修改全局变量"><a href="#2-1-3-修改全局变量" class="headerlink" title="2.1.3 修改全局变量"></a>2.1.3 修改全局变量</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs py">a = <span class="hljs-number">100</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">testA</span>():<br>    <span class="hljs-built_in">print</span>(a)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">testB</span>():<br>    a = <span class="hljs-number">200</span><br>    <span class="hljs-built_in">print</span>(a)<br>    <br>testA()<br>testB()<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">100</span><br><span class="hljs-string">200</span><br><span class="hljs-string">100</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>可以看到运行testB()之后，a变量的值事实上并没有被修改</p><p>testB()中的a为局部变量，并不是上面定义的全局变量a</p><p>如果想要修改全局变量</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs py">a = <span class="hljs-number">100</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">testA</span>():<br>    <span class="hljs-built_in">print</span>(a)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">testB</span>():<br>    <span class="hljs-keyword">global</span> a<br>    a = <span class="hljs-number">200</span><br>    <span class="hljs-built_in">print</span>(a)<br><br>testA()<br>testB()<br><span class="hljs-built_in">print</span>(a)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">100</span><br><span class="hljs-string">200</span><br><span class="hljs-string">200</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>借助<code>global</code>关键字可以实现修改全局变量</p><h2 id="2-2-函数有多个返回值"><a href="#2-2-函数有多个返回值" class="headerlink" title="2.2 函数有多个返回值"></a>2.2 函数有多个返回值</h2><p>如果一个函数有多个返回值应该怎么处理?</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">ret_num</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>, <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>这样可以实现函数返回两个值，返回的类型为元组<code>(1, 2)</code></p><p>可以指定返回的类型</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">ret_num1</span>():<br>    <span class="hljs-keyword">return</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ret_num2</span>():<br>    <span class="hljs-keyword">return</span> (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ret_num3</span>():<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-number">1</span>:<span class="hljs-number">2</span>, <span class="hljs-number">3</span>:<span class="hljs-number">4</span>, <span class="hljs-number">5</span>:<span class="hljs-number">6</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-3-函数的参数"><a href="#2-3-函数的参数" class="headerlink" title="2.3 函数的参数"></a>2.3 函数的参数</h2><h3 id="2-3-1-位置参数"><a href="#2-3-1-位置参数" class="headerlink" title="2.3.1 位置参数"></a>2.3.1 位置参数</h3><p>位置参数：调用函数时根据函数定义的参数位置来传递参数</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">user_info</span>(<span class="hljs-params">name, age, gender</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;您的名字是<span class="hljs-subst">&#123;name&#125;</span>,年龄是<span class="hljs-subst">&#123;age&#125;</span>,性别是<span class="hljs-subst">&#123;gender&#125;</span>&#x27;</span>)<br><br>user_info(<span class="hljs-string">&#x27;xx&#x27;</span>, <span class="hljs-string">&#x27;20&#x27;</span>, <span class="hljs-string">&#x27;male&#x27;</span>)<br></code></pre></td></tr></table></figure><p>传递参数的位置和个数必须固定</p><p>如果传入<code>user_info(&#39;male&#39;, &#39;20&#39;, &#39;xx&#39;)</code>会导致数据失去意义或者在一些其他情况报错</p><h3 id="2-3-2-关键字参数"><a href="#2-3-2-关键字参数" class="headerlink" title="2.3.2 关键字参数"></a>2.3.2 关键字参数</h3><p>函数调用，通过”键&#x3D;值”的形式加以指定。可以让函数更加清晰，容易使用。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> distutils.ccompiler <span class="hljs-keyword">import</span> gen_lib_options<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">user_info</span>(<span class="hljs-params">name, age, gender</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;您的名字是<span class="hljs-subst">&#123;name&#125;</span>,年龄是<span class="hljs-subst">&#123;age&#125;</span>,性别是<span class="hljs-subst">&#123;gender&#125;</span>&#x27;</span>)<br><br>user_info(gender=<span class="hljs-string">&#x27;male&#x27;</span>, age=<span class="hljs-string">&#x27;20&#x27;</span>, name=<span class="hljs-string">&#x27;xx&#x27;</span>)<br>user_info(xx, gender=<span class="hljs-string">&#x27;male&#x27;</span>, age=<span class="hljs-string">&#x27;20&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li><p>关键字参数之间不分先后顺序，但是位置参数必须在关键字参数前面</p></li><li><p>在传入参数时，如果有关键字参数和位置参数，位置参数必须在关键字参数前面。</p></li></ul><h3 id="2-3-3-缺省参数"><a href="#2-3-3-缺省参数" class="headerlink" title="2.3.3 缺省参数"></a>2.3.3 缺省参数</h3><p>  如果不为缺省参数传入数据，则该参数值自动使用缺省值</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> distutils.ccompiler <span class="hljs-keyword">import</span> gen_lib_options<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">user_info</span>(<span class="hljs-params">name, age, gender=<span class="hljs-string">&#x27;male&#x27;</span></span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;您的名字是<span class="hljs-subst">&#123;name&#125;</span>,年龄是<span class="hljs-subst">&#123;age&#125;</span>,性别是<span class="hljs-subst">&#123;gender&#125;</span>&#x27;</span>)<br><br>user_info(gender=<span class="hljs-string">&#x27;male&#x27;</span>, age=<span class="hljs-string">&#x27;20&#x27;</span>, name=<span class="hljs-string">&#x27;xx&#x27;</span>)<br>user_info(age=<span class="hljs-string">&#x27;20&#x27;</span>, name=<span class="hljs-string">&#x27;xx&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="2-3-4-不定长参数"><a href="#2-3-4-不定长参数" class="headerlink" title="2.3.4 不定长参数"></a>2.3.4 不定长参数</h3><p>用于不确定调用的时候会传递多少参数的场景</p><ol><li>包裹位置传递</li></ol><p>传入元素之后会被value收集，并合并为一个元组，value为元组类型</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">*value</span>) -&gt; <span class="hljs-built_in">int</span>:<br><span class="hljs-meta">... </span>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"><span class="hljs-meta">... </span>    求和函数</span><br><span class="hljs-string"><span class="hljs-meta">... </span>    &quot;&quot;&quot;</span><br><span class="hljs-meta">... </span>    <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br><span class="hljs-meta">... </span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> value:<br><span class="hljs-meta">... </span>        <span class="hljs-built_in">sum</span> += i<br><span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">help</span>(add))<br><br><br>Help on function add <span class="hljs-keyword">in</span> module __main__:<br><br>add(*value) -&gt; <span class="hljs-built_in">int</span><br>    求和函数<br></code></pre></td></tr></table></figure><ol start="2"><li>包裹关键字传递</li></ol><p>传入元素之后会被kwgs收集，并合并为一个字典，value为字典类型</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">user_info</span>(<span class="hljs-params">**kwgs</span>):<br>    <span class="hljs-built_in">print</span>(kwgs)<br><br>user_info(gender=<span class="hljs-string">&#x27;male&#x27;</span>, age=<span class="hljs-string">&#x27;20&#x27;</span>, name=<span class="hljs-string">&#x27;xx&#x27;</span>)<br>user_info(age=<span class="hljs-string">&#x27;20&#x27;</span>, name=<span class="hljs-string">&#x27;xx&#x27;</span>)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">&#123;&#x27;gender&#x27;: &#x27;male&#x27;, &#x27;age&#x27;: &#x27;20&#x27;, &#x27;name&#x27;: &#x27;xx&#x27;&#125;</span><br><span class="hljs-string">&#123;&#x27;age&#x27;: &#x27;20&#x27;, &#x27;name&#x27;: &#x27;xx&#x27;&#125;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="2-4-拆包"><a href="#2-4-拆包" class="headerlink" title="2.4 拆包"></a>2.4 拆包</h2><ol><li>元组拆包</li></ol><p>将一个返回的元组用多个变量接收可以实现拆包</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">ret_num</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>, <span class="hljs-number">2</span><br><br>num1, num2 = ret_num()<br><span class="hljs-built_in">print</span>(num1)<br><span class="hljs-built_in">print</span>(num2)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1</span><br><span class="hljs-string">2</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>字典拆包</li></ol><p>将一个返回的字典用多个变量接收可以获取字典的key值，再通过key值即可访问其value，实现拆包</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">ret_dict</span>():<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&#x27;name&#x27;</span>:<span class="hljs-string">&#x27;xx&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>:<span class="hljs-number">20</span>&#125;<br><br>key1, key2 = ret_dict()<br><span class="hljs-built_in">print</span>(key1)<br><span class="hljs-built_in">print</span>(key2)<br><br><span class="hljs-built_in">print</span>(ret_dict()[key1])<br><span class="hljs-built_in">print</span>(ret_dict()[key2])<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">name</span><br><span class="hljs-string">age</span><br><span class="hljs-string">xx</span><br><span class="hljs-string">20</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="2-5-交换变量的值"><a href="#2-5-交换变量的值" class="headerlink" title="2.5 交换变量的值"></a>2.5 交换变量的值</h2><ul><li>Python中的方法</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py">a = <span class="hljs-number">10</span><br>b = <span class="hljs-number">20</span><br>a, b = b, a<br></code></pre></td></tr></table></figure><h2 id="2-6-引用"><a href="#2-6-引用" class="headerlink" title="2.6 引用"></a>2.6 引用</h2><h3 id="2-6-1-引用值的传递"><a href="#2-6-1-引用值的传递" class="headerlink" title="2.6.1 引用值的传递"></a>2.6.1 引用值的传递</h3><p>在python中，值是靠引用来传递的</p><p>可以用<code>id()</code>来判断两个变量是否为同一个值的引用。id可以被理解为那块内存的地址标识</p><ul><li>一个有趣的问题</li></ul><p>int型数据</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>a = <span class="hljs-number">3</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>b = <span class="hljs-number">3</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">id</span>(a)<br><span class="hljs-number">4369088816</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">id</span>(b)<br><span class="hljs-number">4369088816</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">id</span>(b) == <span class="hljs-built_in">id</span>(a)<br><span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>list型数据</p><p>list1和list2为不同引用，list3和list1为相同引用</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>list1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>list2 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>list3 = list1<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">id</span>(list1)<br><span class="hljs-number">4373695680</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">id</span>(list2)<br><span class="hljs-number">4373648576</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">id</span>(list3)<br><span class="hljs-number">4373695680</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">id</span>(list3) == <span class="hljs-built_in">id</span>(list1)<br><span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>tuple型数据同上</p><h3 id="2-6-2-引用作实参传递"><a href="#2-6-2-引用作实参传递" class="headerlink" title="2.6.2 引用作实参传递"></a>2.6.2 引用作实参传递</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">a</span>) -&gt; <span class="hljs-literal">None</span>:<br>    <span class="hljs-built_in">print</span>(a)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a))<br>    a += a<br>    <span class="hljs-built_in">print</span>(a)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a))<br><br>a = <span class="hljs-number">3</span><br>test(a)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-&#x27;</span> * <span class="hljs-number">10</span>)<br>b = [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>test(b)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-&#x27;</span> * <span class="hljs-number">10</span>)<br>c = <span class="hljs-number">1.1</span><br>test(c)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">3</span><br><span class="hljs-string">4310548784</span><br><span class="hljs-string">6</span><br><span class="hljs-string">4310548880</span><br><span class="hljs-string">----------</span><br><span class="hljs-string">[3, 4, 5]</span><br><span class="hljs-string">4311299264</span><br><span class="hljs-string">[3, 4, 5, 3, 4, 5]</span><br><span class="hljs-string">4311299264</span><br><span class="hljs-string">----------</span><br><span class="hljs-string">1.1</span><br><span class="hljs-string">4311615472</span><br><span class="hljs-string">2.2</span><br><span class="hljs-string">4311618800</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h1 id="3-递归"><a href="#3-递归" class="headerlink" title="3. 递归"></a>3. 递归</h1><h2 id="3-1-递归的特点"><a href="#3-1-递归的特点" class="headerlink" title="3.1 递归的特点"></a>3.1 递归的特点</h2><ul><li>函数自己调用自己</li><li>必须有一个出口</li></ul><h2 id="3-2-递归返回值"><a href="#3-2-递归返回值" class="headerlink" title="3.2 递归返回值"></a>3.2 递归返回值</h2><p>用递归实现3以内数字累加</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">val :<span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-keyword">if</span> val == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> val + add(val - <span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(add(<span class="hljs-number">3</span>))<br></code></pre></td></tr></table></figure><h1 id="3-lambda表达式-匿名函数"><a href="#3-lambda表达式-匿名函数" class="headerlink" title="3. lambda表达式(匿名函数)"></a>3. lambda表达式(匿名函数)</h1><h2 id="3-1-lambda表达式的应用场景"><a href="#3-1-lambda表达式的应用场景" class="headerlink" title="3.1 lambda表达式的应用场景"></a>3.1 lambda表达式的应用场景</h2><p>如果一个函数比较简单，可以用lambda表达式来进行简化</p><h2 id="3-2-lambda表达式语法"><a href="#3-2-lambda表达式语法" class="headerlink" title="3.2 lambda表达式语法"></a>3.2 lambda表达式语法</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">lambda</span> 参数列表 : 表达式<br></code></pre></td></tr></table></figure><ul><li>lambda表达式的参数可有可无，函数的参数在lambda表达式中完全适用</li><li>lambda表达式可以接受任何数量的参数但只能返回一个表达式的值</li></ul><h2 id="3-3-lambda表达式快速入门"><a href="#3-3-lambda表达式快速入门" class="headerlink" title="3.3 lambda表达式快速入门"></a>3.3 lambda表达式快速入门</h2><p>一个例子</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fn1</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">200</span><br><br><span class="hljs-built_in">print</span>(fn1)<br><span class="hljs-built_in">print</span>(fn1())<br><br><span class="hljs-comment"># lambda表达式</span><br>fn2 = <span class="hljs-keyword">lambda</span>: <span class="hljs-number">100</span><br><span class="hljs-built_in">print</span>(fn2)<br><span class="hljs-built_in">print</span>(fn2())<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">&lt;function fn1 at 0x10249feb0&gt;</span><br><span class="hljs-string">200</span><br><span class="hljs-string">&lt;function &lt;lambda&gt; at 0x1025c7400&gt;</span><br><span class="hljs-string">100</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>实例：计算a+b</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fn1</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-keyword">return</span> a+b<br><br><span class="hljs-built_in">print</span>(fn1)<br><span class="hljs-built_in">print</span>(fn1(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br><br><span class="hljs-comment"># lambda表达式</span><br>fn2 = <span class="hljs-keyword">lambda</span> a, b: a+b<br><span class="hljs-built_in">print</span>(fn2)<br><span class="hljs-built_in">print</span>(fn2(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br></code></pre></td></tr></table></figure><h2 id="3-4-lambda参数情况"><a href="#3-4-lambda参数情况" class="headerlink" title="3.4 lambda参数情况"></a>3.4 lambda参数情况</h2><h3 id="3-4-1-无参数"><a href="#3-4-1-无参数" class="headerlink" title="3.4.1 无参数"></a>3.4.1 无参数</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>fn = <span class="hljs-keyword">lambda</span> : <span class="hljs-number">100</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>fn<br>&lt;function &lt;<span class="hljs-keyword">lambda</span>&gt; at <span class="hljs-number">0x102e5f0a0</span>&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>fn()<br><span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><h3 id="3-4-2-一个参数"><a href="#3-4-2-一个参数" class="headerlink" title="3.4.2 一个参数"></a>3.4.2 一个参数</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>fn = <span class="hljs-keyword">lambda</span> a:a<br><span class="hljs-meta">&gt;&gt;&gt; </span>fn<br>&lt;function &lt;<span class="hljs-keyword">lambda</span>&gt; at <span class="hljs-number">0x102e5f130</span>&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>fn(<span class="hljs-string">&#x27;hi&#x27;</span>)<br><span class="hljs-string">&#x27;hi&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="3-4-3-两个-多个-参数"><a href="#3-4-3-两个-多个-参数" class="headerlink" title="3.4.3 两个(多个)参数"></a>3.4.3 两个(多个)参数</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>fn = <span class="hljs-keyword">lambda</span> a, b: a+b<br><span class="hljs-meta">&gt;&gt;&gt; </span>fn<br>&lt;function &lt;<span class="hljs-keyword">lambda</span>&gt; at <span class="hljs-number">0x102e5f0a0</span>&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>fn(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br><span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h3 id="3-4-4-默认参数"><a href="#3-4-4-默认参数" class="headerlink" title="3.4.4 默认参数"></a>3.4.4 默认参数</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>fn = <span class="hljs-keyword">lambda</span> a, b, c=<span class="hljs-number">100</span>: a+b+c<br><span class="hljs-meta">&gt;&gt;&gt; </span>fn<br>&lt;function &lt;<span class="hljs-keyword">lambda</span>&gt; at <span class="hljs-number">0x102e5f130</span>&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>fn(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br><span class="hljs-number">6</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>fn(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br><span class="hljs-number">103</span><br></code></pre></td></tr></table></figure><h3 id="3-4-5-可变参数-args"><a href="#3-4-5-可变参数-args" class="headerlink" title="3.4.5 可变参数: *args"></a>3.4.5 可变参数: <code>*args</code></h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>fn = <span class="hljs-keyword">lambda</span> *args: args<br><span class="hljs-meta">&gt;&gt;&gt; </span>fn<br>&lt;function &lt;<span class="hljs-keyword">lambda</span>&gt; at <span class="hljs-number">0x102e5f0a0</span>&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>fn(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br></code></pre></td></tr></table></figure><h3 id="3-4-6-可变参数-kwds"><a href="#3-4-6-可变参数-kwds" class="headerlink" title="3.4.6 可变参数: **kwds"></a>3.4.6 可变参数: <code>**kwds</code></h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>fn = <span class="hljs-keyword">lambda</span> **kwds: kwds<br><span class="hljs-meta">&gt;&gt;&gt; </span>fn<br>&lt;function &lt;<span class="hljs-keyword">lambda</span>&gt; at <span class="hljs-number">0x102e5f130</span>&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>fn(a=<span class="hljs-number">2</span>, b=<span class="hljs-number">4</span>, c=<span class="hljs-number">6</span>)<br>&#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">6</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-5-lambda嵌入在函数中"><a href="#3-5-lambda嵌入在函数中" class="headerlink" title="3.5 lambda嵌入在函数中"></a>3.5 lambda嵌入在函数中</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">myfunc</span>(<span class="hljs-params">n</span>):<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">lambda</span> a : a * n<br><span class="hljs-comment"># 使用函数定义来创建一个总是使您发送的数字增加三倍的函数</span><br>mytripler = myfunc(<span class="hljs-number">3</span>)<br><span class="hljs-comment"># mytripler是 lambda a : a*3</span><br><span class="hljs-built_in">print</span>(mytripler(<span class="hljs-number">11</span>))<br></code></pre></td></tr></table></figure><h2 id="3-6-将列表的name属性按照字典的key进行排序"><a href="#3-6-将列表的name属性按照字典的key进行排序" class="headerlink" title="3.6 将列表的name属性按照字典的key进行排序"></a>3.6 将列表的<code>name</code>属性按照字典的key进行排序</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs py">students = [<br>    &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span> : <span class="hljs-number">20</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Jerry&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span> : <span class="hljs-number">19</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Alex&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span> : <span class="hljs-number">19</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Tim&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span> : <span class="hljs-number">21</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Lee&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span> : <span class="hljs-number">20</span>&#125;<br>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;排序前: <span class="hljs-subst">&#123;students&#125;</span>&quot;</span>)<br><br>students.sort(key=<span class="hljs-keyword">lambda</span> x:x[<span class="hljs-string">&#x27;name&#x27;</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;排序后: <span class="hljs-subst">&#123;students&#125;</span>&quot;</span>)<br><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">排序前: [&#123;&#x27;name&#x27;: &#x27;Tom&#x27;, &#x27;age&#x27;: 20&#125;, &#123;&#x27;name&#x27;: &#x27;Jerry&#x27;, &#x27;age&#x27;: 19&#125;, &#123;&#x27;name&#x27;: &#x27;Alex&#x27;, &#x27;age&#x27;: 19&#125;, &#123;&#x27;name&#x27;: &#x27;Tim&#x27;, &#x27;age&#x27;: 21&#125;, &#123;&#x27;name&#x27;: &#x27;Lee&#x27;, &#x27;age&#x27;: 20&#125;]</span><br><span class="hljs-string">排序后: [&#123;&#x27;name&#x27;: &#x27;Alex&#x27;, &#x27;age&#x27;: 19&#125;, &#123;&#x27;name&#x27;: &#x27;Jerry&#x27;, &#x27;age&#x27;: 19&#125;, &#123;&#x27;name&#x27;: &#x27;Lee&#x27;, &#x27;age&#x27;: 20&#125;, &#123;&#x27;name&#x27;: &#x27;Tim&#x27;, &#x27;age&#x27;: 21&#125;, &#123;&#x27;name&#x27;: &#x27;Tom&#x27;, &#x27;age&#x27;: 20&#125;]</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h1 id="4-高阶函数"><a href="#4-高阶函数" class="headerlink" title="4. 高阶函数"></a>4. 高阶函数</h1><h2 id="4-1-高阶函数介绍"><a href="#4-1-高阶函数介绍" class="headerlink" title="4.1 高阶函数介绍"></a>4.1 高阶函数介绍</h2><p>把函数作为参数进行参数，这样的函数被称为高阶函数。</p><p>需求：计算两个数字的绝对值之和</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">addabs</span>(<span class="hljs-params">*args</span>):<br>    <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> args:<br>        <span class="hljs-built_in">sum</span> += <span class="hljs-built_in">abs</span>(i)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span><br><br><span class="hljs-built_in">print</span>(addabs(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, -<span class="hljs-number">4</span>, -<span class="hljs-number">5</span>, -<span class="hljs-number">6</span>))<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">21</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>或者可以这样来计算</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">addabs</span>(<span class="hljs-params">f, *args</span>):<br>    <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> args:<br>        <span class="hljs-built_in">sum</span> += f(i)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span><br>  <br>fn = <span class="hljs-keyword">lambda</span> x:(x*-<span class="hljs-number">1</span> <span class="hljs-keyword">if</span> x&lt;<span class="hljs-number">0</span> <span class="hljs-keyword">else</span> x)<br><span class="hljs-built_in">print</span>(addabs(fn, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, -<span class="hljs-number">4</span>, -<span class="hljs-number">5</span>, -<span class="hljs-number">6</span>))<br><span class="hljs-comment">#print(addabs(abs, 1, 2, 3, -4, -5, -6))</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">21</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="4-2-Python内置的高阶函数"><a href="#4-2-Python内置的高阶函数" class="headerlink" title="4.2 Python内置的高阶函数"></a>4.2 Python内置的高阶函数</h2><h3 id="4-2-1-map"><a href="#4-2-1-map" class="headerlink" title="4.2.1 map()"></a>4.2.1 map()</h3><p>用法：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">map</span>(func, <span class="hljs-built_in">list</span>)<br></code></pre></td></tr></table></figure><p>作用：将传入的函数变量func作用到list中的每个元素中，并将结果作为一个迭代器返回</p><p>实例：计算一个list中所有数字的平方</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>list1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>fn = <span class="hljs-keyword">lambda</span> x:x**<span class="hljs-number">2</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>ret = <span class="hljs-built_in">map</span>(fn, list1)<br><span class="hljs-meta">&gt;&gt;&gt; </span>ret<br>&lt;<span class="hljs-built_in">map</span> <span class="hljs-built_in">object</span> at <span class="hljs-number">0x101514a00</span>&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(ret))<br>[<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>, <span class="hljs-number">36</span>]<br></code></pre></td></tr></table></figure><h3 id="4-2-2-reduce"><a href="#4-2-2-reduce" class="headerlink" title="4.2.2 reduce()"></a>4.2.2 reduce()</h3><p>用法：（func必须有且仅有两个参数）</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">reduce(func, lst)<br></code></pre></td></tr></table></figure><p>作用：每次func计算的结果继续和序列的下一个元素作累积计算</p><p>实例：计算<code>list1</code>序列中各个数字的累加和</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce<br><span class="hljs-meta">&gt;&gt;&gt; </span><br><span class="hljs-meta">&gt;&gt;&gt; </span>list1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>fn = <span class="hljs-keyword">lambda</span> x, y:x+y<br><span class="hljs-meta">&gt;&gt;&gt; </span>ret = reduce(fn, list1)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(ret)<br><span class="hljs-number">28</span><br></code></pre></td></tr></table></figure><h3 id="4-2-3-filter"><a href="#4-2-3-filter" class="headerlink" title="4.2.3 filter()"></a>4.2.3 filter()</h3><p>用法：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">filter</span>(func, <span class="hljs-built_in">list</span>)<br></code></pre></td></tr></table></figure><p>作用：用于过滤序列，过滤掉不符合条件的元素，返回一个filter对象（所以func必须返回bool类型）</p><p>实例：获取<code>list1</code>中的所有偶数</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>list1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>fn = <span class="hljs-keyword">lambda</span> x: x%<span class="hljs-number">2</span> == <span class="hljs-number">0</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>ret = <span class="hljs-built_in">filter</span>(fn, list1)<br><span class="hljs-meta">&gt;&gt;&gt; </span>ret<br>&lt;<span class="hljs-built_in">filter</span> <span class="hljs-built_in">object</span> at <span class="hljs-number">0x102c68c40</span>&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ret)<br>[<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>古老的学习笔记</category>
      
      <category>Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>12 推导式</title>
    <link href="/2022/10/25/12%20%E6%8E%A8%E5%AF%BC%E5%BC%8F/"/>
    <url>/2022/10/25/12%20%E6%8E%A8%E5%AF%BC%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="推导式"><a href="#推导式" class="headerlink" title="推导式"></a>推导式</h1><ul><li>列表推导式</li><li>字典推导式</li><li>集合推导式</li></ul><h2 id="1-列表推导式"><a href="#1-列表推导式" class="headerlink" title="1. 列表推导式"></a>1. 列表推导式</h2><h3 id="1-1-实现列表"><a href="#1-1-实现列表" class="headerlink" title="1.1 实现列表"></a>1.1 实现列表</h3><ul><li>while循环建立列表</li></ul><p>需求: 创建一个0-9的列表</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span> = []<br><span class="hljs-meta">&gt;&gt;&gt; </span>i = <span class="hljs-number">0</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">while</span> i&lt;<span class="hljs-number">10</span>:<br><span class="hljs-meta">... </span>    <span class="hljs-built_in">list</span>.append(i)<br><span class="hljs-meta">... </span>    i += <span class="hljs-number">1</span><br><span class="hljs-meta">... </span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span><br>[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]<br></code></pre></td></tr></table></figure><ul><li>for循环建立列表</li></ul><p>需求: 创建一个0-9的列表</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span> = []<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br><span class="hljs-meta">... </span>    <span class="hljs-built_in">list</span>.append(i)<br><span class="hljs-meta">... </span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span><br>[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]<br></code></pre></td></tr></table></figure><ul><li>列表推导式实现</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span> = []<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span> = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span><br>[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]<br></code></pre></td></tr></table></figure><ul><li>i为列表推导式中for循环的返回值</li></ul><h3 id="1-2-带if的列表推导式"><a href="#1-2-带if的列表推导式" class="headerlink" title="1.2 带if的列表推导式"></a>1.2 带if的列表推导式</h3><p>需求: 创建一个0-9的偶数的列表</p><ul><li>可以用range的步长来实现</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span> = []<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span> = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">2</span>)]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span><br>[<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>]<br></code></pre></td></tr></table></figure><ul><li>可以用for循环实现</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span> = []<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br><span class="hljs-meta">... </span>    <span class="hljs-keyword">if</span> i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br><span class="hljs-meta">... </span>        <span class="hljs-built_in">list</span>.append(i)<br><span class="hljs-meta">... </span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span><br>[<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>]<br></code></pre></td></tr></table></figure><ul><li>用推导式实现</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span> = []<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span> = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">if</span> i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span><br>[<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>]<br></code></pre></td></tr></table></figure><blockquote><p>小技巧：把用for循环实现的代码抄下来，删去<code>:</code>和多余的空行</p></blockquote><h3 id="1-3-用多个for循环实现列表推导式"><a href="#1-3-用多个for循环实现列表推导式" class="headerlink" title="1.3 用多个for循环实现列表推导式"></a>1.3 用多个for循环实现列表推导式</h3><p>需求：创建列表</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">[(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>), (<span class="hljs-number">2</span>, <span class="hljs-number">0</span>), (<span class="hljs-number">2</span>, <span class="hljs-number">1</span>), (<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)]<br></code></pre></td></tr></table></figure><ul><li>用for循环实现</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">list</span> = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>        <span class="hljs-built_in">list</span>.append((i, j))<br></code></pre></td></tr></table></figure><ul><li>用推导式实现：</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">list</span> = []<br><span class="hljs-built_in">list</span> = [(i, j) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>)<br></code></pre></td></tr></table></figure><blockquote><p>小技巧：把用for循环实现的代码抄下来，删去<code>:</code>和多余的空行</p></blockquote><h2 id="2-字典推导式"><a href="#2-字典推导式" class="headerlink" title="2. 字典推导式"></a>2. 字典推导式</h2><p>思考：如果有如下两个列表</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py">list1 = [<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>, <span class="hljs-string">&#x27;gender&#x27;</span>]<br>list2 = [<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;man&#x27;</span>]<br></code></pre></td></tr></table></figure><p>如何合并为一个字典</p><p>字典推导式作用： 快速合并列   提取字典中的数字</p><h3 id="2-1-实现字典"><a href="#2-1-实现字典" class="headerlink" title="2.1 实现字典"></a>2.1 实现字典</h3><ol><li>创建一个字典, key为1-5，value为1-5的平方</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">dict</span> = &#123;&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">dict</span> = &#123;i:i**<span class="hljs-number">2</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">6</span>)&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">dict</span><br>&#123;<span class="hljs-number">1</span>: <span class="hljs-number">1</span>, <span class="hljs-number">2</span>: <span class="hljs-number">4</span>, <span class="hljs-number">3</span>: <span class="hljs-number">9</span>, <span class="hljs-number">4</span>: <span class="hljs-number">16</span>, <span class="hljs-number">5</span>: <span class="hljs-number">25</span>&#125;<br></code></pre></td></tr></table></figure><blockquote><ol><li>先让for循环取到想要的数字</li><li>再把需求写在前面</li></ol></blockquote><ol start="2"><li>将两个列表合并为一个字典</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>list1 = [<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>, <span class="hljs-string">&#x27;gender&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>list2 = [<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;man&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">dict</span> = &#123;&#125;<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string"><span class="hljs-meta">&gt;&gt;&gt; </span>dict = &#123;l1:l2 for l1, l2 in list1, list2&#125;</span><br><span class="hljs-string">  File &quot;&lt;stdin&gt;&quot;, line 1</span><br><span class="hljs-string">    dict = &#123;l1:l2 for l1, l2 in list1, list2&#125;</span><br><span class="hljs-string">                                     ^</span><br><span class="hljs-string">SyntaxError: invalid syntax</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">dict</span> = &#123;list1[i]:list2[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">min</span>(<span class="hljs-built_in">len</span>(list1), <span class="hljs-built_in">len</span>(list2)))&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">dict</span><br>&#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;gender&#x27;</span>: <span class="hljs-string">&#x27;man&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>提取字典的目标数据</li></ol><p>需求：提取电脑数量大于200的字典数据</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>counts = &#123;<span class="hljs-string">&#x27;Mac&#x27;</span>: <span class="hljs-number">211</span>, <span class="hljs-string">&#x27;DELL&#x27;</span>: <span class="hljs-number">128</span>, <span class="hljs-string">&#x27;HP&#x27;</span>: <span class="hljs-number">203</span>, <span class="hljs-string">&#x27;Mi&#x27;</span>: <span class="hljs-number">120</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>count1 = &#123;key: value <span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> counts.items() <span class="hljs-keyword">if</span> value &gt;= <span class="hljs-number">200</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>count1<br>&#123;<span class="hljs-string">&#x27;Mac&#x27;</span>: <span class="hljs-number">211</span>, <span class="hljs-string">&#x27;HP&#x27;</span>: <span class="hljs-number">203</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-集合推导式"><a href="#3-集合推导式" class="headerlink" title="3. 集合推导式"></a>3. 集合推导式</h2><p>需求： 创建一个集合，数据为1， 1， 2的平方</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pys">&gt;&gt;&gt; set = set()<br>&gt;&gt;&gt; list = [1, 1, 2]<br>&gt;&gt;&gt; set = &#123;i**2 for i in list&#125;<br>&gt;&gt;&gt; set<br>&#123;1, 4&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>古老的学习笔记</category>
      
      <category>Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>11 公共操作</title>
    <link href="/2022/10/25/11%20%E5%85%AC%E5%85%B1%E6%93%8D%E4%BD%9C/"/>
    <url>/2022/10/25/11%20%E5%85%AC%E5%85%B1%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="公共操作"><a href="#公共操作" class="headerlink" title="公共操作"></a>公共操作</h1><ul><li>运算符</li><li>公共方法</li><li>容器类型转换</li></ul><h2 id="1-运算符"><a href="#1-运算符" class="headerlink" title="1. 运算符"></a>1. 运算符</h2><h3 id="1-1-加号运算符"><a href="#1-1-加号运算符" class="headerlink" title="1.1 加号运算符"></a>1.1 加号运算符</h3><p>作用：合并</p><p>支持的容器类型： 字符串 列表 元组</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>str1 = <span class="hljs-string">&#x27;aa&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>str2 = <span class="hljs-string">&#x27;bb&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>str1+str2<br><span class="hljs-string">&#x27;aabb&#x27;</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span>list1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>list2 = [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>list1+list2<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>tuple1 = (<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>tuple2 = (<span class="hljs-number">9</span>, <span class="hljs-number">0</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>tuple1+tuple2<br>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><h3 id="1-2-乘号运算符"><a href="#1-2-乘号运算符" class="headerlink" title="1.2 乘号运算符"></a>1.2 乘号运算符</h3><p>作用：复制</p><p>支持的容器类型： 字符串 列表 元组</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>str1 = <span class="hljs-string">&#x27;^&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>str1 * <span class="hljs-number">5</span><br><span class="hljs-string">&#x27;^^^^^&#x27;</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span>list1 = [<span class="hljs-string">&#x27;--&#x27;</span>, <span class="hljs-string">&#x27;**&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>list1 * <span class="hljs-number">5</span><br>[<span class="hljs-string">&#x27;--&#x27;</span>, <span class="hljs-string">&#x27;**&#x27;</span>, <span class="hljs-string">&#x27;--&#x27;</span>, <span class="hljs-string">&#x27;**&#x27;</span>, <span class="hljs-string">&#x27;--&#x27;</span>, <span class="hljs-string">&#x27;**&#x27;</span>, <span class="hljs-string">&#x27;--&#x27;</span>, <span class="hljs-string">&#x27;**&#x27;</span>, <span class="hljs-string">&#x27;--&#x27;</span>, <span class="hljs-string">&#x27;**&#x27;</span>]<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>tuple1 = (<span class="hljs-number">1024</span>, <span class="hljs-number">1024</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>tuple1*<span class="hljs-number">5</span><br>(<span class="hljs-number">1024</span>, <span class="hljs-number">1024</span>, <span class="hljs-number">1024</span>, <span class="hljs-number">1024</span>, <span class="hljs-number">1024</span>, <span class="hljs-number">1024</span>, <span class="hljs-number">1024</span>, <span class="hljs-number">1024</span>, <span class="hljs-number">1024</span>, <span class="hljs-number">1024</span>)<br></code></pre></td></tr></table></figure><h3 id="1-3-in-not-in"><a href="#1-3-in-not-in" class="headerlink" title="1.3 in&#x2F;not in"></a>1.3 in&#x2F;not in</h3><p>作用：判断元素是否存在</p><p>支持的容器类型： 字符串 列表 元组 字典(只检查dict的keys)</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;aabcv&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;aa&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span><br><span class="hljs-literal">True</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;5&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">2</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span><br><span class="hljs-literal">True</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">5</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span><br><span class="hljs-literal">False</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;5&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span><br><span class="hljs-literal">True</span><br><br><span class="hljs-comment"># tuple同理</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">dict</span> = &#123;<span class="hljs-string">&#x27;name&#x27;</span>:<span class="hljs-string">&#x27;a&#x27;</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;name&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">dict</span><br><span class="hljs-literal">True</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">dict</span><br><span class="hljs-literal">False</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;age&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">dict</span><br><span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><h2 id="2-公共方法"><a href="#2-公共方法" class="headerlink" title="2. 公共方法"></a>2. 公共方法</h2><h3 id="2-1-len"><a href="#2-1-len" class="headerlink" title="2.1 len()"></a>2.1 len()</h3><p>作用：输出容器元素的个数</p><p>支持的容器类型： 字符串 列表 元组 字典</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;aabcv&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>)<br><span class="hljs-number">5</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;5&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">len</span>(<span class="hljs-built_in">list</span>)<br><span class="hljs-number">3</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">dict</span> = &#123;<span class="hljs-string">&#x27;name&#x27;</span>:<span class="hljs-string">&#x27;a&#x27;</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">len</span>(<span class="hljs-built_in">dict</span>)<br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="2-2-del-或del"><a href="#2-2-del-或del" class="headerlink" title="2.2 del()或del"></a>2.2 del()或del</h3><p>作用：删除容器中指定元素或删除容器对象</p><p>支持的容器类型： 字符串 列表 元组 字典</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>s = <span class="hljs-string">&#x27;adsdad&#x27;</span><br><span class="hljs-comment">#删除元素</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">del</span> s[<span class="hljs-number">0</span>]<br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>TypeError: <span class="hljs-string">&#x27;str&#x27;</span> <span class="hljs-built_in">object</span> doesn<span class="hljs-string">&#x27;t support item deletion</span><br><span class="hljs-string">#删除容器对象</span><br><span class="hljs-string">&gt;&gt;&gt; del s</span><br><span class="hljs-string">&gt;&gt;&gt; s</span><br><span class="hljs-string">Traceback (most recent call last):</span><br><span class="hljs-string">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="hljs-string">NameError: name &#x27;</span>s<span class="hljs-string">&#x27; is not defined</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">&gt;&gt;&gt; list0 = [0, 1, 2, 3, 4]</span><br><span class="hljs-string">#删除元素</span><br><span class="hljs-string">&gt;&gt;&gt; del(list0[2])</span><br><span class="hljs-string">&gt;&gt;&gt; list0 </span><br><span class="hljs-string">[0, 1, 3, 4]</span><br><span class="hljs-string">#删除容器对象</span><br><span class="hljs-string">&gt;&gt;&gt; del list0</span><br><span class="hljs-string">&gt;&gt;&gt; list0</span><br><span class="hljs-string">Traceback (most recent call last):</span><br><span class="hljs-string">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="hljs-string">NameError: name &#x27;</span>list0<span class="hljs-string">&#x27; is not defined. Did you mean: &#x27;</span><span class="hljs-built_in">list</span><span class="hljs-string">&#x27;?</span><br><span class="hljs-string"></span><br><span class="hljs-string">&gt;&gt;&gt; dict0 = &#123;&#x27;</span>key1<span class="hljs-string">&#x27;:1, &#x27;</span>key2<span class="hljs-string">&#x27;:2, &#x27;</span>key3<span class="hljs-string">&#x27;:3&#125;</span><br><span class="hljs-string">#删除元素</span><br><span class="hljs-string">&gt;&gt;&gt; del dict0[key1]</span><br><span class="hljs-string">Traceback (most recent call last):</span><br><span class="hljs-string">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="hljs-string">NameError: name &#x27;</span>key1<span class="hljs-string">&#x27; is not defined</span><br><span class="hljs-string">&gt;&gt;&gt; dict0 = &#123;&#x27;</span>key1<span class="hljs-string">&#x27;:1, &#x27;</span>key2<span class="hljs-string">&#x27;:2, &#x27;</span>key3<span class="hljs-string">&#x27;:3&#125;</span><br><span class="hljs-string">#删除容器对象</span><br><span class="hljs-string">&gt;&gt;&gt; del dict0[&#x27;</span>key1<span class="hljs-string">&#x27;]</span><br><span class="hljs-string">&gt;&gt;&gt; dict0 </span><br><span class="hljs-string">&#123;&#x27;</span>key2<span class="hljs-string">&#x27;: 2, &#x27;</span>key3<span class="hljs-string">&#x27;: 3&#125;</span><br><span class="hljs-string">&gt;&gt;&gt; del dict0</span><br><span class="hljs-string">&gt;&gt;&gt; dict0</span><br><span class="hljs-string">Traceback (most recent call last):</span><br><span class="hljs-string">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="hljs-string">NameError: name &#x27;</span>dict0<span class="hljs-string">&#x27; is not defined. Did you mean: &#x27;</span><span class="hljs-built_in">dict</span><span class="hljs-string">&#x27;?</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><h3 id="2-3-max-min"><a href="#2-3-max-min" class="headerlink" title="2.3 max()&#x2F;min()"></a>2.3 max()&#x2F;min()</h3><p>作用：返回容器对象的最大&#x2F;最小值</p><p>支持的容器类型： 字符串 列表 元组</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>s = <span class="hljs-string">&#x27;adsdadopq&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">max</span>(s)<br><span class="hljs-string">&#x27;s&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">min</span>(s)<br><span class="hljs-string">&#x27;a&#x27;</span><br><span class="hljs-comment">#列表和元组省略</span><br></code></pre></td></tr></table></figure><h3 id="2-4-range"><a href="#2-4-range" class="headerlink" title="2.4 range()"></a>2.4 range()</h3><p>作用：返回一个可迭代对象</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">range</span>(start, end, step)<br></code></pre></td></tr></table></figure><ul><li>如果不写开始，则从0开始</li><li>如果不写步长则默认为1</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 1 2 3 4 5 6 7 8 9</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>):<br>    <span class="hljs-built_in">print</span>(i, end=<span class="hljs-string">&#x27; &#x27;</span>)<br><span class="hljs-built_in">print</span>()<br><span class="hljs-comment"># 2 4 6 8</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-number">10</span>, <span class="hljs-number">2</span>):<br>    <span class="hljs-built_in">print</span>(i, end=<span class="hljs-string">&#x27; &#x27;</span>)<br><span class="hljs-built_in">print</span>()<br><span class="hljs-comment"># 0 1 2 3 4 5 6 7 8 9 0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    <span class="hljs-built_in">print</span>(i, end=<span class="hljs-string">&#x27; &#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="2-5-enumerate"><a href="#2-5-enumerate" class="headerlink" title="2.5 enumerate()"></a>2.5 enumerate()</h3><p>作用：将一个可遍历的数据对象（列表 元组 字符串 等）组合为一个索引序列，同时列出数据和数据下标，一般用在for循环。<br>返回一个元组(下标, 数据)</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">enumerate</span>(可遍历对象, start=<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">list1 = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(list1):<br>    <span class="hljs-built_in">print</span>(i)<br>    <br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">(0, &#x27;a&#x27;)</span><br><span class="hljs-string">(1, &#x27;b&#x27;)</span><br><span class="hljs-string">(2, &#x27;c&#x27;)</span><br><span class="hljs-string">(3, &#x27;d&#x27;)</span><br><span class="hljs-string">(4, &#x27;e&#x27;)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="3-容器类型转换"><a href="#3-容器类型转换" class="headerlink" title="3. 容器类型转换"></a>3. 容器类型转换</h3><h4 id="3-1-tuple"><a href="#3-1-tuple" class="headerlink" title="3.1 tuple()"></a>3.1 tuple()</h4><p>作用： 将某个序列转换成元组</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>list1 = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>s1 = &#123;<span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">300</span>, <span class="hljs-number">400</span>, <span class="hljs-number">500</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>t1 = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>)<br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">tuple</span>(list1)<br>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">tuple</span>(s1)<br>(<span class="hljs-number">400</span>, <span class="hljs-number">100</span>, <span class="hljs-number">500</span>, <span class="hljs-number">200</span>, <span class="hljs-number">300</span>)<br></code></pre></td></tr></table></figure><h4 id="3-2-list"><a href="#3-2-list" class="headerlink" title="3.2 list()"></a>3.2 list()</h4><p>作用： 将某个序列转换成列表</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>list1 = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>s1 = &#123;<span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">300</span>, <span class="hljs-number">400</span>, <span class="hljs-number">500</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>t1 = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>)<br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(s1)<br>[<span class="hljs-number">400</span>, <span class="hljs-number">100</span>, <span class="hljs-number">500</span>, <span class="hljs-number">200</span>, <span class="hljs-number">300</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(t1)<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]<br></code></pre></td></tr></table></figure><h4 id="3-3-set"><a href="#3-3-set" class="headerlink" title="3.3 set()"></a>3.3 set()</h4><p>作用： 将某个序列转换成集合</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>list1 = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>s1 = &#123;<span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">300</span>, <span class="hljs-number">400</span>, <span class="hljs-number">500</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>t1 = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>)<br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">set</span>(list1)<br>&#123;<span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">set</span>(t1)<br>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>古老的学习笔记</category>
      
      <category>Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>10 集合</title>
    <link href="/2022/10/25/10%20%E9%9B%86%E5%90%88/"/>
    <url>/2022/10/25/10%20%E9%9B%86%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><ol><li>创建集合</li><li>集合数据的特点</li><li>集合的常见操作</li></ol><h2 id="1-创建集合"><a href="#1-创建集合" class="headerlink" title="1. 创建集合"></a>1. 创建集合</h2><p>集合中的元素不能重复</p><p>在创建有数据的集合时</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py">s = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>, <span class="hljs-number">60</span>&#125;<br>s = <span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;abcdefg&#x27;</span>)<br></code></pre></td></tr></table></figure><p>创建集合的例子</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>s = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>, <span class="hljs-number">60</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>s<br>&#123;<span class="hljs-number">50</span>, <span class="hljs-number">20</span>, <span class="hljs-number">40</span>, <span class="hljs-number">10</span>, <span class="hljs-number">60</span>, <span class="hljs-number">30</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>s = <span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;abcdefg&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>s<br>&#123;<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>&#125;<br><span class="hljs-comment">#在有重复时</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span> ,<span class="hljs-number">30</span> ,<span class="hljs-number">40</span> ,<span class="hljs-number">50</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>s<br>&#123;<span class="hljs-number">50</span>, <span class="hljs-number">20</span>, <span class="hljs-number">40</span>, <span class="hljs-number">10</span>, <span class="hljs-number">30</span>&#125;<br></code></pre></td></tr></table></figure><p>在创建空集合时只能用<code>set()</code>而不能用<code>&#123;&#125;</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">s = <span class="hljs-built_in">set</span>()<br></code></pre></td></tr></table></figure><h2 id="2-集合数据的特点"><a href="#2-集合数据的特点" class="headerlink" title="2. 集合数据的特点"></a>2. 集合数据的特点</h2><ul><li>在创建集合时如果出现重复数据，在集合中会自动去重</li><li>集合在创建后其内部的顺讯<strong>不会按照输入的顺序</strong>所以不能用下标访问</li></ul><h2 id="3-集合数据的常见操作"><a href="#3-集合数据的常见操作" class="headerlink" title="3. 集合数据的常见操作"></a>3. 集合数据的常见操作</h2><h3 id="3-1-增加数据"><a href="#3-1-增加数据" class="headerlink" title="3.1 增加数据"></a>3.1 增加数据</h3><ol><li>add</li></ol><p>增加单一数据，如果追加重复数会被自动去重，表现为不进行任何操作</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>s<br>&#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>s.add(<span class="hljs-number">100</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>s<br>&#123;<span class="hljs-number">100</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>&#125;<br><br><span class="hljs-comment">#不能用来追加序列</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.add([<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>])<br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>TypeError: unhashable <span class="hljs-built_in">type</span>: <span class="hljs-string">&#x27;list&#x27;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>update</li></ol><p>用来追加序列，不能增加int或非序列类型的数据</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>s<br>&#123;<span class="hljs-number">100</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>s.update(<span class="hljs-number">200</span>)<br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>TypeError: <span class="hljs-string">&#x27;int&#x27;</span> <span class="hljs-built_in">object</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> iterable<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.update([<span class="hljs-number">200</span>, <span class="hljs-number">300</span>, <span class="hljs-number">400</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span>s<br>&#123;<span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">10</span>, <span class="hljs-number">300</span>, <span class="hljs-number">400</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>&#125;<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.update([<span class="hljs-number">150</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span>s<br>&#123;<span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">10</span>, <span class="hljs-number">300</span>, <span class="hljs-number">400</span>, <span class="hljs-number">20</span>, <span class="hljs-number">150</span>, <span class="hljs-number">30</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-删除数据"><a href="#3-2-删除数据" class="headerlink" title="3.2 删除数据"></a>3.2 删除数据</h3><ol><li>remove</li></ol><p>删除指定数据，数据如果不存在则报错</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>s<br>&#123;<span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">10</span>, <span class="hljs-number">300</span>, <span class="hljs-number">400</span>, <span class="hljs-number">20</span>, <span class="hljs-number">150</span>, <span class="hljs-number">30</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>s.remove(<span class="hljs-number">200</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>s<br>&#123;<span class="hljs-number">100</span>, <span class="hljs-number">10</span>, <span class="hljs-number">300</span>, <span class="hljs-number">400</span>, <span class="hljs-number">20</span>, <span class="hljs-number">150</span>, <span class="hljs-number">30</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>s.remove(<span class="hljs-number">200</span>)<br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>KeyError: <span class="hljs-number">200</span><br></code></pre></td></tr></table></figure><ol start="2"><li>discard()</li></ol><p>删除指定数据，数据就算不存在也不报错</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>s = &#123;<span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">10</span>, <span class="hljs-number">300</span>, <span class="hljs-number">400</span>, <span class="hljs-number">20</span>, <span class="hljs-number">150</span>, <span class="hljs-number">30</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>s.discard(<span class="hljs-number">200</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>s<br>&#123;<span class="hljs-number">100</span>, <span class="hljs-number">10</span>, <span class="hljs-number">300</span>, <span class="hljs-number">400</span>, <span class="hljs-number">20</span>, <span class="hljs-number">150</span>, <span class="hljs-number">30</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>s.discard(<span class="hljs-number">200</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>s<br>&#123;<span class="hljs-number">100</span>, <span class="hljs-number">10</span>, <span class="hljs-number">300</span>, <span class="hljs-number">400</span>, <span class="hljs-number">20</span>, <span class="hljs-number">150</span>, <span class="hljs-number">30</span>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>pop()</li></ol><p>随机删除一个数据，并返回这个数据</p><h3 id="3-3-查找数据"><a href="#3-3-查找数据" class="headerlink" title="3.3 查找数据"></a>3.3 查找数据</h3><p>使用<code>in</code>和<code>not in</code></p>]]></content>
    
    
    <categories>
      
      <category>古老的学习笔记</category>
      
      <category>Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>09 字典</title>
    <link href="/2022/10/25/09%20%E5%AD%97%E5%85%B8/"/>
    <url>/2022/10/25/09%20%E5%AD%97%E5%85%B8/</url>
    
    <content type="html"><![CDATA[<h1 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h1><ol><li>字典的应用场景</li><li>创建字典的语法</li><li>字典的常见操作</li><li>字典的循环遍历</li></ol><h2 id="1-字典的应用场景"><a href="#1-字典的应用场景" class="headerlink" title="1. 字典的应用场景"></a>1. 字典的应用场景</h2><p>每个人有多个数据</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">listTom = [<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">20</span>]<br></code></pre></td></tr></table></figure><p>但这样太麻烦而且不合理。可以用字典来解决这个问题</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">dicTom = &#123;<span class="hljs-string">&quot;Name&quot;</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&quot;Sex&quot;</span>: <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-string">&quot;Age&quot;</span>: <span class="hljs-number">20</span>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>字典不支持下标访问</p></blockquote><h2 id="2-创建字典"><a href="#2-创建字典" class="headerlink" title="2. 创建字典"></a>2. 创建字典</h2><p>特点:</p><ul><li>符号为大括号</li><li>数据为<code>key-value</code>对的形式出现</li><li>每个<code>key-value</code>对用<code>,</code>隔开</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># 有数据的字典</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>dicTom = &#123;<span class="hljs-string">&quot;Name&quot;</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&quot;Sex&quot;</span>: <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-string">&quot;Age&quot;</span>: <span class="hljs-number">20</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>dicTom<br>&#123;<span class="hljs-string">&#x27;Name&#x27;</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Sex&#x27;</span>: <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-string">&#x27;Age&#x27;</span>: <span class="hljs-number">20</span>&#125;<br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># 空字典</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>dictNone = &#123;&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>dictNone<br>&#123;&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>dictNull = <span class="hljs-built_in">dict</span>()<br><span class="hljs-meta">&gt;&gt;&gt; </span>dictNull <br>&#123;&#125;<br></code></pre></td></tr></table></figure><h2 id="3-字典的常见操作"><a href="#3-字典的常见操作" class="headerlink" title="3. 字典的常见操作"></a>3. 字典的常见操作</h2><h3 id="3-1-增"><a href="#3-1-增" class="headerlink" title="3.1 增"></a>3.1 增</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">dict</span>[key] = 值<br></code></pre></td></tr></table></figure><blockquote><p>如果key存在则修改这个key对应的值<br>若不存在则新建一个<code>key-value</code>对</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>dicTom<br>&#123;<span class="hljs-string">&#x27;Name&#x27;</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Sex&#x27;</span>: <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-string">&#x27;Age&#x27;</span>: <span class="hljs-number">20</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>dicTom[<span class="hljs-string">&#x27;Age&#x27;</span>] = <span class="hljs-number">21</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>dicTom<br>&#123;<span class="hljs-string">&#x27;Name&#x27;</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Sex&#x27;</span>: <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-string">&#x27;Age&#x27;</span>: <span class="hljs-number">21</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>dicTom[<span class="hljs-string">&#x27;Sno&#x27;</span>] = <span class="hljs-string">&#x27;007&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>dicTom<br>&#123;<span class="hljs-string">&#x27;Name&#x27;</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Sex&#x27;</span>: <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-string">&#x27;Age&#x27;</span>: <span class="hljs-number">21</span>, <span class="hljs-string">&#x27;Sno&#x27;</span>: <span class="hljs-string">&#x27;007&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-删"><a href="#3-2-删" class="headerlink" title="3.2 删"></a>3.2 删</h3><ol><li>del：可以使用del来删除字典的某个key来实现删除这个键值对</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">del</span> <span class="hljs-built_in">dict</span>[key]<br><span class="hljs-keyword">del</span>(<span class="hljs-built_in">dict</span>[key])<br></code></pre></td></tr></table></figure><p>例子</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>dicTom<br>&#123;<span class="hljs-string">&#x27;Name&#x27;</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Sex&#x27;</span>: <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-string">&#x27;Age&#x27;</span>: <span class="hljs-number">21</span>, <span class="hljs-string">&#x27;Sno&#x27;</span>: <span class="hljs-string">&#x27;007&#x27;</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">del</span> dicTom[<span class="hljs-string">&#x27;Sno&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>dicTom<br>&#123;<span class="hljs-string">&#x27;Name&#x27;</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Sex&#x27;</span>: <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-string">&#x27;Age&#x27;</span>: <span class="hljs-number">21</span>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>clear</li></ol><p>例子</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>dicTom = &#123;<span class="hljs-string">&quot;Name&quot;</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&quot;Sex&quot;</span>: <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-string">&quot;Age&quot;</span>: <span class="hljs-number">20</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>dicTom.clear()<br><span class="hljs-meta">&gt;&gt;&gt; </span>dicTom<br>&#123;&#125;<br></code></pre></td></tr></table></figure><h3 id="3-3-修改"><a href="#3-3-修改" class="headerlink" title="3.3 修改"></a>3.3 修改</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">dict</span>[key] = 值<br></code></pre></td></tr></table></figure><p>当key存在时可以实现修改的操作</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>dicTom<br>&#123;<span class="hljs-string">&#x27;Name&#x27;</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Sex&#x27;</span>: <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-string">&#x27;Age&#x27;</span>: <span class="hljs-number">20</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>dicTom[<span class="hljs-string">&#x27;Age&#x27;</span>] = <span class="hljs-number">21</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>dicTom<br>&#123;<span class="hljs-string">&#x27;Name&#x27;</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Sex&#x27;</span>: <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-string">&#x27;Age&#x27;</span>: <span class="hljs-number">21</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-4-查找"><a href="#3-4-查找" class="headerlink" title="3.4 查找"></a>3.4 查找</h3><h4 id="3-4-1-key值查找"><a href="#3-4-1-key值查找" class="headerlink" title="3.4.1 key值查找"></a>3.4.1 key值查找</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>dicTom = &#123;<span class="hljs-string">&quot;Name&quot;</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&quot;Sex&quot;</span>: <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-string">&quot;Age&quot;</span>: <span class="hljs-number">20</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>dicTom[<span class="hljs-string">&#x27;Name&#x27;</span>]<br><span class="hljs-string">&#x27;Tom&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="3-4-2-get"><a href="#3-4-2-get" class="headerlink" title="3.4.2 get()"></a>3.4.2 get()</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">dict</span>.get(key, 默认值)<br></code></pre></td></tr></table></figure><p>如果当前查找的key不存在则返回第二个默认参数，若存在则返回其对应value</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>dicTom<br>&#123;<span class="hljs-string">&#x27;Name&#x27;</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Sex&#x27;</span>: <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-string">&#x27;Age&#x27;</span>: <span class="hljs-number">20</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>dicTom.get(<span class="hljs-string">&#x27;Name&#x27;</span>)<br><span class="hljs-string">&#x27;Tom&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>dicTom.get(<span class="hljs-string">&#x27;aaa&#x27;</span>)<br><span class="hljs-comment">#这里返回了None</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>dicTom.get(<span class="hljs-string">&#x27;aaa&#x27;</span>, <span class="hljs-string">&#x27;不存在&#x27;</span>)<br><span class="hljs-string">&#x27;不存在&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="3-4-3-keys"><a href="#3-4-3-keys" class="headerlink" title="3.4.3 keys()"></a>3.4.3 keys()</h4><p>查找字典中所有的key，返回可迭代对象</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>dicTom<br>&#123;<span class="hljs-string">&#x27;Name&#x27;</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Sex&#x27;</span>: <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-string">&#x27;Age&#x27;</span>: <span class="hljs-number">20</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>dicTom.keys()<br>dict_keys([<span class="hljs-string">&#x27;Name&#x27;</span>, <span class="hljs-string">&#x27;Sex&#x27;</span>, <span class="hljs-string">&#x27;Age&#x27;</span>])<br></code></pre></td></tr></table></figure><h4 id="3-4-4-values"><a href="#3-4-4-values" class="headerlink" title="3.4.4 values()"></a>3.4.4 values()</h4><p>查找字典中所有的value，返回可迭代对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>dicTom<br>&#123;<span class="hljs-string">&#x27;Name&#x27;</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Sex&#x27;</span>: <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-string">&#x27;Age&#x27;</span>: <span class="hljs-number">20</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>dicTom.values()<br>dict_values([<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">20</span>])<br></code></pre></td></tr></table></figure><h4 id="3-4-5-items"><a href="#3-4-5-items" class="headerlink" title="3.4.5 items()"></a>3.4.5 items()</h4><p>查找字典中所有的键值对，返回可迭代对象，里面是元组，元组数据1是key，元组数据2是字典key对应的value</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>dicTom<br>&#123;<span class="hljs-string">&#x27;Name&#x27;</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Sex&#x27;</span>: <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-string">&#x27;Age&#x27;</span>: <span class="hljs-number">20</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>dicTom.items()<br>dict_items([(<span class="hljs-string">&#x27;Name&#x27;</span>, <span class="hljs-string">&#x27;Tom&#x27;</span>), (<span class="hljs-string">&#x27;Sex&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>), (<span class="hljs-string">&#x27;Age&#x27;</span>, <span class="hljs-number">20</span>)])<br></code></pre></td></tr></table></figure><h2 id="4-字典的循环遍历"><a href="#4-字典的循环遍历" class="headerlink" title="4 字典的循环遍历"></a>4 字典的循环遍历</h2><h4 id="4-1-遍历字典的key"><a href="#4-1-遍历字典的key" class="headerlink" title="4.1 遍历字典的key"></a>4.1 遍历字典的key</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">dict</span> = &#123;<span class="hljs-string">&#x27;Name&#x27;</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Sex&#x27;</span>: <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-string">&#x27;Age&#x27;</span>: <span class="hljs-number">20</span>&#125;<br><br><span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> <span class="hljs-built_in">dict</span>.keys():<br>  <span class="hljs-built_in">print</span>(key)<br></code></pre></td></tr></table></figure><h4 id="4-2-遍历字典的value"><a href="#4-2-遍历字典的value" class="headerlink" title="4.2 遍历字典的value"></a>4.2 遍历字典的value</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">dict</span> = &#123;<span class="hljs-string">&#x27;Name&#x27;</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Sex&#x27;</span>: <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-string">&#x27;Age&#x27;</span>: <span class="hljs-number">20</span>&#125;<br><br><span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> <span class="hljs-built_in">dict</span>.values():<br>  <span class="hljs-built_in">print</span>(value)<br></code></pre></td></tr></table></figure><h4 id="4-3-遍历字典的元素"><a href="#4-3-遍历字典的元素" class="headerlink" title="4.3 遍历字典的元素"></a>4.3 遍历字典的元素</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">dict</span> = &#123;<span class="hljs-string">&#x27;Name&#x27;</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Sex&#x27;</span>: <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-string">&#x27;Age&#x27;</span>: <span class="hljs-number">20</span>&#125;<br><br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> <span class="hljs-built_in">dict</span>.items():<br>  <span class="hljs-built_in">print</span>(item)<br></code></pre></td></tr></table></figure><h4 id="4-4-遍历字典的key-value"><a href="#4-4-遍历字典的key-value" class="headerlink" title="4.4 遍历字典的key-value"></a>4.4 遍历字典的key-value</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">dict</span> = &#123;<span class="hljs-string">&#x27;Name&#x27;</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Sex&#x27;</span>: <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-string">&#x27;Age&#x27;</span>: <span class="hljs-number">20</span>&#125;<br><br><span class="hljs-keyword">for</span> key,value <span class="hljs-keyword">in</span> <span class="hljs-built_in">dict</span>.items():<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;key:<span class="hljs-subst">&#123;key&#125;</span> value:<span class="hljs-subst">&#123;value&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><p>这其实是对字典的拆包操作。由于字典返回的item内部为元组，我们可以用这种方法把元组中的元素拆解出来。</p>]]></content>
    
    
    <categories>
      
      <category>古老的学习笔记</category>
      
      <category>Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>08 元祖</title>
    <link href="/2022/10/25/08%20%E5%85%83%E7%BB%84/"/>
    <url>/2022/10/25/08%20%E5%85%83%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h1 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h1><ol><li>元组的应用场景</li><li>定义元组</li><li>元组的常见操作</li></ol><h2 id="1-元组的应用场景"><a href="#1-元组的应用场景" class="headerlink" title="1. 元组的应用场景"></a>1. 元组的应用场景</h2><p>元组内的数据不能被修改，可以当成常量数组来使用</p><h2 id="2-定义元组"><a href="#2-定义元组" class="headerlink" title="2. 定义元组"></a>2. 定义元组</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 定义多个数据的元组</span><br>t1 = (<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>)<br><br><span class="hljs-comment"># 定义单个数据的元组</span><br>t2 = (<span class="hljs-number">10</span>, )<br></code></pre></td></tr></table></figure><p>在定义单个数据的元组时一定要加<code>,</code>不然会出现下面的情况</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>t1 = (<span class="hljs-number">10</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">type</span>(t1)<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;int&#x27;</span>&gt;<br><br><span class="hljs-comment"># 可以看到已经失去了元组的性质</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>t1 = (<span class="hljs-number">10</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>t1<br><span class="hljs-number">10</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>t1 += <span class="hljs-number">10</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>t1<br><span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><h2 id="3-元组的常见操作"><a href="#3-元组的常见操作" class="headerlink" title="3. 元组的常见操作"></a>3. 元组的常见操作</h2><p>元组不支持增加，删除和修改操作，只支持查找操作。和前面的列表和字符串相同</p><ol><li>下标</li><li>index()</li><li>count()</li><li>len()</li></ol><p>元组的修改</p><p>元组本身不支持修改，在用户尝试修改元组的值时会被阻止</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>t = (<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span>t[<span class="hljs-number">0</span>] = <span class="hljs-number">2</span><br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>TypeError: <span class="hljs-string">&#x27;tuple&#x27;</span> <span class="hljs-built_in">object</span> does <span class="hljs-keyword">not</span> support item assignment<br></code></pre></td></tr></table></figure><p>但当元组中有列表元素时可以被修改列表元素的值</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>t = (<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span>t[<span class="hljs-number">2</span>]<br>[<span class="hljs-number">10</span>, <span class="hljs-number">20</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>t[<span class="hljs-number">2</span>].append(<span class="hljs-number">30</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>t<br>(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>])<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>古老的学习笔记</category>
      
      <category>Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>07 列表</title>
    <link href="/2022/10/25/07%20%E5%88%97%E8%A1%A8/"/>
    <url>/2022/10/25/07%20%E5%88%97%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><ol><li>列表的应用场景</li><li>列表的格式</li><li>列表的常用操作</li><li>列表的循环遍历</li><li>列表的嵌套使用</li></ol><h2 id="1-列表的应用场景"><a href="#1-列表的应用场景" class="headerlink" title="1. 列表的应用场景"></a>1. 列表的应用场景</h2><p>存储多个变量</p><h2 id="2-列表的格式"><a href="#2-列表的格式" class="headerlink" title="2. 列表的格式"></a>2. 列表的格式</h2><p>列表可以一次性存储多个数据，且可以为不同的数据类型</p><h2 id="3-列表的常用操作"><a href="#3-列表的常用操作" class="headerlink" title="3. 列表的常用操作"></a>3. 列表的常用操作</h2><h3 id="3-1-查找"><a href="#3-1-查找" class="headerlink" title="3.1 查找"></a>3.1 查找</h3><h4 id="3-1-1-下标"><a href="#3-1-1-下标" class="headerlink" title="3.1.1 下标"></a>3.1.1 下标</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span> = [<span class="hljs-string">&#x27;xx&#x27;</span>, <span class="hljs-string">&#x27;zz&#x27;</span>, <span class="hljs-string">&#x27;yy&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span><br>[<span class="hljs-string">&#x27;xx&#x27;</span>, <span class="hljs-string">&#x27;zz&#x27;</span>, <span class="hljs-string">&#x27;yy&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>[<span class="hljs-number">0</span>]<br><span class="hljs-string">&#x27;xx&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>[<span class="hljs-number">1</span>]<br><span class="hljs-string">&#x27;zz&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>[<span class="hljs-number">2</span>]<br><span class="hljs-string">&#x27;yy&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="3-1-2-函数"><a href="#3-1-2-函数" class="headerlink" title="3.1.2 函数"></a>3.1.2 函数</h4><ol><li>index()</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">list</span>.index(数据, 开始位置下标, 结束位置下标)<br></code></pre></td></tr></table></figure><p>和字符串中的用法一样</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span><br>[<span class="hljs-string">&#x27;xx&#x27;</span>, <span class="hljs-string">&#x27;zz&#x27;</span>, <span class="hljs-string">&#x27;yy&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>.index(<span class="hljs-string">&#x27;zz&#x27;</span>)<br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><ol start="2"><li>count()</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">list</span>.count(数据, 开始位置下标, 结束位置下标)<br></code></pre></td></tr></table></figure><p>和字符串中的用法一样</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span><br>[<span class="hljs-string">&#x27;xx&#x27;</span>, <span class="hljs-string">&#x27;zz&#x27;</span>, <span class="hljs-string">&#x27;yy&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>.count(<span class="hljs-string">&#x27;zz&#x27;</span>)<br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><ol start="3"><li>len()</li></ol><p>获取列表的长度</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">len</span>(<span class="hljs-built_in">list</span>)<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span><br>[<span class="hljs-string">&#x27;xx&#x27;</span>, <span class="hljs-string">&#x27;zz&#x27;</span>, <span class="hljs-string">&#x27;yy&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">len</span>(<span class="hljs-built_in">list</span>)<br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h4 id="3-1-3-判断是否存在"><a href="#3-1-3-判断是否存在" class="headerlink" title="3.1.3 判断是否存在"></a>3.1.3 判断是否存在</h4><ol><li>in: 判断制定数据是否存在于列表，存在True, 不存在False</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span><br>[<span class="hljs-string">&#x27;xx&#x27;</span>, <span class="hljs-string">&#x27;zz&#x27;</span>, <span class="hljs-string">&#x27;yy&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;yy&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span><br><span class="hljs-literal">True</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;zy&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span><br><span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><ol start="2"><li>not in:判断制定数据是否存在于列表，不存在True, 存在False</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span><br>[<span class="hljs-string">&#x27;xx&#x27;</span>, <span class="hljs-string">&#x27;zz&#x27;</span>, <span class="hljs-string">&#x27;yy&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;yy&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span><br><span class="hljs-literal">False</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;zy&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span><br><span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p> 一个小案例（判断用户能否注册）</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs py">name_list = [<span class="hljs-string">&#x27;xx&#x27;</span>, <span class="hljs-string">&#x27;zy&#x27;</span>, <span class="hljs-string">&#x27;yy&#x27;</span>, <span class="hljs-string">&#x27;zz&#x27;</span>]<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    name = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入加入名单的名字(输入q退出):\n&quot;</span>)<br>    <span class="hljs-keyword">if</span> name == <span class="hljs-string">&#x27;q&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;注册完成后的名单为<span class="hljs-subst">&#123;name_list&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">if</span> name <span class="hljs-keyword">in</span> name_list:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;用户名已存在，不允许注册&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;允许注册&quot;</span>)<br>        name_list.append(name)<br></code></pre></td></tr></table></figure><h3 id="3-2-增加"><a href="#3-2-增加" class="headerlink" title="3.2 增加"></a>3.2 增加</h3><ol><li>append(): 列表追加数据</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">list</span>.append(数据)<br></code></pre></td></tr></table></figure><p>追加数据的时候，如果这个数据是个序列（字符串 列表 etc），则追加整个序列到列表的结尾</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span><br>[<span class="hljs-string">&#x27;xx&#x27;</span>, <span class="hljs-string">&#x27;zz&#x27;</span>, <span class="hljs-string">&#x27;yy&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>.append(<span class="hljs-string">&#x27;zy&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span><br>[<span class="hljs-string">&#x27;xx&#x27;</span>, <span class="hljs-string">&#x27;zz&#x27;</span>, <span class="hljs-string">&#x27;yy&#x27;</span>, <span class="hljs-string">&#x27;zy&#x27;</span>]<br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span><br>[<span class="hljs-string">&#x27;xx&#x27;</span>, <span class="hljs-string">&#x27;zz&#x27;</span>, <span class="hljs-string">&#x27;yy&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>.append([<span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span><br>[<span class="hljs-string">&#x27;xx&#x27;</span>, <span class="hljs-string">&#x27;zz&#x27;</span>, <span class="hljs-string">&#x27;yy&#x27;</span>, [<span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>]]<br></code></pre></td></tr></table></figure><ol start="2"><li>extend():列表追加数据</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">list</span>.extend(数据)<br></code></pre></td></tr></table></figure><p>追加数据的时候，如果这个数据是个序列（字符串 列表 etc），则拆分成一个个单元追加在结尾</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span><br>[<span class="hljs-string">&#x27;xx&#x27;</span>, <span class="hljs-string">&#x27;zz&#x27;</span>, <span class="hljs-string">&#x27;yy&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>.extend(<span class="hljs-string">&#x27;zy&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span><br>[<span class="hljs-string">&#x27;xx&#x27;</span>, <span class="hljs-string">&#x27;zz&#x27;</span>, <span class="hljs-string">&#x27;yy&#x27;</span>, <span class="hljs-string">&#x27;z&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>]<br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span><br>[<span class="hljs-string">&#x27;xx&#x27;</span>, <span class="hljs-string">&#x27;zz&#x27;</span>, <span class="hljs-string">&#x27;yy&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>.extend([<span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span><br>[<span class="hljs-string">&#x27;xx&#x27;</span>, <span class="hljs-string">&#x27;zz&#x27;</span>, <span class="hljs-string">&#x27;yy&#x27;</span>, <span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>]<br></code></pre></td></tr></table></figure><ol start="3"><li>insert(): 指定位置列表追加数据</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">list</span>.insert(下标, 数据)<br></code></pre></td></tr></table></figure><p>追加数据的时候，如果这个数据是个序列（字符串 列表 etc），则追加整个序列到列表的结尾</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span><br>[<span class="hljs-string">&#x27;xx&#x27;</span>, <span class="hljs-string">&#x27;zz&#x27;</span>, <span class="hljs-string">&#x27;yy&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>.insert(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;zy&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span><br>[<span class="hljs-string">&#x27;xx&#x27;</span>, <span class="hljs-string">&#x27;zy&#x27;</span>, <span class="hljs-string">&#x27;zz&#x27;</span>, <span class="hljs-string">&#x27;yy&#x27;</span>]<br></code></pre></td></tr></table></figure><p>相当于把下标位置元素变成<code>数据</code>然后再把后面的数据依次往后移一位</p><h3 id="3-3-删除"><a href="#3-3-删除" class="headerlink" title="3.3 删除"></a>3.3 删除</h3><ol><li>del</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">del</span> 目标<br><span class="hljs-keyword">del</span>(目标)<br></code></pre></td></tr></table></figure><ul><li>可以删除list的指定元素</li><li>可以删除这个list对象</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span> = [<span class="hljs-string">&#x27;xx&#x27;</span>, <span class="hljs-string">&#x27;yy&#x27;</span>, <span class="hljs-string">&#x27;zz&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">del</span> <span class="hljs-built_in">list</span>[<span class="hljs-number">2</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span><br>[<span class="hljs-string">&#x27;xx&#x27;</span>, <span class="hljs-string">&#x27;yy&#x27;</span>]<br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">del</span> <span class="hljs-built_in">list</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span><br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;list&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><ol start="2"><li>pop: 删除置顶下标的数据，如果不指定下标则默认删除最后一个数据。并返回被删除的数据</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">list</span>.pop(下标)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span> = [<span class="hljs-string">&#x27;xx&#x27;</span>, <span class="hljs-string">&#x27;yy&#x27;</span>, <span class="hljs-string">&#x27;zz&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>.pop()<br><span class="hljs-string">&#x27;zz&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span><br>[<span class="hljs-string">&#x27;xx&#x27;</span>, <span class="hljs-string">&#x27;yy&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>.pop(<span class="hljs-number">0</span>)<br><span class="hljs-string">&#x27;xx&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span><br>[<span class="hljs-string">&#x27;yy&#x27;</span>]<br></code></pre></td></tr></table></figure><ol start="3"><li>remove: 删除指定数据（只删除第一个）</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">list</span>.remove(数据)<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span> = [<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>.remove(<span class="hljs-string">&#x27;1&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span><br>[<span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>]<br></code></pre></td></tr></table></figure><ol start="4"><li>clear: 清空列表</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">list</span>.clear()<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span><br>[<span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>.clear()<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span><br>[]<br></code></pre></td></tr></table></figure><h3 id="3-4-修改"><a href="#3-4-修改" class="headerlink" title="3.4 修改"></a>3.4 修改</h3><ol><li>修改指定下标的数据</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span><br>[<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;6&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span><br>[<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>]<br></code></pre></td></tr></table></figure><ol start="2"><li>reverse(): 将原列表倒转</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span> = [<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>.reverse()<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span><br>[<span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>]<br></code></pre></td></tr></table></figure><ol start="3"><li>sort(): 将列表以指定方式排序</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">list</span>.sort(key=<span class="hljs-literal">None</span>, reverse=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><blockquote><p><code>reverse=Ture</code>为降序<br><code>reverse=False</code>为升序</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span><br>[<span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>.sort()<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span><br>[<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>.sort(reverse=<span class="hljs-literal">True</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span><br>[<span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>]<br></code></pre></td></tr></table></figure><h3 id="3-5-复制"><a href="#3-5-复制" class="headerlink" title="3.5 复制"></a>3.5 复制</h3><p>函数: copy</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span><br>[<span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>cplist = <span class="hljs-built_in">list</span>.copy()<br><span class="hljs-meta">&gt;&gt;&gt; </span>cplist<br>[<span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>cplist.pop()<br><span class="hljs-string">&#x27;1&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>cplist<br>[<span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span><br>[<span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>]<br></code></pre></td></tr></table></figure><blockquote><p>注意！<code>cplist = list</code>只是做了引用，实际上并没有复制</p><p> <code>cplist = list[:]</code>或<code>cplist = list.copy()</code> 可以实现复制</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py">my_foods = [<span class="hljs-string">&#x27;pizza&#x27;</span>, <span class="hljs-string">&#x27;falafel&#x27;</span>, <span class="hljs-string">&#x27;carrot cake&#x27;</span>] <br><span class="hljs-comment"># 这种方式来复制列表时，再改变my_foods的值后friend_foods不会被改变</span><br>friend_foods = my_foods[:]<br><span class="hljs-comment"># 如果采用friend_foods = my_foods，那么相当于friend_foods在引用my_foods，my_foods改变后它也会变</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;My favorite foods are:&quot;</span>) <br><span class="hljs-built_in">print</span>(my_foods)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\nMy friend&#x27;s favorite foods are:&quot;</span>) <br><span class="hljs-built_in">print</span>(friend_foods)<br></code></pre></td></tr></table></figure><h2 id="4-列表的循环遍历"><a href="#4-列表的循环遍历" class="headerlink" title="4. 列表的循环遍历"></a>4. 列表的循环遍历</h2><h3 id="4-1-用while循环遍历"><a href="#4-1-用while循环遍历" class="headerlink" title="4.1 用while循环遍历"></a>4.1 用while循环遍历</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">list</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br><br>i = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> i&lt;<span class="hljs-built_in">len</span>(<span class="hljs-built_in">list</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>[i])<br>    i += <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="4-2-用for循环遍历"><a href="#4-2-用for循环遍历" class="headerlink" title="4.2 用for循环遍历"></a>4.2 用for循环遍历</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">list</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>:<br>    <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure><h2 id="5-列表嵌套"><a href="#5-列表嵌套" class="headerlink" title="5. 列表嵌套"></a>5. 列表嵌套</h2><p>相当于其他语言的二维数组</p><h3 id="5-1-查找"><a href="#5-1-查找" class="headerlink" title="5.1 查找"></a>5.1 查找</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span> = [[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span><br>[[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>[<span class="hljs-number">0</span>]<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>[<span class="hljs-number">1</span>]<br>[<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>[<span class="hljs-number">2</span>]<br>[<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>]<br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="案例：八个老师分配三个办公室"><a href="#案例：八个老师分配三个办公室" class="headerlink" title="案例：八个老师分配三个办公室"></a>案例：八个老师分配三个办公室</h3><p>（办公室可以为空，完全随机但不平均分配）</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> random<br><br>Tname = [<span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-string">&#x27;王五&#x27;</span>, <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Jerry&#x27;</span>, <span class="hljs-string">&#x27;Alex&#x27;</span>]<br>assigned_office = [[], [], []]<br>cpTname = Tname.copy()<br><br><span class="hljs-keyword">while</span> cpTname:<br>    jud = random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>)<br>    assigned_office[jud].append(cpTname.pop())<br><br>n = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> assigned_office:<br>    n += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> i:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;办公室<span class="hljs-subst">&#123;n&#125;</span>没有被分配老师&quot;</span>)<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;办公室<span class="hljs-subst">&#123;n&#125;</span>的人数为<span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(i)&#125;</span>，成员分别为:&quot;</span>)<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> i:<br>        <span class="hljs-built_in">print</span>(j, end=<span class="hljs-string">&#x27; &#x27;</span>)<br>    <span class="hljs-built_in">print</span>()<br>    <br><br><span class="hljs-comment">#某次运行的结果</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">办公室1的人数为3，成员分别为:</span><br><span class="hljs-string">Tom 王五 张三 </span><br><span class="hljs-string">办公室2没有被分配老师</span><br><span class="hljs-string">办公室3的人数为3，成员分别为:</span><br><span class="hljs-string">Alex Jerry 李四 </span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>古老的学习笔记</category>
      
      <category>Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>06 字符串</title>
    <link href="/2022/10/25/06%20%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/2022/10/25/06%20%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="1-下标"><a href="#1-下标" class="headerlink" title="1. 下标"></a>1. 下标</h2><p>可以通过[]来实现对字符串，元组，列表等类型数据的访问</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;abcd123&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>[<span class="hljs-number">0</span>]<br><span class="hljs-string">&#x27;a&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>[<span class="hljs-number">1</span>]<br><span class="hljs-string">&#x27;b&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>[<span class="hljs-number">2</span>]<br><span class="hljs-string">&#x27;c&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>[<span class="hljs-number">3</span>]<br><span class="hljs-string">&#x27;d&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="2-切片"><a href="#2-切片" class="headerlink" title="2. 切片"></a>2. 切片</h2><h3 id="2-1-语法"><a href="#2-1-语法" class="headerlink" title="2.1 语法"></a>2.1 语法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">序列 = [开始位置下标:结束位置下标:步长]<br></code></pre></td></tr></table></figure><blockquote><p>注意：不包含结束位置下标。步长默认为1，下标可以为负数。</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;abcd123&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>[<span class="hljs-number">0</span>:<span class="hljs-number">4</span>]<br><span class="hljs-string">&#x27;abcd&#x27;</span><br></code></pre></td></tr></table></figure><p>我们可以把步长设置为<code>-1</code>来倒序输出</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;abcd123&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>[::-<span class="hljs-number">1</span>]<br><span class="hljs-string">&#x27;321dcba&#x27;</span><br></code></pre></td></tr></table></figure><p>若下标和步长方向冲突则无法选择出和果</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;abcd123&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>[<span class="hljs-number">3</span>:<span class="hljs-number">2</span>:-<span class="hljs-number">1</span>]<br><span class="hljs-string">&#x27;d&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>[<span class="hljs-number">3</span>:<span class="hljs-number">2</span>:<span class="hljs-number">1</span>]<br><span class="hljs-string">&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="3-常用的操作方法"><a href="#3-常用的操作方法" class="headerlink" title="3. 常用的操作方法"></a>3. 常用的操作方法</h2><p>字符串的常用操作方法有查找，修改和判断三大类</p><h3 id="3-1-查找"><a href="#3-1-查找" class="headerlink" title="3.1 查找"></a>3.1 查找</h3><h4 id="3-1-1-find"><a href="#3-1-1-find" class="headerlink" title="3.1.1 find()"></a>3.1.1 find()</h4><p>检查某个子串是否包含在这个字符串之中，若不出现则返回<code>-1</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">str</span>.find(子串, 开始位置下标, 结束位置下标)<br></code></pre></td></tr></table></figure><p>一个例子</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>.find(<span class="hljs-string">&#x27;abc&#x27;</span>)<br><span class="hljs-number">0</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>.find(<span class="hljs-string">&#x27;abcdddd&#x27;</span>)<br>-<span class="hljs-number">1</span><br><span class="hljs-comment"># 加上下标</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>.find(<span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-number">2</span>, -<span class="hljs-number">1</span>)<br>-<span class="hljs-number">1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>.find(<span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>)<br><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h4 id="3-1-2-index"><a href="#3-1-2-index" class="headerlink" title="3.1.2 index()"></a>3.1.2 index()</h4><p>检测某个子串是否包含在这个字符串中，若不出现则报异常，若出现则返回其下标</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">str</span>.index(子串, 开始位置下标, 结束位置下标)<br></code></pre></td></tr></table></figure><p>一个例子</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>.index(<span class="hljs-string">&#x27;d1&#x27;</span>)<br><span class="hljs-number">3</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>.index(<span class="hljs-string">&#x27;d1&#x27;</span>, <span class="hljs-number">3</span>, -<span class="hljs-number">1</span>)<br><span class="hljs-number">3</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>.index(<span class="hljs-string">&#x27;d1&#x27;</span>, <span class="hljs-number">4</span>, -<span class="hljs-number">1</span>)<br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>ValueError: substring <span class="hljs-keyword">not</span> found<br></code></pre></td></tr></table></figure><h4 id="3-1-3-count"><a href="#3-1-3-count" class="headerlink" title="3.1.3 count()"></a>3.1.3 count()</h4><p>返回某个子串出现的次数</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">str</span>.count(子串, 开始位置下标, 结束位置下标)<br></code></pre></td></tr></table></figure><p>一个例子</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>=<span class="hljs-string">&#x27;hello world&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>=<span class="hljs-string">&#x27;hello world&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>.count(<span class="hljs-string">&#x27;l&#x27;</span>)<br><span class="hljs-number">3</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>.count(<span class="hljs-string">&#x27;ads&#x27;</span>)<br><span class="hljs-number">0</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>.count(<span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>)<br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><ul><li>相同的，还有<code>rfind()</code> <code>rindex()</code>从右往左来搜索，用法和结果都一样。</li></ul><h3 id="3-2-修改"><a href="#3-2-修改" class="headerlink" title="3.2 修改"></a>3.2 修改</h3><h4 id="3-2-1-replace"><a href="#3-2-1-replace" class="headerlink" title="3.2.1 replace()"></a>3.2.1 replace()</h4><p>将旧子串替换为新子串，返回一个新的字符串，但是<strong>不会改变原有字符串</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">str</span>.replace(旧子串, 新子串, 替换次数)<br></code></pre></td></tr></table></figure><ul><li>默认为全部替换</li><li>若替换次数高出原字符串中的子串的数量也会全部替换</li></ul><p>一个例子:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;hello hello world world&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>.replace(<span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-string">&#x27;hi&#x27;</span>)<br><span class="hljs-string">&#x27;hi hi world world&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span><br><span class="hljs-string">&#x27;hello hello world world&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>.replace(<span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-string">&#x27;hi&#x27;</span>, <span class="hljs-number">1</span>)<br><span class="hljs-string">&#x27;hi hello world world&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span><br><span class="hljs-string">&#x27;hello hello world world&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="3-2-2-split"><a href="#3-2-2-split" class="headerlink" title="3.2.2 split()"></a>3.2.2 split()</h4><p>用分割字符来分割字符串，返回一个列表</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">str</span>.split(分割字符, num)<br></code></pre></td></tr></table></figure><blockquote><p>num表示分割字符出现的次数，即将来返回数据个数为num+1个</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;hello hello world world&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span> = <span class="hljs-built_in">str</span>.split(<span class="hljs-string">&#x27;hello&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span><br>[<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27; world world&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span> = <span class="hljs-built_in">str</span>.split(<span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-number">1</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span><br>[<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27; hello world world&#x27;</span>]<br></code></pre></td></tr></table></figure><h4 id="3-2-3-join"><a href="#3-2-3-join" class="headerlink" title="3.2.3 join()"></a>3.2.3 join()</h4><p>合并列表里的字符串数据为一个新字符串，相当于用字符串来分割列表</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">str</span>.join(多字符串组成的序列)<br></code></pre></td></tr></table></figure><p>一个例子</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span> = [<span class="hljs-string">&#x27;aa&#x27;</span>, <span class="hljs-string">&#x27;bb&#x27;</span>, <span class="hljs-string">&#x27;cc&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;...&#x27;</span>.join(<span class="hljs-built_in">list</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span><br><span class="hljs-string">&#x27;aa...bb...cc&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="3-2-4-字符大小写"><a href="#3-2-4-字符大小写" class="headerlink" title="3.2.4 字符大小写"></a>3.2.4 字符大小写</h4><ol><li>capitalize()</li></ol><p>将字符串的第一个字符转换成大写</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;hello hello world world&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>.capitalize()<br><span class="hljs-string">&#x27;Hello hello world world&#x27;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>title()</li></ol><p>将字符串的所有单词的首字母都转换成大写</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;hello hello world world&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>.title()<br><span class="hljs-string">&#x27;Hello Hello World World&#x27;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>upper()</li></ol><p>小写全转为大写</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;hello hello world world&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>.upper()<br><span class="hljs-string">&#x27;HELLO HELLO WORLD WORLD&#x27;</span><br></code></pre></td></tr></table></figure><ol start="4"><li>lower()</li></ol><p>大写全转为小写</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;hello hello world world&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>.lower()<br><span class="hljs-string">&#x27;hello hello world world&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="3-2-5-删除左右两侧空白"><a href="#3-2-5-删除左右两侧空白" class="headerlink" title="3.2.5 删除左右两侧空白"></a>3.2.5 删除左右两侧空白</h4><ol><li>lstrip()</li></ol><p>删除左侧的空白</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;  reck less  &#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>.lstrip()<br><span class="hljs-string">&#x27;reck less  &#x27;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>rstrip()</li></ol><p>删除右侧的空白</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;  reck less  &#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>.rstrip()<br><span class="hljs-string">&#x27;  reck less&#x27;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>strip()</li></ol><p>删除左右两侧的空白</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;  reck less  &#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>.strip()<br><span class="hljs-string">&#x27;reck less&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="3-2-6-对齐"><a href="#3-2-6-对齐" class="headerlink" title="3.2.6 对齐"></a>3.2.6 对齐</h4><ol><li>ljust()</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">str</span>.ljust(最终字符串长度, 填充字符)<br></code></pre></td></tr></table></figure><p>左对齐</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;reckless&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>.ljust(<span class="hljs-number">10</span>, <span class="hljs-string">&#x27;#&#x27;</span>)<br><span class="hljs-string">&#x27;reckless##&#x27;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>rjust()</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">str</span>.rjust(最终字符串长度, 填充字符)<br></code></pre></td></tr></table></figure><p>右对齐</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;reckless&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>.rjust(<span class="hljs-number">10</span>, <span class="hljs-string">&#x27;#&#x27;</span>)<br><span class="hljs-string">&#x27;##reckless&#x27;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>center()</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">str</span>.center(最终字符串长度, 填充字符)<br></code></pre></td></tr></table></figure><p>居中对齐</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;reckless&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>.center(<span class="hljs-number">10</span>, <span class="hljs-string">&#x27;#&#x27;</span>)<br><span class="hljs-string">&#x27;#reckless#&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>.center(<span class="hljs-number">15</span>, <span class="hljs-string">&#x27;#&#x27;</span>)<br><span class="hljs-string">&#x27;####reckless###&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="3-3-判断"><a href="#3-3-判断" class="headerlink" title="3.3 判断"></a>3.3 判断</h3><h4 id="3-3-1-startswith-endswith"><a href="#3-3-1-startswith-endswith" class="headerlink" title="3.3.1 startswith()&#x2F;endswith()"></a>3.3.1 startswith()&#x2F;endswith()</h4><p>判断字符串是否以某个子串开头&#x2F;结尾</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">str</span>.startswith(子串, 开始下标, 结束下标)<br><span class="hljs-built_in">str</span>.endswith(子串, 开始下标, 结束下标)<br></code></pre></td></tr></table></figure><p>一个例子</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span><br><span class="hljs-string">&#x27;reckless&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>.startswith(<span class="hljs-string">&#x27;rec&#x27;</span>)<br><span class="hljs-literal">True</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>.endswith(<span class="hljs-string">&#x27;rec&#x27;</span>)<br><span class="hljs-literal">False</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>.startswith(<span class="hljs-string">&#x27;ess&#x27;</span>)<br><span class="hljs-literal">False</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>.endswith(<span class="hljs-string">&#x27;ess&#x27;</span>)<br><span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><h4 id="3-3-2-判断字符串类型"><a href="#3-3-2-判断字符串类型" class="headerlink" title="3.3.2 判断字符串类型"></a>3.3.2 判断字符串类型</h4><p>判断某个字符串至少有一个字符，并<strong>只包含某种类型</strong>则返回<code>True</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">str</span>.isalpha()<br><span class="hljs-built_in">str</span>.isdigit()<br><span class="hljs-built_in">str</span>.isalnum()<br><span class="hljs-built_in">str</span>.isspace()<br></code></pre></td></tr></table></figure><p>一个例子(看了就明白)</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;reckless&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>.isalpha()<br><span class="hljs-literal">True</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>.isdigit()<br><span class="hljs-literal">False</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;reckless1&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>.isdigit()<br><span class="hljs-literal">False</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>.isalpha()<br><span class="hljs-literal">False</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;hello world&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>.isalpha()<br><span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>古老的学习笔记</category>
      
      <category>Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>05 循环</title>
    <link href="/2022/10/25/05%20%E5%BE%AA%E7%8E%AF/"/>
    <url>/2022/10/25/05%20%E5%BE%AA%E7%8E%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><p>循环可以和else配合使用</p><p>else下方的代码是循环正常结束的代码</p><p>比如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">i = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> i &lt;= <span class="hljs-number">5</span>:<br>    <span class="hljs-built_in">print</span>(i)<br>    i += <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;完成&quot;</span>)<br></code></pre></td></tr></table></figure><p>这样的话最后一个print无论如何都会被执行，显然只有循环被正常结束它才应该被执行。可以这样改进 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">i = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> i &lt;= <span class="hljs-number">5</span>:<br>    <span class="hljs-built_in">print</span>(i)<br>    i += <span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;完成&quot;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>注意：循环遇到<code>break</code>退出后else中的代码不会被执行，但如果只遇到了<code>continue</code>则else中的代码可以被执行</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>古老的学习笔记</category>
      
      <category>Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>04 if语句</title>
    <link href="/2022/10/25/04%20if%E8%AF%AD%E5%8F%A5/"/>
    <url>/2022/10/25/04%20if%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h1><h2 id="if语句-1"><a href="#if语句-1" class="headerlink" title="if语句"></a>if语句</h2><p>和其他语言不同，Python的if语句语法最简单</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">elif</span> <span class="hljs-number">10</span> &lt;= age &lt;= <span class="hljs-number">30</span> :<br></code></pre></td></tr></table></figure><p>这样的语句在Python中也是合法的</p><p>一个剪刀石头布游戏</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1 剪刀 2 石头 3 布</span><br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">player</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.score = <span class="hljs-number">0</span><br>        self.times = <span class="hljs-number">0</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">jud</span>(<span class="hljs-params">j, pb</span>):<br>    <span class="hljs-keyword">if</span> j == <span class="hljs-number">1</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;pb&#125;</span>出了 剪刀&quot;</span>)<br>    <span class="hljs-keyword">elif</span> j == <span class="hljs-number">2</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;pb&#125;</span>出了 石头&quot;</span>)<br>    <span class="hljs-keyword">elif</span> j == <span class="hljs-number">3</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;pb&#125;</span>出了  布&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;pb&#125;</span>输入了<span class="hljs-subst">&#123;j&#125;</span>,这是个不合法的数字&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">guessFist</span>(<span class="hljs-params">player, p</span>) -&gt; <span class="hljs-built_in">int</span>:<br>    bot = <span class="hljs-built_in">int</span>(randint(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>))<br><br>    jud(player, <span class="hljs-string">&quot;玩家&quot;</span>)<br>    jud(bot, <span class="hljs-string">&quot;电脑&quot;</span>)<br><br>    <span class="hljs-keyword">if</span> bot == player:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;平局，请再试一次&quot;</span>)<br>    <span class="hljs-keyword">elif</span> ((bot == <span class="hljs-number">1</span>) <span class="hljs-keyword">and</span> (player == <span class="hljs-number">3</span>)) <span class="hljs-keyword">or</span> ((bot == <span class="hljs-number">2</span>) <span class="hljs-keyword">and</span> (player == <span class="hljs-number">1</span>)) <span class="hljs-keyword">or</span> ((bot == <span class="hljs-number">3</span>) <span class="hljs-keyword">and</span> (player == <span class="hljs-number">2</span>)):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;你输了&quot;</span>)<br>        p.score -= <span class="hljs-number">1</span><br>    <span class="hljs-keyword">elif</span> ((bot == <span class="hljs-number">1</span>) <span class="hljs-keyword">and</span> (player == <span class="hljs-number">2</span>)) <span class="hljs-keyword">or</span> ((bot == <span class="hljs-number">2</span>) <span class="hljs-keyword">and</span> (player == <span class="hljs-number">3</span>)) <span class="hljs-keyword">or</span> ((bot == <span class="hljs-number">3</span>) <span class="hljs-keyword">and</span> (player == <span class="hljs-number">1</span>)):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;你赢了&quot;</span>)<br>        p.score += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;一个未知的错误发生了，请重试&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;您现在的得分是<span class="hljs-subst">&#123;p.score&#125;</span>&quot;</span>)<br><br><br>p = player()<br>play = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入你的选择，1代表剪刀，2代表石头，3代表布, 输入-1来退出:\n&quot;</span>))<br><span class="hljs-keyword">while</span> play != -<span class="hljs-number">1</span>:<br>    guessFist(play, p)<br>    time.sleep(<span class="hljs-number">1</span>)<br>    p.times += <span class="hljs-number">1</span><br>    play = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入你的选择，1代表剪刀，2代表石头，3代表布, 输入-1来退出:\n&quot;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;一共进行了<span class="hljs-subst">&#123;p.times&#125;</span>轮，您的分数是<span class="hljs-subst">&#123;p.score&#125;</span>&quot;</span>)<br><br></code></pre></td></tr></table></figure><h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><p>python的三元运算符不是传统的<code>a&gt;b?a:b</code></p><p>而是更容易被理解的<code>a if a&gt;b else b</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">条件成立的表达式 <span class="hljs-keyword">if</span> 条件 <span class="hljs-keyword">else</span> 条件不成立的表达式<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>古老的学习笔记</category>
      
      <category>Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>03 输出</title>
    <link href="/2022/10/25/03%20%E8%BE%93%E5%87%BA/"/>
    <url>/2022/10/25/03%20%E8%BE%93%E5%87%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h1><h2 id="1-格式化输出"><a href="#1-格式化输出" class="headerlink" title="1. 格式化输出"></a>1. 格式化输出</h2><h3 id="1-1-格式化符号"><a href="#1-1-格式化符号" class="headerlink" title="1.1 格式化符号"></a>1.1 格式化符号</h3><p><img src="/../img/6727033-1d23b4a934c90939.png" alt="6727033-1d23b4a934c90939"></p><h3 id="1-2-使用方法"><a href="#1-2-使用方法" class="headerlink" title="1.2 使用方法"></a>1.2 使用方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">age = <span class="hljs-number">20</span><br>name = <span class="hljs-string">&#x27;xx&#x27;</span><br>sno = <span class="hljs-number">1</span><br>weight = <span class="hljs-number">75.5</span><br><br><span class="hljs-comment"># 1. 今天我的年龄是x岁</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;今天我的年龄是%d岁&#x27;</span> % age)<br><br><span class="hljs-comment"># 2. 我的名字是x</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我的名字是%s&#x27;</span> % name)<br><br><span class="hljs-comment"># 3. 我的体重是x公斤(保留两位小数)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我的体重是%.2f公斤&#x27;</span> % weight)<br><br><span class="hljs-comment"># 4. 我的学号是x（要求输出00001）</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我的学号是%04d&#x27;</span> % sno)<br><br><span class="hljs-comment"># 5. 我的名字是x，今年x岁了，我的学号是x。</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我的名字是%s，今年%d岁了，我的学号是%04d&#x27;</span> % (name, age, sno))<br></code></pre></td></tr></table></figure><blockquote><ul><li>%.2f: 浮点数保留两位小数</li><li>%04d: 整数不足4位在前面补0</li></ul></blockquote><h3 id="1-3-格式化字符串拓展"><a href="#1-3-格式化字符串拓展" class="headerlink" title="1.3 格式化字符串拓展"></a>1.3 格式化字符串拓展</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># 将数据以字符串的形式输出</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我的名字是%s，今年%s岁了，我的体重是%s公斤&#x27;</span> % (name, age, weight))<br>我的名字是xx，今年<span class="hljs-number">20</span>岁了，我的体重是<span class="hljs-number">75.5</span>公斤<br></code></pre></td></tr></table></figure><h3 id="1-4-f格式化字符串"><a href="#1-4-f格式化字符串" class="headerlink" title="1.4 f格式化字符串"></a>1.4 f格式化字符串</h3><p>格式化字符串除了%s还可以用<code>f&#39;&#123;&#125;&#39;</code>来格式化输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># f格式化字符串</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;我的名字是<span class="hljs-subst">&#123;name&#125;</span>，今年<span class="hljs-subst">&#123;age&#125;</span>岁了，我的体重是<span class="hljs-subst">&#123;weight&#125;</span>公斤&#x27;</span>)<br>我的名字是xx，今年<span class="hljs-number">20</span>岁了，我的体重是<span class="hljs-number">75.5</span>公斤<br></code></pre></td></tr></table></figure><h3 id="1-5-转义字符"><a href="#1-5-转义字符" class="headerlink" title="1.5 转义字符"></a>1.5 转义字符</h3><ul><li><code>\n</code>: 换行</li><li><code>\t</code>: 制表符，一个tab键的距离</li></ul><p>在Python中，print函数默认自带<code>end=&#39;\n&#39;</code>（相当于java中的println）</p><p>若要取消其换行可以加上<code>print(&#39;内容&#39;, end=None)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 换行输出</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello\nPython&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="1-6-print函数结束符"><a href="#1-6-print函数结束符" class="headerlink" title="1.6 print函数结束符"></a>1.6 print函数结束符</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello&#x27;</span>, end=<span class="hljs-string">&#x27; &#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;world&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello&#x27;</span>, end=<span class="hljs-string">&#x27; &#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Python&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>古老的学习笔记</category>
      
      <category>Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>02 数据类型转换和运算符</title>
    <link href="/2022/10/25/02%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%92%8C%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <url>/2022/10/25/02%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%92%8C%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="数据类型转换和运算符"><a href="#数据类型转换和运算符" class="headerlink" title="数据类型转换和运算符"></a>数据类型转换和运算符</h1><h2 id="1-输入"><a href="#1-输入" class="headerlink" title="1. 输入"></a>1. 输入</h2><h3 id="1-1-输入的语法"><a href="#1-1-输入的语法" class="headerlink" title="1.1 输入的语法"></a>1.1 输入的语法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;提示信息&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="1-2-输入的特点"><a href="#1-2-输入的特点" class="headerlink" title="1.2 输入的特点"></a>1.2 输入的特点</h3><ol><li>当程序执行到<code>input</code>时，等待用户输入，输入完成后再继续向下执行</li><li><code>input</code>接受用户输入后一般储存到变量，方便使用</li><li><code>input</code>会把接收到的任意用户输入的数据<strong>都当做字符串</strong>处理</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>psw = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入密码: &#x27;</span>)<br>请输入密码: <span class="hljs-number">123</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;您输入的密码是<span class="hljs-subst">&#123;psw&#125;</span>。&#x27;</span>)<br>您输入的密码是<span class="hljs-number">123</span>。<br></code></pre></td></tr></table></figure><h2 id="2-转换数据类型"><a href="#2-转换数据类型" class="headerlink" title="2. 转换数据类型"></a>2. 转换数据类型</h2><h3 id="2-1-转换数据类型的函数"><a href="#2-1-转换数据类型的函数" class="headerlink" title="2.1 转换数据类型的函数"></a>2.1 转换数据类型的函数</h3><p><img src="/../img/image-20221007100708532.png" alt="image-20221007100708532"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>psw = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入密码:\n &#x27;</span>)<br>请输入密码:<br> <span class="hljs-number">123</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">type</span>(psw)<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;str&#x27;</span>&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">int</span>(psw)<br><span class="hljs-number">123</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">type</span>(psw)<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;str&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><p>可以看到在使用int(psw)时获取了一个int类型的数据，但psw的类型其实没有变化</p><p>不是所有字符串都可以转换成int或float</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;1&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">float</span>(<span class="hljs-built_in">str</span>)<br><span class="hljs-number">1.0</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;a&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">float</span>(<span class="hljs-built_in">str</span>)<br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>ValueError: could <span class="hljs-keyword">not</span> convert string to <span class="hljs-built_in">float</span>: <span class="hljs-string">&#x27;a&#x27;</span><br></code></pre></td></tr></table></figure><p>eval: 将str转换成它原本的类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>str1 = <span class="hljs-string">&#x27;1&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">type</span>(<span class="hljs-built_in">eval</span>(str1))<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;int&#x27;</span>&gt;<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>str2 = <span class="hljs-string">&#x27;1.2&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">type</span>(<span class="hljs-built_in">eval</span>(str2))<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;float&#x27;</span>&gt;<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>str3 = <span class="hljs-string">&#x27;[1, 2, 3]&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">type</span>(<span class="hljs-built_in">eval</span>(str3))<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;list&#x27;</span>&gt;<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>str4 = <span class="hljs-string">&#x27;(1, 2, 3)&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">type</span>(<span class="hljs-built_in">eval</span>(str4))<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;tuple&#x27;</span>&gt;<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>str5 = <span class="hljs-string">&quot;&#123;&#x27;key1&#x27;: 1, &#x27;key2&#x27;: 2, &#x27;key3&#x27;: 3&#125;&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">type</span>(<span class="hljs-built_in">eval</span>(str5))<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;dict&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="3-运算符"><a href="#3-运算符" class="headerlink" title="3. 运算符"></a>3. 运算符</h2><ol><li>分类</li></ol><ul><li>算数运算符</li><li>赋值运算符</li><li>复合赋值运算符</li><li>比较运算符</li><li>逻辑运算符</li></ul><ol start="2"><li>优先级</li></ol><p><code>()</code>高于<code>**</code>高于<code>*</code> <code>/</code> <code>//</code> <code>%</code>高于<code>+</code> <code>-</code></p><h3 id="3-1-算术运算符"><a href="#3-1-算术运算符" class="headerlink" title="3.1 算术运算符"></a>3.1 算术运算符</h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>+</code> <code>-</code></td><td>加，减</td></tr><tr><td><code>*</code> <code>/</code> <code>%</code> <code>//</code></td><td>乘，除，模，整除</td></tr><tr><td><code>**</code></td><td>指数</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">2</span>+<span class="hljs-number">3</span><br><span class="hljs-number">5</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">2</span>*<span class="hljs-number">3</span><br><span class="hljs-number">6</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">2</span>-<span class="hljs-number">3</span><br>-<span class="hljs-number">1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">15</span>/<span class="hljs-number">4</span><br><span class="hljs-number">3.75</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">15</span>%<span class="hljs-number">4</span><br><span class="hljs-number">3</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">15</span>//<span class="hljs-number">4</span><br><span class="hljs-number">3</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">2</span>**<span class="hljs-number">3</span><br><span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><p><strong>除法得到的结果一定是float类型</strong>这和C&#x2F;C++，java等语言不一样。C&#x2F;C++，java等语言的<code>/</code>相当于python的<code>//</code></p><h3 id="3-2-赋值运算符"><a href="#3-2-赋值运算符" class="headerlink" title="3.2 赋值运算符"></a>3.2 赋值运算符</h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>=</code></td><td>等于</td></tr></tbody></table><h4 id="3-2-1单个变量赋值"><a href="#3-2-1单个变量赋值" class="headerlink" title="3.2.1单个变量赋值"></a>3.2.1单个变量赋值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a = <span class="hljs-number">3</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a<br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h4 id="3-2-2多个变量赋值"><a href="#3-2-2多个变量赋值" class="headerlink" title="3.2.2多个变量赋值"></a>3.2.2多个变量赋值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a, b, c= <span class="hljs-number">1</span>, <span class="hljs-number">2.3</span>, <span class="hljs-string">&#x27;4&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a<br><span class="hljs-number">1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>b<br><span class="hljs-number">2.3</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>c<br><span class="hljs-string">&#x27;4&#x27;</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span>a = b = <span class="hljs-number">10</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a<br><span class="hljs-number">10</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>b<br><span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h3 id="3-3-复合赋值运算符"><a href="#3-3-复合赋值运算符" class="headerlink" title="3.3 复合赋值运算符"></a>3.3 复合赋值运算符</h3><p><code>+=</code> <code>-=</code> <code>*=</code> <code>/=</code> <code>%=</code> <code>//=</code> <code>**=</code> <code>&amp;=</code> <code>|=</code> <code>^=</code> <code>&gt;&gt;=</code> <code>&lt;&lt;=</code></p><p>和其他语言基本相同</p><h3 id="3-4-比较运算"><a href="#3-4-比较运算" class="headerlink" title="3.4 比较运算"></a>3.4 比较运算</h3><table><thead><tr><th>表达式</th><th>描述</th></tr></thead><tbody><tr><td><code>&gt;</code></td><td>大于</td></tr><tr><td><code>&lt;</code></td><td>小于</td></tr><tr><td><code>==</code></td><td>等于</td></tr><tr><td><code>&gt;=</code></td><td>大于等于</td></tr><tr><td><code>&lt;=</code></td><td>小于等于</td></tr><tr><td>‘!&#x3D;’</td><td>不等于</td></tr></tbody></table><p>会返回一个bool类型的值</p><h3 id="3-5-逻辑运算符"><a href="#3-5-逻辑运算符" class="headerlink" title="3.5 逻辑运算符"></a>3.5 逻辑运算符</h3><table><thead><tr><th>表达式</th><th>描述</th></tr></thead><tbody><tr><td><code>and</code></td><td>大于</td></tr><tr><td><code>or</code></td><td>小于</td></tr><tr><td><code>not</code></td><td>等于</td></tr></tbody></table><p>表达式之间的逻辑运算和正常的一样</p><p>数字之间的逻辑运算</p><p><code>and</code>: 若一个数字为0则结果为0，否则结果为最后一个非0数字</p><p><code>or</code>: 只有所有值为0结果才为0，否则结果为第一个非0数字</p>]]></content>
    
    
    <categories>
      
      <category>古老的学习笔记</category>
      
      <category>Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>01 变量和数据类型</title>
    <link href="/2022/10/25/01%20%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/2022/10/25/01%20%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="变量和数据类型"><a href="#变量和数据类型" class="headerlink" title="变量和数据类型"></a>变量和数据类型</h1><h2 id="1-注释"><a href="#1-注释" class="headerlink" title="1. 注释"></a>1. 注释</h2><ul><li>作用:用人熟悉的语言对代码进行解释说明，方便后期维护</li></ul><h3 id="1-1-单行注释"><a href="#1-1-单行注释" class="headerlink" title="1.1 单行注释"></a>1.1 单行注释</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 注释内容</span><br></code></pre></td></tr></table></figure><h3 id="1-2-多行注释"><a href="#1-2-多行注释" class="headerlink" title="1.2 多行注释"></a>1.2 多行注释</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">第一行注释内容</span><br><span class="hljs-string">第二行注释内容</span><br><span class="hljs-string">第三行注释内容</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">第一行注释内容</span><br><span class="hljs-string">第二行注释内容</span><br><span class="hljs-string">第三行注释内容</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="2-变量"><a href="#2-变量" class="headerlink" title="2. 变量"></a>2. 变量</h2><h3 id="2-1-定义变量"><a href="#2-1-定义变量" class="headerlink" title="2.1.  定义变量"></a>2.1.  定义变量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">变量名 = 值<br></code></pre></td></tr></table></figure><h4 id="2-1-1-标识符命名规则"><a href="#2-1-1-标识符命名规则" class="headerlink" title="2.1.1 标识符命名规则"></a>2.1.1 标识符命名规则</h4><ul><li>由数字，字母，下划线组成</li><li>不能以数字开头</li><li>不能使用内置关键字</li><li>严格区分大小写</li></ul><h4 id="2-1-2-命名习惯"><a href="#2-1-2-命名习惯" class="headerlink" title="2.1.2 命名习惯"></a>2.1.2 命名习惯</h4><ul><li>见名知意: 名字变量<code>my_name</code></li><li>大驼峰:MyName</li><li>小驼峰:myName</li><li>下划线:my_name</li></ul><h4 id="2-1-3-使用变量"><a href="#2-1-3-使用变量" class="headerlink" title="2.1.3 使用变量"></a>2.1.3 使用变量</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">my_name = <span class="hljs-string">&#x27;xx&#x27;</span><br><span class="hljs-built_in">print</span>(my_name)<br></code></pre></td></tr></table></figure><h3 id="2-2-Debug工具"><a href="#2-2-Debug工具" class="headerlink" title="2.2. Debug工具"></a>2.2. Debug工具</h3><h4 id="2-2-1-设置断点"><a href="#2-2-1-设置断点" class="headerlink" title="2.2.1 设置断点"></a>2.2.1 设置断点</h4><p>在出现bug的地方设置断点以进行调试（或者在第一行）</p><h4 id="2-2-2-面板"><a href="#2-2-2-面板" class="headerlink" title="2.2.2 面板"></a>2.2.2 面板</h4><p>Debugger面板: 显示变量的类型和值</p><p>Console面板: 显示输出</p><h3 id="2-3-认识数据类型"><a href="#2-3-认识数据类型" class="headerlink" title="2.3. 认识数据类型"></a>2.3. 认识数据类型</h3><p>宏观上看，python的数据类型</p><p><img src="/../img/image-20221007090232669.png" alt="image-20221007090232669"></p><p>检测数据类型的方法: <code>type()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>my_type = <span class="hljs-number">1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">type</span>(my_type)<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;int&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><p><strong>type.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># int -- 整型</span><br>my_type = <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(my_type))<br><br><span class="hljs-comment"># float -- 浮点型</span><br>my_type = <span class="hljs-number">1.1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(my_type))<br><br><span class="hljs-comment"># str -- 字符串</span><br>my_type = <span class="hljs-string">&#x27;xx&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(my_type))<br><br><span class="hljs-comment"># bool -- 布尔型</span><br>my_type = <span class="hljs-literal">True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(my_type))<br><br><span class="hljs-comment"># list -- 列表</span><br>my_type = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(my_type))<br><br><span class="hljs-comment"># tuple -- 元组</span><br>my_type = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(my_type))<br><br><span class="hljs-comment"># set -- 集合</span><br>my_type = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(my_type))<br><br><span class="hljs-comment"># dict -- 字典</span><br>my_type = &#123;<span class="hljs-string">&#x27;key1&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;key2&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;key3&#x27;</span>: <span class="hljs-number">3</span>&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(my_type))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>古老的学习笔记</category>
      
      <category>Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Database Theory Learning</title>
    <link href="/2022/08/27/Database/"/>
    <url>/2022/08/27/Database/</url>
    
    <content type="html"><![CDATA[<h1 id="数据库期末复习"><a href="#数据库期末复习" class="headerlink" title="数据库期末复习"></a>数据库期末复习</h1><hr><p>[TOC]</p><h2 id="需要掌握的概念和术语"><a href="#需要掌握的概念和术语" class="headerlink" title="需要掌握的概念和术语"></a>需要掌握的概念和术语</h2><h3 id="DBMS"><a href="#DBMS" class="headerlink" title="DBMS"></a>DBMS</h3><p>DBMS是一种重要的程序设计系统，它由一个相互关联的数据集合和一组访问这些数据的程序组成。DBMS的主要功能包括数据定义、数据操作、事务管理和运行管理、数据存储和查询处理、数据库维护等</p><h3 id="数据模型的三要素"><a href="#数据模型的三要素" class="headerlink" title="数据模型的三要素"></a>数据模型的三要素</h3><p>数据结构：描述数据库中的对象和对象之间的联系，是对系统静态特性的描述</p><p>数据操作：查询和更新（包括插入、删除、修改）</p><p>完整性约束：是一组规则，保证数据的正确、有效和相容</p><h3 id="码"><a href="#码" class="headerlink" title="码"></a>码</h3><h3 id="超码"><a href="#超码" class="headerlink" title="超码"></a>超码</h3><p>能够惟一确定实体集中每个实体的属性集称为该实体集的超码</p><h3 id="候选码"><a href="#候选码" class="headerlink" title="候选码"></a>候选码</h3><p>真子集都不是超码的极小超码，并称之为候选码</p><h3 id="实体完整性"><a href="#实体完整性" class="headerlink" title="实体完整性"></a>实体完整性</h3><p>关系R的所有元组在主码上的值必须唯一，并且在主码的任何属性上都不能取空值</p><h3 id="参照完整性"><a href="#参照完整性" class="headerlink" title="参照完整性"></a>参照完整性</h3><p>如果属性集FK是关系R的外码，它参照关系S的主码Ks，则R的任何元组在FK上的值或者等于S的某个元组在主码Ks上的值，或者为空值</p><h3 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h3><p>是特殊类型的存储过程，当某个事件发生时它自动执行 要设置触发器机制</p><h3 id="函数依赖"><a href="#函数依赖" class="headerlink" title="函数依赖"></a>函数依赖</h3><p>某个属性集决定另一个属性集时，称另一属性集依赖于该属性集。</p><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><h3 id="索引-建立索引的原则"><a href="#索引-建立索引的原则" class="headerlink" title="索引&amp;&amp;建立索引的原则"></a>索引&amp;&amp;建立索引的原则</h3><h3 id="事务-事物的特性-死锁"><a href="#事务-事物的特性-死锁" class="headerlink" title="事务 事物的特性 死锁"></a>事务 事物的特性 死锁</h3><p>事务:事务是用户定义的一个数据库的操作序列，这些操作要么全做, 要么全不做，是一个不可分割的工作单元；事务是并发控制与调度的基本单位，也是数据库恢复的基本单位</p><p>事务的特性：ACID</p><p>死锁发生时，两个或多个事务都处于等待状态，每个事务都等待其它事务释放锁，以便可以继续执行 </p><h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><ul><li><p>日志是日志记录的序列，记录数据库中所有的更新活动 日志登记每个事务的开始标记、结束标记和所有更新操作 </p></li><li><p>事务结束可能是正常提交（commit），也可能是异常中止（abort） </p></li><li><p>事务的更新可能是插入、删除和修改</p></li></ul><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><h3 id="DBMS提供哪些子语言（3个）"><a href="#DBMS提供哪些子语言（3个）" class="headerlink" title="DBMS提供哪些子语言（3个）"></a>DBMS提供哪些子语言（3个）</h3><p>数据定义语言 (Data Definition Language):用于定义数据库模式</p><p>数据操纵语言(Data Manipulation Language):用于表达数据库的查询和更新</p><p>数据控制语言(Data Control Language):用于定义用户对数据对象的访问权限</p><h3 id="数据模型的三要素-1"><a href="#数据模型的三要素-1" class="headerlink" title="数据模型的三要素"></a>数据模型的三要素</h3><p>数据结构：描述数据库中的对象和对象之间的联系，是对系统静态特性的描述</p><p>数据操作：查询和更新（包括插入、删除、修改）</p><p>完整性约束：是一组规则，保证数据的正确、有效和相容</p><h3 id="DBMS三模式，两级影响结构如何保证数据独立性"><a href="#DBMS三模式，两级影响结构如何保证数据独立性" class="headerlink" title="DBMS三模式，两级影响结构如何保证数据独立性"></a>DBMS三模式，两级影响结构如何保证数据独立性</h3><p>三级模式：外模式，模式，内模式</p><p>两级映像：外模式-模式映像，模式-内模式映像</p><h4 id="如何保证数据独立性"><a href="#如何保证数据独立性" class="headerlink" title="如何保证数据独立性"></a>如何保证数据独立性</h4><p> 数据的逻辑独立性是指应用程序与数据库的逻辑结构之间的相互独立性 由外模式-模式映像保证</p><p> 数据的物理独立性是指应用程序与存储在磁盘上的数据库中数据之间的相互独立性 由模式-内模式映像保证</p><h3 id="DBA的主要职责"><a href="#DBA的主要职责" class="headerlink" title="DBA的主要职责"></a>DBA的主要职责</h3><ol><li>周期性转储数据库，防止灾难发生导致数据库被破坏。</li><li>当系统故障发生时，重启系统并利用日志将数据库中的数据恢复到先前的一致状态;当介质故障发生时，修复或更换存储介质，重启系统并利用转储和日志将数据库中的数据恢复到先前的一致状态</li><li>监视系统的运行，在系统性能下降时，调整物理存储结构，建立必要的索引，确保系统有效运行</li><li>设置必要的审计，监视审计文件</li></ol><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><h3 id="联系的类型"><a href="#联系的类型" class="headerlink" title="联系的类型"></a>联系的类型</h3><h4 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h4><p>如果E1中的每个实体最多与E2中的一个实体相关联，并且E2中的每个实体也最多与E1中的一个实体相关联，则称E1和E2之间联系为一对一联系</p><h4 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h4><h5 id="一对多联系（1-n联系）"><a href="#一对多联系（1-n联系）" class="headerlink" title="一对多联系（1:n联系）"></a>一对多联系（1:n联系）</h5><p>如果E1中的每个实体都可以与E2中任意多个实体相关联，而E2中的每个实体最多与E1中一个实体相关联，则称这种联系为E1到E2的一对多联系 </p><h5 id="多对一联系（n-1联系）"><a href="#多对一联系（n-1联系）" class="headerlink" title="多对一联系（n:1联系）"></a>多对一联系（n:1联系）</h5><p>如果E1中的每个实体最多与E2中的一个实体相关联，而E2中的每个实体都可以与E1中任意多个实体相关联，则称这种联系为E1到E2的多对一联系</p><h4 id="多对多联系（m-n联系）"><a href="#多对多联系（m-n联系）" class="headerlink" title="多对多联系（m:n联系）"></a>多对多联系（m:n联系）</h4><p>如果E1中的每个实体都可以与E2中任意多个实体相关联，并且E2中的每个实体也可以与E1中任意多个实体相关联，则称E1和E2之间联系为多对多联系 例如，学生和课程之间的联系“选修”就是多对多联系</p><h3 id="针对具体应用能设计出系统的ER图"><a href="#针对具体应用能设计出系统的ER图" class="headerlink" title="针对具体应用能设计出系统的ER图"></a>针对具体应用能设计出系统的ER图</h3><p><a href="https://www.cnblogs.com/vvlj/p/12750674.html">例子</a></p><h2 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h2><p>实体&#x2F;参照完整性内容及运用（判断两个表是否违反参照完整性）</p><p>ER图向关系模型的转换，码的确定</p><p>掌握关系代数的基本和附加运算，能用关系代数表示查询,扩展运算，分组聚集运算也需要看一下</p><p>自然，等值连接的区别和连接后的结果</p><h3 id="实体-参照完整性内容及运用"><a href="#实体-参照完整性内容及运用" class="headerlink" title="实体&#x2F;参照完整性内容及运用"></a>实体&#x2F;参照完整性内容及运用</h3><h3 id="ER图转换为关系模式："><a href="#ER图转换为关系模式：" class="headerlink" title="ER图转换为关系模式："></a>ER图转换为关系模式：</h3><h4 id="对联系集的处理："><a href="#对联系集的处理：" class="headerlink" title="对联系集的处理："></a>对联系集的处理：</h4><ul><li>联系是一对一的，则每个实体集的码都是关系的码</li><li>联系是一对多（多对一）的，则“多端”实体集的码构成关系的码</li><li>联系是多对多的，则参与联系的所有实体集的码组合成关系的码</li></ul><ul><li><a href="https://blog.csdn.net/m0_65621953/article/details/125190581">实例</a></li><li><a href="https://zhuanlan.zhihu.com/p/359465552">实例+教程</a><br><img src="/../img/guanximoshi.png" alt="image"></li></ul><h3 id="关系代数"><a href="#关系代数" class="headerlink" title="关系代数:"></a>关系代数:</h3><h4 id="然连接和等值链接的区别"><a href="#然连接和等值链接的区别" class="headerlink" title="然连接和等值链接的区别:"></a>然连接和等值链接的区别:</h4><ol><li>自然连接一定是等值连接，但等值连接不一定是自然连接。</li><li>等值连接要求相等的分量，不一定是公共属性；而自然连接要求相等的分量必须是公共属性。</li><li>等值连接不把重复的属性除去；而自然连接要把重复的属性除去。</li></ol><h4 id="例题"><a href="#例题" class="headerlink" title="例题:"></a>例题:</h4><p><img src="/../img/guanxidaishu.png" alt="image"></p><h5 id="简单"><a href="#简单" class="headerlink" title="简单"></a>简单</h5><ol><li>列出系编号为MA（数学系）的所有学生的详细信息</li><li>列出所有课程的课程号、课程名和学分</li><li>列出年龄不超过45岁的所有副教授的姓名、性别和年龄。</li><li>列出选修了课程号为CS201的课程的所有学生的学号。</li></ol><h5 id="复杂"><a href="#复杂" class="headerlink" title="复杂"></a>复杂</h5><ol><li>列出选修了课程号为CS201的课程的所有学生的学号和姓名。</li><li>列出每个学生选修的每门课程的成绩，要求列出的学号、姓名、课程名和成绩。</li><li>求评估得分高于90分的教师所在院系名称、教师姓名、课程名和评估得分（TCscore）。</li><li>除运算RS适合于包含短语“S中全部（所有）”的查询。</li><li>列出所有选修了全部课程的学生的学号和姓名。</li></ol><h2 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h2><p>SQL的五个特点</p><p>用SQL创建基本表和索引</p><p>SELECT实现查询</p><p>数据更新（INSERT DELETE UPDATE）</p><p>视图的作用（4个）视图的定义SQL语句，基于视图的查询更新</p><h3 id="SQL的五个特点"><a href="#SQL的五个特点" class="headerlink" title="SQL的五个特点"></a>SQL的五个特点</h3><p>集多种数据库语言于一体 </p><p>高度非过程化 </p><p>面向集合的操作方式  </p><p>一种语法两种使用方式 </p><p>功能强大，语言简洁 </p><h3 id="符号约定"><a href="#符号约定" class="headerlink" title="符号约定"></a>符号约定</h3><ol><li><X>表示X是需要进一步定义或说明语言成分</li><li>[X]表示X可以缺省或出现一次</li><li>{X}表示X可以出现一次</li><li>X | Y表示或者X出现，或者Y出现，但二者不能同时出现</li><li>SQL语言的保留字（如CREATE）不区分大小写。为醒目起见，对于SQL语句中的SQL的保留字，我们使用大写</li></ol><h3 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h3><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">CREATE</span> SCHEMA <span class="hljs-operator">&lt;</span>模式名<span class="hljs-operator">&gt;</span> [<span class="hljs-operator">&lt;</span>模式元素<span class="hljs-operator">&gt;</span>…]<br></code></pre></td></tr></table></figure><ul><li>创建一个以&lt;模式名&gt;命名的模式，并可以在创建模式的同时为该模式创建或不创建模式元素</li><li>&lt;模式元素&gt;可以是表定义、视图定义、断言定义、授权定义等</li><li>这种格式没有授权其他用户访问创建的模式，以后可以用授权语句授权<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">CREATE</span> SCHEMA [<span class="hljs-operator">&lt;</span>模式名<span class="hljs-operator">&gt;</span>] <span class="hljs-keyword">AUTHORIZATION</span> <span class="hljs-operator">&lt;</span>用户名<span class="hljs-operator">&gt;</span> [<span class="hljs-operator">&lt;</span>模式元素<span class="hljs-operator">&gt;</span>…]<br></code></pre></td></tr></table></figure></li><li>与第一种的区别在于它将创建的模式授权予&lt;用户名&gt;指定的用户</li><li>当&lt;模式名&gt;缺省时，用&lt;用户名&gt;作为模式名</li></ul><h5 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h5><p><img src="/../img/chuangjianmoshi.png" alt="创建模式"></p><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">DROP</span> SCHEMA <span class="hljs-operator">&lt;</span>模式名<span class="hljs-operator">&gt;</span> CASCADE∣RESTRICT <br></code></pre></td></tr></table></figure><ul><li>CASCADE，则删除&lt;模式名&gt;指定模式得同时并删除该模式中的所有数据库对象（基本表、视图、断言等）</li><li>RESTRICT，则仅当&lt;模式名&gt;指定的模式不包含任何数据库对象时才删除指定的模式，否则拒绝删除</li></ul><h5 id="例题-2"><a href="#例题-2" class="headerlink" title="例题"></a>例题</h5><p>删除一个模式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">DROP</span> SCHEMA Supply_schema RESTRICT<br><span class="hljs-comment">/*仅当模式Supply_schema中不包含任何数据库对象时，才删除模式Supply_schema，否则什么也不做。而*/</span><br><span class="hljs-keyword">DROP</span> SCHEMA Supply_schema CASCADE<br><span class="hljs-comment">/*将直接删除模式Supply_schema，并同时删除该模式中所有的数据库对象&#x27;*/</span><br></code></pre></td></tr></table></figure><h3 id="表"><a href="#表" class="headerlink" title="表"></a>表</h3><h4 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs SQL"> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-operator">&lt;</span>表名<span class="hljs-operator">&gt;</span> <br>(<span class="hljs-operator">&lt;</span>列名<span class="hljs-operator">&gt;</span><span class="hljs-operator">&lt;</span>数据类型<span class="hljs-operator">&gt;</span> [<span class="hljs-keyword">DEFAULT</span> <span class="hljs-operator">&lt;</span>缺省值<span class="hljs-operator">&gt;</span>] [列级约束定义],<br><span class="hljs-operator">&lt;</span>列名<span class="hljs-operator">&gt;</span><span class="hljs-operator">&lt;</span>数据类型<span class="hljs-operator">&gt;</span> [<span class="hljs-keyword">DEFAULT</span> <span class="hljs-operator">&lt;</span>缺省值<span class="hljs-operator">&gt;</span>] [列级约束定义],<br> …, <br>[<span class="hljs-operator">&lt;</span>表级约束定义<span class="hljs-operator">&gt;</span>, …, <span class="hljs-operator">&lt;</span>表级约束定义<span class="hljs-operator">&gt;</span>])；<br></code></pre></td></tr></table></figure><h5 id="列级约束"><a href="#列级约束" class="headerlink" title="列级约束"></a>列级约束</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL">[<span class="hljs-keyword">CONSTRAINT</span> <span class="hljs-operator">&lt;</span>约束名<span class="hljs-operator">&gt;</span>] <span class="hljs-operator">&lt;</span>列约束<span class="hljs-operator">&gt;</span> <br></code></pre></td></tr></table></figure><h6 id="约束名取值"><a href="#约束名取值" class="headerlink" title="约束名取值:"></a>约束名取值:</h6><ul><li>NOT NULL：不允许该列取空值；不加NOT NULL限制时，该列可以取空值</li><li>PRIMARY KEY：指明该列是主码，其值非空、惟一</li><li>UNIQUE：该列上的值必须惟一。这相当于说明该列为候选码</li><li>CHECK (&lt;条件&gt;)：指明该列的值必须满足的条件，其中&lt;条件&gt;是一个涉及该列的布尔表达式</li></ul><h5 id="表级约束"><a href="#表级约束" class="headerlink" title="表级约束"></a>表级约束</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL">[<span class="hljs-keyword">CONSTRAINT</span> <span class="hljs-operator">&lt;</span>约束名<span class="hljs-operator">&gt;</span>] <span class="hljs-operator">&lt;</span>表约束<span class="hljs-operator">&gt;</span> <br></code></pre></td></tr></table></figure><h6 id="约束名取值-1"><a href="#约束名取值-1" class="headerlink" title="约束名取值:"></a>约束名取值:</h6><ul><li>PRIMARY KEY (A1, …, Ak)：说明属性列A1, …, Ak构成该关系的主码</li><li>UNIQUE (A1, …, Ak)：说明属性列A1, …, Ak上的值必须惟一，这相当于说明A1, …, Ak构成该关系的候选码</li><li>CHECK (&lt;条件&gt;)：说明该表上的一个完整性约束条件</li><li>FOREIGN KEY (A1, …, Ak) REFERENCES &lt;外表名&gt; (&lt;外表主码&gt;) [&lt;参照触发动作&gt;]</li></ul><h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><ol><li>创建一个Teachers表<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> Teachers（<br>Tno <span class="hljs-type">CHAR</span> (<span class="hljs-number">7</span>)   <span class="hljs-keyword">PRIMARY</span> KEY,<br>Tname<span class="hljs-type">CHAR</span> (<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,     <br>Sex <span class="hljs-type">CHAR</span> (<span class="hljs-number">2</span>)   <span class="hljs-keyword">CHECK</span> (Sex<span class="hljs-operator">=</span> ‘男’ <span class="hljs-keyword">OR</span> Sex<span class="hljs-operator">=</span> ‘女’),     <br>Birthday<span class="hljs-type">DATE</span>,        <br>Title<span class="hljs-type">CHAR</span> (<span class="hljs-number">6</span>),<br>Dno<span class="hljs-type">CHAR</span> (<span class="hljs-number">4</span>),<br><span class="hljs-keyword">FOREIGN</span> KEY (Dno) <span class="hljs-keyword">REFERENCES</span> Departments (Dno)<br>);<br></code></pre></td></tr></table></figure></li><li>创建选课表SC:<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> SC (<br>Sno     <span class="hljs-type">CHAR</span> (<span class="hljs-number">9</span>),<br>Cno     <span class="hljs-type">CHAR</span> (<span class="hljs-number">5</span>),<br>Grade  <span class="hljs-type">SMALLINT</span> <span class="hljs-keyword">CHECK</span> (Grade<span class="hljs-operator">&gt;=</span><span class="hljs-number">0</span> <span class="hljs-keyword">AND</span> Grade<span class="hljs-operator">&lt;=</span><span class="hljs-number">100</span>),<br><span class="hljs-keyword">PRIMARY</span> KEY (Sno,Cno),<br><span class="hljs-keyword">FOREIGN</span> KEY (Sno) <span class="hljs-keyword">REFERENCES</span> Students (Sno),<br><span class="hljs-keyword">FOREIGN</span> KEY (Cno) <span class="hljs-keyword">REFERENCES</span> Courses (Cno)<br>);<br></code></pre></td></tr></table></figure></li></ol><h4 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs SQL"> <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-operator">&lt;</span>表名<span class="hljs-operator">&gt;</span><br>[<span class="hljs-keyword">ADD</span> [<span class="hljs-keyword">COLUMN</span>] <span class="hljs-operator">&lt;</span>列名<span class="hljs-operator">&gt;</span><span class="hljs-operator">&lt;</span>数据类型<span class="hljs-operator">&gt;</span>[列级约束定义]]<br>[<span class="hljs-keyword">ALTER</span> [<span class="hljs-keyword">COLUMN</span>] <span class="hljs-operator">&lt;</span>列名<span class="hljs-operator">&gt;</span> &#123;<span class="hljs-keyword">SET</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-operator">&lt;</span>缺省值<span class="hljs-operator">&gt;</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">DEFAULT</span>&#125;]<br>[<span class="hljs-keyword">DROP</span> [ <span class="hljs-keyword">COLUMN</span> ] <span class="hljs-operator">&lt;</span>列名<span class="hljs-operator">&gt;</span> &#123;CASCADE <span class="hljs-operator">|</span> RESTRICT&#125;]<br>[<span class="hljs-keyword">ADD</span> <span class="hljs-operator">&lt;</span>表约束定义<span class="hljs-operator">&gt;</span>]<br>[<span class="hljs-keyword">DROP</span> <span class="hljs-keyword">CONSTRAINT</span> <span class="hljs-operator">&lt;</span>约束名<span class="hljs-operator">&gt;</span>&#123;CASCADE <span class="hljs-operator">|</span> RESTRICT&#125;]<br></code></pre></td></tr></table></figure><h5 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h5><ol><li>在Courses中增加一个新列Pno，表示课程的先行课的课程号<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> Courses <span class="hljs-keyword">ADD</span> Pno <span class="hljs-type">CHAR</span> (<span class="hljs-number">5</span>); <br></code></pre></td></tr></table></figure></li><li>在Students的Sex列设置缺省值“女”可以减少大约一半学生性别的输入<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> Students <span class="hljs-keyword">ALTER</span> Sex <span class="hljs-keyword">SET</span> <span class="hljs-keyword">DEFAULT</span> ‘女’;<br></code></pre></td></tr></table></figure></li><li>删除Sex上的缺省值可以用<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> Students <span class="hljs-keyword">ALTER</span> Sex <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">DEFAULT</span>;<br></code></pre></td></tr></table></figure></li><li>删除Courses中的Pno列可以用<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> Courses <span class="hljs-keyword">DROP</span> Pno;<br></code></pre></td></tr></table></figure></li></ol><h4 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-operator">&lt;</span>表名<span class="hljs-operator">&gt;</span> &#123;CASCADE∣RESTRICT&#125;<br></code></pre></td></tr></table></figure><ol><li>其中CASCADE表示及联删除，依赖于表的数据对象（最常见的是视图）也将一同被删除</li><li>RESTRICT表示受限删除，如果基于该表定义有视图，或者有其他表引用该表（如CHECK、FOREIGN KEY等约束），或者该表有触发器、存储过程或函数等，则不能删除</li></ol><h5 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h5><p>如果用如下语句删除SC表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> SC RESTRICT;<br></code></pre></td></tr></table></figure><p>仅当没有依赖于SC的任何数据库对象删除才能成功。</p><p>如果用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> SC CASCADE;<br></code></pre></td></tr></table></figure><p>则表SC和依赖于它的数据库对象都被彻底删除。</p><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><h4 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">CREATE</span> [<span class="hljs-keyword">UNIQUE</span>] [CLUSTER] INDEX <span class="hljs-operator">&lt;</span>索引名<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">ON</span> <span class="hljs-operator">&lt;</span>表名<span class="hljs-operator">&gt;</span> (<span class="hljs-operator">&lt;</span>列名<span class="hljs-operator">&gt;</span> [<span class="hljs-operator">&lt;</span>次序<span class="hljs-operator">&gt;</span>]&#123;,<span class="hljs-operator">&lt;</span>列名<span class="hljs-operator">&gt;</span> [<span class="hljs-operator">&lt;</span>次序<span class="hljs-operator">&gt;</span>]&#125;)<br><span class="hljs-comment">-- UNIQUE缺省时，创建的是非唯一性索引</span><br><span class="hljs-comment">-- CLUSTER缺省时是非聚簇索引</span><br></code></pre></td></tr></table></figure><ol><li>&lt;索引名&gt;为建立的索引命名</li><li>&lt;表名&gt;是要建立索引的基本表的名字</li><li>索引可以建在该表的一列或多列上，各列名间用逗号分隔；每个列名后可以用&lt;次序&gt;指定索引值的排列次序</li><li>次序可以是ASC（升序）和DESC（降序），缺省为ASC</li></ol><h5 id="例题-3"><a href="#例题-3" class="headerlink" title="例题"></a>例题</h5><p>在Students的Dno上创建一个名为Student_Dept的索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">CREATE</span> INDEX Student_Dept <span class="hljs-keyword">ON</span> Students (Dno);<br></code></pre></td></tr></table></figure><p> 在Teachers上的Dno创建一个名为Teacher-Dept的聚簇索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">CREATE</span> CLUSTER INDEX Teacher_Dept <span class="hljs-keyword">ON</span> Teachers (Dno);<br></code></pre></td></tr></table></figure><p>注意：学生流动性比较大，Students更新频繁，不适合创建聚簇索引；而教师相对稳定，可以考虑按所在院系在Teachers上创建聚簇索引</p><h4 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">DROP</span> INDEX <span class="hljs-operator">&lt;</span>索引名<span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><h3 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> [<span class="hljs-keyword">ALL</span>︱<span class="hljs-keyword">DISTINCT</span>] <span class="hljs-operator">&lt;</span>选择序列<span class="hljs-operator">&gt;</span><br><span class="hljs-keyword">FROM</span> <span class="hljs-operator">&lt;</span>表引用<span class="hljs-operator">&gt;</span>, …, <span class="hljs-operator">&lt;</span>表引用<span class="hljs-operator">&gt;</span><br>[<span class="hljs-keyword">WHERE</span> <span class="hljs-operator">&lt;</span>查询条件<span class="hljs-operator">&gt;</span>]<br>[<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> <span class="hljs-operator">&lt;</span>分组列<span class="hljs-operator">&gt;</span> &#123;,<span class="hljs-operator">&lt;</span>分组列<span class="hljs-operator">&gt;</span>&#125; [<span class="hljs-keyword">HAVING</span> <span class="hljs-operator">&lt;</span>分组选择条件<span class="hljs-operator">&gt;</span>]]<br>[<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-operator">&lt;</span>排序列<span class="hljs-operator">&gt;</span> [<span class="hljs-keyword">ASC</span>︱<span class="hljs-keyword">DESC</span>] &#123;, <span class="hljs-operator">&lt;</span>排序列<span class="hljs-operator">&gt;</span> [<span class="hljs-keyword">ASC</span>︱<span class="hljs-keyword">DESC</span>]&#125;]<br></code></pre></td></tr></table></figure><ol><li>SELECT后可以使用集合量词ALL或DISTINCT，缺省时为ALL</li><li>ALL不删除结果的重复行，而DISTINCT将删除结果中的重复行</li><li>ALL或DISTINCT作用于所有列而不是一个列</li></ol><h4 id="不带WHERE的简单查询"><a href="#不带WHERE的简单查询" class="headerlink" title="不带WHERE的简单查询"></a>不带WHERE的简单查询</h4><h5 id="例子-3"><a href="#例子-3" class="headerlink" title="例子"></a>例子</h5><p>查询所有课程的信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> Courses;<br></code></pre></td></tr></table></figure><p>假设我们定义了一个函数year(d)（在后面的例子中，我们也使用这个函数），它返回DATE类型的参数d中的年份。下面的语句将显示每位学生的年龄：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> Sname, <span class="hljs-number">2021</span>﹣<span class="hljs-keyword">year</span>(Birthday) <span class="hljs-keyword">AS</span> Age<br><span class="hljs-comment">--用Age对表达式重新命名</span><br><span class="hljs-keyword">FROM</span> Students;<br></code></pre></td></tr></table></figure><p>显示所有学生的不同年龄：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> <span class="hljs-number">2017</span>﹣<span class="hljs-keyword">year</span>(Birthday) Age<br><span class="hljs-keyword">FROM</span> Students;<br></code></pre></td></tr></table></figure><h4 id="带WHERE的查询"><a href="#带WHERE的查询" class="headerlink" title="带WHERE的查询"></a>带WHERE的查询</h4><p><img src="/../img/wherechaxun.png" alt="where"><br> &lt;值表达式1&gt; $\theta$ &lt;值表达式2&gt;<br> 其中$\theta$是比较运算符（&lt;、&lt;&#x3D;、&gt;、&gt;&#x3D;、&#x3D;、&lt;&gt;或!&#x3D;)，&lt;值表达式1&gt;和&lt;值表达式2&gt;都是可求值的表达式，并且它们的值可以进行比较。通常，这些值表达式是常量、属性和函数。比较表达式根据比较关系是否成立产生真假值</p><h5 id="例子-4"><a href="#例子-4" class="headerlink" title="例子"></a>例子</h5><h6 id="不使用BETWEEN，IN"><a href="#不使用BETWEEN，IN" class="headerlink" title="不使用BETWEEN，IN"></a>不使用BETWEEN，IN</h6><ol><li>查询职称（Title）为讲师的全体教师的姓名和性别。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> Tname, Sex<br><span class="hljs-keyword">FROM</span> Teachers<br><span class="hljs-keyword">WHERE</span> Title <span class="hljs-operator">=</span> ‘讲师’; <br></code></pre></td></tr></table></figure></li><li>查询考试成绩不及格的学生的学号。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> DISTIINCT Sno<br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">WHERE</span> Grade<span class="hljs-operator">&lt;</span><span class="hljs-number">60</span>;<br></code></pre></td></tr></table></figure></li></ol><h6 id="使用BETWEEN"><a href="#使用BETWEEN" class="headerlink" title="使用BETWEEN"></a>使用BETWEEN</h6><ol><li>查询出生年份在1997～1999年之间的学生的姓名和专业。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> Sname, Speciality<br><span class="hljs-keyword">FROM</span> Students<br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">year</span>(Birthday) <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">1997</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">1999</span>;<br><span class="hljs-comment">--若不使用BETWEEN</span><br><span class="hljs-keyword">SELECT</span> Sname, Speciality<br><span class="hljs-keyword">FROM</span> Students<br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">year</span>(Birthday)<span class="hljs-operator">&gt;=</span><span class="hljs-number">1997</span> <span class="hljs-keyword">AND</span> <span class="hljs-keyword">year</span>(Birthday)<span class="hljs-operator">&lt;=</span><span class="hljs-number">1999</span>;<br></code></pre></td></tr></table></figure></li><li>查询出生年份不在1997～1999年之间的学生的姓名和专业<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> Sname, Speciality<br><span class="hljs-keyword">FROM</span> Students<br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">year</span>(Birthday) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">1997</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">1999</span>;<br><span class="hljs-comment">--若不使用BETWEEN</span><br><span class="hljs-keyword">SELECT</span> Sname, Speciality<br><span class="hljs-keyword">FROM</span> Students<br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">year</span>(Birthday)<span class="hljs-operator">&lt;</span><span class="hljs-number">1997</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">year</span>(Birthday)<span class="hljs-operator">&gt;</span><span class="hljs-number">1999</span>; <br></code></pre></td></tr></table></figure></li></ol><h6 id="使用IN"><a href="#使用IN" class="headerlink" title="使用IN"></a>使用IN</h6><ol><li>查询计算机科学与技术和软件工程专业的学生的学号和姓名<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> Sno, Sname<br><span class="hljs-keyword">FROM</span> Students<br><span class="hljs-keyword">WHERE</span> Speciality <span class="hljs-keyword">IN</span> (‘计算机科学与技术’, ‘软件工程’)<br></code></pre></td></tr></table></figure></li><li>查询既不是计算机科学与技术，也不是软件工程专业的学生的学号和姓名<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> Sno, Sname<br><span class="hljs-keyword">FROM</span> Students<br><span class="hljs-keyword">WHERE</span> Speciality <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span> (‘计算机科学与技术’, ‘软件工程’); <br></code></pre></td></tr></table></figure></li></ol><h6 id="使用LIKE"><a href="#使用LIKE" class="headerlink" title="使用LIKE"></a>使用LIKE</h6><p>LIKE表达式允许进行模糊查询</p><ul><li>LIKE表达式的一般形式为：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL">[<span class="hljs-keyword">NOT</span>] <span class="hljs-keyword">LIKE</span> <span class="hljs-operator">&lt;</span>匹配串<span class="hljs-operator">&gt;</span> [<span class="hljs-keyword">ESCAPE</span> ‘<span class="hljs-operator">&lt;</span>换码字符<span class="hljs-operator">&gt;</span>’]<br></code></pre></td></tr></table></figure></li><li>其中，&lt;匹配串&gt;是给定的字符串常量，允许使用通配符。有两种通配符：</li><li>“_”（下横线）可以与任意单个字符匹配</li><li>“%”可以与零个或多个任意字符匹配</li><li>ESCAPE ‘&lt;换码字符&gt;’用于定义转义字符，将紧随其后的一个字符转义</li></ul><ol><li>查询所有以“数据”开头的课程名。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> Cname<br><span class="hljs-keyword">FROM</span> Courses<br><span class="hljs-keyword">WHERE</span> Cname <span class="hljs-keyword">LIKE</span> ‘数据<span class="hljs-operator">%</span>’;<br></code></pre></td></tr></table></figure></li><li>查询姓李并且姓名只有两个汉字的学生的学号和姓名。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> Sno, Sname<br><span class="hljs-keyword">FROM</span> Students<br><span class="hljs-keyword">WHERE</span> Sname <span class="hljs-keyword">LIKE</span> ‘李_ _’;  <br><span class="hljs-comment">--注意：一个汉字占两个字符位置</span><br></code></pre></td></tr></table></figure></li><li>查询以C_打头的课程的详细信息。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-comment">--由于通配符“_”出现在模式中，我们需要使用转义字符将它转义。该查询可以用如下语句实现：</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span>  <span class="hljs-keyword">FROM</span> Courses<br><span class="hljs-keyword">WHERE</span> Cname <span class="hljs-keyword">LIKE</span> ‘C\_<span class="hljs-operator">%</span>’ <span class="hljs-keyword">ESCAPE</span> ‘\’;<br><span class="hljs-comment">--其中，ESCAPE 短语定义“\”为转义字符，模式‘C\_%’中的“_”被转义，不再取通配符含义，而是取字面意义。</span><br><span class="hljs-comment">--注意：‘C\_%’中的“%”仍然是通配符，因为转义字符只对紧随其后的一个字符转义</span><br></code></pre></td></tr></table></figure></li></ol><h6 id="NULL表达式"><a href="#NULL表达式" class="headerlink" title="NULL表达式"></a>NULL表达式</h6><p>查询成绩为空的学生的学号和课程号</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> Sno, Cno<br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">WHERE</span> Grade <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>;<br></code></pre></td></tr></table></figure><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><p> ORDER BY子句可以将查询结果按一定次序显示，其一般形式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-operator">&lt;</span>排序列<span class="hljs-operator">&gt;</span> [<span class="hljs-keyword">ASC</span>︱<span class="hljs-keyword">DESC</span>] &#123;, <span class="hljs-operator">&lt;</span>排序列<span class="hljs-operator">&gt;</span> [<span class="hljs-keyword">ASC</span>︱<span class="hljs-keyword">DESC</span>]&#125;<br></code></pre></td></tr></table></figure><ol><li>其中，&lt;排序列&gt;是必须出现在SELECT子句中的属性名或属性的别名</li><li>ORDER BY后可以有一个或多个&lt;排序列&gt;，中间用逗号隔开</li><li>每个&lt;排序列&gt;都可以独立指定按升序（ASC）还是按降序（DESC）排序，缺省时为升序</li><li>如果指定多个&lt;排序列&gt;，则查询结果按指定的次序，首先按第一个&lt;排序列&gt;的值排序，第一个&lt;排序列&gt;值相同的结果元组按第二个&lt;排序列&gt;的值排序，如此下去</li><li>查询每位学生CS202课程的成绩，并将查询结果按成绩降序排序<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span>  <span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">WHERE</span> Cno<span class="hljs-operator">=</span>’CS202’<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> Grade <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure></li><li>查询每位学生的每门课程的成绩，并将查询结果按课程号升序、成绩降序排序<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span>  <span class="hljs-keyword">FROM</span> SC <br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> Cno, Grade <span class="hljs-keyword">DESC</span>; <br></code></pre></td></tr></table></figure></li></ol><h4 id="聚集"><a href="#聚集" class="headerlink" title="聚集"></a>聚集</h4><p><img src="/../img/jujihanshu.png" alt="jujihanshu"></p><ol><li>查询选修了CS102课程的学生的人数<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span> (<span class="hljs-operator">*</span>)<br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">WHERE</span> Cno <span class="hljs-operator">=</span> ‘CS102’;<br></code></pre></td></tr></table></figure></li><li>查询CS302课程成绩最低分、平均分和最高分<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MIN</span> (Grade), <span class="hljs-built_in">AVG</span> (Grade), <span class="hljs-built_in">MAX</span> (Grade)<br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">WHERE</span> Cno <span class="hljs-operator">=</span> ‘CS302’;<br></code></pre></td></tr></table></figure></li></ol><h4 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> <span class="hljs-operator">&lt;</span>分组列<span class="hljs-operator">&gt;</span> &#123;,<span class="hljs-operator">&lt;</span>分组列<span class="hljs-operator">&gt;</span>&#125; [<span class="hljs-keyword">HAVING</span> <span class="hljs-operator">&lt;</span>分组选择条件<span class="hljs-operator">&gt;</span>]<br></code></pre></td></tr></table></figure><ul><li>其中，&lt;分组列&gt;是属性（可以带表名前缀），它所在的表出现在FROM子句中</li><li>可选的HAVING子句用来过滤掉不满足&lt;分组选择条件&gt;的分组，缺省时等价于HAVING TRUE</li><li>&lt;分组选择条件&gt;类似于WHERE子句的查询条件，但其中允许出现聚集函数</li><li>对于带GROUP BY子句的SELECT语句，SELECT子句中的结果列必须是GROUP BY子句中的&lt;分组列&gt;或聚集函数</li><li>分组语句细化了聚集函数作用的作用对象</li></ul><ol><li>查询每个学生的平均成绩，输出学生的学号和平均成绩。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> Sno, <span class="hljs-built_in">AVG</span> (Grade)<br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> Sno; <br></code></pre></td></tr></table></figure></li><li>查询每个学生的平均成绩，并输出平均成绩大于85的学生学号和平均成绩。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> Sno, <span class="hljs-built_in">AVG</span> (Grade)<br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> Sno <span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">AVG</span> (Grade)<span class="hljs-operator">&gt;</span><span class="hljs-number">85</span>; <br></code></pre></td></tr></table></figure></li></ol><h4 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h4><ol><li>查询学号为201705001的学生的各科成绩，对每门课程显示课程名和成绩。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> Cname, Grade<br><span class="hljs-keyword">FROM</span> SC, Courses<br><span class="hljs-keyword">WHERE</span> SC.Cno<span class="hljs-operator">=</span>Courses.Cno <span class="hljs-keyword">AND</span> Sno <span class="hljs-operator">=</span> ‘<span class="hljs-number">201705001</span>’<br></code></pre></td></tr></table></figure></li><li>查询选修CS202课程，并且成绩在90分以上的所有学生的学号、姓名和成绩。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> Students.Sno, Sname, Grade<br><span class="hljs-keyword">FROM</span> Students, SC<br><span class="hljs-keyword">WHERE</span> Students.Sno <span class="hljs-operator">=</span> SC.Sno <span class="hljs-keyword">AND</span> Cno<span class="hljs-operator">=</span> ‘CS202’ <span class="hljs-keyword">AND</span> Grade<span class="hljs-operator">&gt;</span><span class="hljs-number">90</span>； <br></code></pre></td></tr></table></figure></li><li>查询每个学生选修的每门课程的成绩，要求列出学号、姓名、课程名和成绩。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> Student.Sno, Sname, Cname, Grade<br><span class="hljs-keyword">FROM</span> Students, SC, Courses<br><span class="hljs-keyword">WHERE</span> Students.Sno <span class="hljs-operator">=</span> SC. Sno <span class="hljs-keyword">AND</span> SC.Cno <span class="hljs-operator">=</span> Courses. Cno;<br></code></pre></td></tr></table></figure></li><li>查询每个学生的平均成绩，并输出平均成绩大于85的学生学号、姓名和平均成绩。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> Student.Sno, Sname, <span class="hljs-built_in">AVG</span> (Grade)<br><span class="hljs-keyword">FROM</span> SC, Students<br><span class="hljs-keyword">WHERE</span> Students.Sno <span class="hljs-operator">=</span> SC. Sno <br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> Students.Sno, Sname <br><span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">AVG</span> (Grade)<span class="hljs-operator">&gt;</span><span class="hljs-number">85</span>;<br></code></pre></td></tr></table></figure></li><li>查询和林艳出生年份相同的学生的姓名<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> S2.Sname<br><span class="hljs-keyword">FROM</span> Students S1, Students S2<br><span class="hljs-keyword">WHERE</span> S1.Birthday<span class="hljs-operator">=</span>S2.Birthday <span class="hljs-keyword">AND</span> <br>S1.Sname<span class="hljs-operator">=</span>’林艳’ <span class="hljs-keyword">AND</span> S2.Sname<span class="hljs-operator">&lt;&gt;</span>’林艳’;<br></code></pre></td></tr></table></figure></li></ol><h4 id="嵌套查询"><a href="#嵌套查询" class="headerlink" title="嵌套查询"></a>嵌套查询</h4><h5 id="IN"><a href="#IN" class="headerlink" title="IN"></a>IN</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-operator">&lt;</span>元组<span class="hljs-operator">&gt;</span> [<span class="hljs-keyword">NOT</span>] <span class="hljs-keyword">IN</span> <span class="hljs-operator">&lt;</span>子查询<span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><p>查询和林艳在同一个专业学习的女生学号和姓名。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> Sno, Sname<br><span class="hljs-keyword">FROM</span> Students<br><span class="hljs-keyword">WHERE</span> Sex <span class="hljs-operator">=</span> ‘女’ <span class="hljs-keyword">AND</span> Speciality <span class="hljs-keyword">IN</span><br>   (<span class="hljs-keyword">SELECT</span> Speciality<br>    <span class="hljs-keyword">FROM</span> Students<br>    <span class="hljs-keyword">WHERE</span> Sname <span class="hljs-operator">=</span> ‘林艳’);<br></code></pre></td></tr></table></figure><h5 id="值表达式"><a href="#值表达式" class="headerlink" title="值表达式"></a>值表达式</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-operator">&lt;</span>值表达式<span class="hljs-operator">&gt;</span>  <span class="hljs-keyword">ALL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">SOME</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">ANY</span> <span class="hljs-operator">&lt;</span>子查询<span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><p>查询比软件工程专业所有学生都小其他专业的学生的学号、姓名、专业和出生日期。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> Sno, Sname, Speciality, <span class="hljs-keyword">year</span>(Birthday)<br><span class="hljs-keyword">FROM</span> Students<br><span class="hljs-keyword">WHERE</span> Speciality <span class="hljs-operator">&lt;&gt;</span>‘软件工程’ <span class="hljs-keyword">AND</span><br><span class="hljs-keyword">year</span>(Birthday)<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">ALL</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">year</span>(Birthday)<br>                      <span class="hljs-keyword">FROM</span> Students<br>                      <span class="hljs-keyword">WHERE</span> Speciality <span class="hljs-operator">=</span> ‘软件工程’);<br></code></pre></td></tr></table></figure><h5 id="聚集函数"><a href="#聚集函数" class="headerlink" title="聚集函数"></a>聚集函数</h5><p>这可以使用聚集函数实现：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> Sno, Sname, Speciality, <span class="hljs-keyword">year</span>(Birthday)<br><span class="hljs-keyword">FROM</span> Students<br><span class="hljs-keyword">WHERE</span> Speciality <span class="hljs-operator">&lt;&gt;</span>‘软件工程’ <span class="hljs-keyword">AND</span><br><span class="hljs-keyword">year</span>(Birthday)<span class="hljs-operator">&gt;</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MAX</span>(<span class="hljs-keyword">year</span>(Birthday))<br>                  <span class="hljs-keyword">FROM</span> Students<br>                  <span class="hljs-keyword">WHERE</span> Speciality <span class="hljs-operator">=</span> ‘软件工程’);<br></code></pre></td></tr></table></figure><p>查询平均成绩最高的课程的课程号和平均成绩。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> Cno, <span class="hljs-built_in">AVG</span>(Grade)<br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> Cno<br><span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">AVG</span>(Grade) <span class="hljs-operator">&gt;=</span> <span class="hljs-keyword">ALL</span> ( <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(Grade)<br>           <span class="hljs-keyword">FROM</span> SC<br>                                     <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> Cno );<br></code></pre></td></tr></table></figure><h5 id="存在量词引出的子查询"><a href="#存在量词引出的子查询" class="headerlink" title="存在量词引出的子查询"></a>存在量词引出的子查询</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">EXISTS</span> <span class="hljs-operator">&lt;</span>子查询<span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><p>查询所有选修了CS403课程的学生的学号和姓名。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> Sno, Sname<br><span class="hljs-keyword">FROM</span> Students, SC<br><span class="hljs-keyword">WHERE</span> Students.Sno<span class="hljs-operator">=</span>SC.Sno <span class="hljs-keyword">AND</span> Cno<span class="hljs-operator">=</span>‘CS403’);<br></code></pre></td></tr></table></figure><p> 也可以使用IN引导的嵌套查询来实现：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> Sno, Sname<br><span class="hljs-keyword">FROM</span> Students <br><span class="hljs-keyword">WHERE</span> Sno <span class="hljs-keyword">IN</span><br>(<span class="hljs-keyword">SELECT</span> Sno<br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">WHERE</span> Cno<span class="hljs-operator">=</span>‘CS403’);<br></code></pre></td></tr></table></figure><p>该查询可以用如下语句实现：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> Sno, Sname<br><span class="hljs-keyword">FROM</span> Students S<br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">EXISTS</span><br>(  <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br>   <span class="hljs-keyword">FROM</span> SC<br>   <span class="hljs-keyword">WHERE</span> Sno<span class="hljs-operator">=</span>S.Sno <span class="hljs-keyword">AND</span> Cno<span class="hljs-operator">=</span>‘CS403’  );<br></code></pre></td></tr></table></figure><h5 id="查询全部数据的例子"><a href="#查询全部数据的例子" class="headerlink" title="查询全部数据的例子"></a>查询全部数据的例子</h5><ol><li>查询选修了全部课程的学生的学号和姓名。 <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> Sno, Sname<br><span class="hljs-keyword">FROM</span> Students S<br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> <br>(<span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> Courses C<br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span><br>(<span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">WHERE</span> SC.Sno<span class="hljs-operator">=</span> S.Sno <span class="hljs-keyword">AND</span> SC.Cno<span class="hljs-operator">=</span> C.Cno));<br></code></pre></td></tr></table></figure></li><li>查询至少选修了学号为201615122的学生选修的全部课程的学生的学号和姓名。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> Sno, Sname<br><span class="hljs-keyword">FROM</span> Students S<br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> <br>(<span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> SC SC1<br><span class="hljs-keyword">WHERE</span> SC1.Sno <span class="hljs-operator">=</span> ‘<span class="hljs-number">201615122</span>’ <span class="hljs-keyword">AND</span><br><span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> <br>(<span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> SC SC2<br><span class="hljs-keyword">WHERE</span> SC2.Sno<span class="hljs-operator">=</span>S.Sno <span class="hljs-keyword">AND</span> SC2.Cno<span class="hljs-operator">=</span>SC1.Cno))；<br></code></pre></td></tr></table></figure></li></ol><h3 id="数据更新"><a href="#数据更新" class="headerlink" title="数据更新"></a>数据更新</h3><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> T [(A1, ..., Ak)]  <br><span class="hljs-keyword">VALUES</span> (c1, …, ck)<br></code></pre></td></tr></table></figure><p>例子</p><ol><li><p>将学号为201616010、姓名为司马相如、性别为男、生日为1997-01-28、入校年份为2016年、专业为计算数学、所在院系为MATH的学生元组插入到Students表中。</p></li><li><p>向表SC中插入一个选课记录，登记一个学号为201616010的学生选修了课程号为MA302的课程。</p></li><li><p>设存放就餐卡登记信息关系Cardinf具有如下模式： Cardinf (Card-no, Name, Balance)，其中Card-no为持卡人编号，Name为持卡者姓名，而Balance为卡中余额。假设信息工程学院要为本院每位教师办理一个校内就餐卡，直接用教师号作为持卡人编号，并预存100元。可以用如下INSERT语句插入新的就餐卡信息</p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> Students <br><span class="hljs-keyword">VALUES</span> (‘<span class="hljs-number">201616010</span>’, ‘司马相如’, ‘男’, <span class="hljs-number">1997</span><span class="hljs-number">-01</span><span class="hljs-number">-28</span>, ‘<span class="hljs-number">2006</span>’, ‘计算数学’, ‘MATH’) <br><span class="hljs-comment">--或者</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> Students (Sno, Sname, Sex, Birthday, Enrollyear, Speciality, Dno)<br><span class="hljs-keyword">VALUES</span> (‘<span class="hljs-number">200616010</span>’, ‘司马相如’, ‘男’, <span class="hljs-number">1985</span><span class="hljs-number">-01</span><span class="hljs-number">-28</span>, ‘<span class="hljs-number">2006</span>’, ‘计算数学’, ‘MATH’);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> SC (Sno, Cno) <br><span class="hljs-keyword">VALUES</span> (‘<span class="hljs-number">201616010</span>’, ‘MA302’);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> Cardinf (Card<span class="hljs-operator">-</span><span class="hljs-keyword">no</span>, Name, Balance)<br><span class="hljs-keyword">SELECT</span> Tno, Tname, <span class="hljs-number">100.00</span><br><span class="hljs-keyword">FROM</span> Teachers<br><span class="hljs-keyword">WHERE</span> Dno<span class="hljs-operator">=</span> ‘IE’;<br></code></pre></td></tr></table></figure><h4 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> T [ <span class="hljs-keyword">WHERE</span> <span class="hljs-operator">&lt;</span>删除条件<span class="hljs-operator">&gt;</span> ]<br></code></pre></td></tr></table></figure><p>例子：</p><ol><li><p>单表删除:<br>删除学号为201624010的学生记录可以用。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> Students<br><span class="hljs-keyword">WHERE</span> Sno <span class="hljs-operator">=</span> ‘<span class="hljs-number">201624010</span>’;<br></code></pre></td></tr></table></figure><p>删除所有学生的记录可以用：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> Students; <br></code></pre></td></tr></table></figure></li><li><p>多表删除:<br>删除计算机软件与理论专业的所有学生的选课记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">WHERE</span> Sno <span class="hljs-keyword">IN</span><br>(<span class="hljs-keyword">SELECT</span> Sno<br> <span class="hljs-keyword">FROM</span> Students<br> <span class="hljs-keyword">WHERE</span> Speciality＝‘计算机软件与理论’);<br></code></pre></td></tr></table></figure></li></ol><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> T<br><span class="hljs-keyword">SET</span> A1 <span class="hljs-operator">=</span> e1, …, Ak <span class="hljs-operator">=</span> ek<br>[<span class="hljs-keyword">WHERE</span> <span class="hljs-operator">&lt;</span>修改条件<span class="hljs-operator">&gt;</span> <br></code></pre></td></tr></table></figure><p>例子：</p><ol><li>将职工号为B050041的教师的职称修改为副教授。</li><li>将软件工程课程成绩低于60分的所有学生的软件工程成绩提高5分。</li></ol><p>答案：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> Teachers<br><span class="hljs-keyword">SET</span> Title <span class="hljs-operator">=</span> ‘副教授’<br><span class="hljs-keyword">WHERE</span> Tno <span class="hljs-operator">=</span> ‘B050041’;<br><br><span class="hljs-keyword">UPDATE</span> SC<br><span class="hljs-keyword">SET</span> Grade <span class="hljs-operator">=</span> Grade <span class="hljs-operator">+</span> <span class="hljs-number">5</span><br><span class="hljs-keyword">WHERE</span> Grade<span class="hljs-operator">&lt;</span><span class="hljs-number">60</span> <span class="hljs-keyword">AND</span> Cno <span class="hljs-keyword">IN</span><br> (<span class="hljs-keyword">SELECT</span> Cno<br>  <span class="hljs-keyword">FROM</span> Courses<br>  <span class="hljs-keyword">WHERE</span> Cname＝‘软件工程’); <br></code></pre></td></tr></table></figure><h3 id="视图-1"><a href="#视图-1" class="headerlink" title="视图"></a>视图</h3><h4 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> <span class="hljs-operator">&lt;</span>视图名<span class="hljs-operator">&gt;</span> [ (<span class="hljs-operator">&lt;</span>列名<span class="hljs-operator">&gt;</span> , …, <span class="hljs-operator">&lt;</span>列名<span class="hljs-operator">&gt;</span>)] <span class="hljs-keyword">AS</span> <span class="hljs-operator">&lt;</span>查询表达式<span class="hljs-operator">&gt;</span> <br>[<span class="hljs-keyword">WITH</span> <span class="hljs-keyword">CHECK</span> OPTION]<br></code></pre></td></tr></table></figure><ul><li>&lt;视图名&gt;对视图命名， &lt;列名&gt;为&lt;查询表达式&gt;结果的诸列命名 </li><li>&lt;查询表达式&gt;通常是一个SELECT查询，其中不包含DISTINCT短语和ORDER BY子句 </li><li>WITH CHECK OPTION表示该视图是可更新的，并且对视图进行更新时要满足&lt;查询表达式&gt;的查询条件条件&gt;与SELECT语句中的查询条件类似</li></ul><p>例子：</p><ol><li><p>涉及单表的视图定义<br>建立软件工程专业学生的视图SE_Students，它包含Students中除Speciality之外的所有属性和软件工程专业所有学生的信息。</p></li><li><p>涉及多表的视图定义<br>建立信息工程学院学生选课视图EI_SC，它与SC具有相同属性，但只包含信息工程学院学生的选课记录。</p></li><li><p>源于多表的视图定义<br>建立学生成绩视图Student_Grades，它包含如下属性：学号、学生姓名、课程名和成绩</p></li><li><p>涉及视图的视图定义<br>建立计算机科学与技术专业学生成绩视图CS_Student_Grades，它包含如下属性：学号、学生姓名、课程名和成绩</p></li><li><p>包含聚集函数的视图定义<br>定义学生平均成绩视图Student_Avg_Grades，它包括如下属性：学生的学号、姓名和平均成绩（Avg_Grade）</p></li></ol><p>答案：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-comment">--1</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> SE_Students<br><span class="hljs-keyword">AS</span> <span class="hljs-keyword">SELECT</span> Sno, Sname, Sex, Birthday, Dno<br><span class="hljs-keyword">FROM</span> Students<br><span class="hljs-keyword">WHERE</span> Speciality <span class="hljs-operator">=</span> ‘软件工程’<br><span class="hljs-keyword">WITH</span> <span class="hljs-keyword">CHECK</span> OPTION;<br><br><span class="hljs-comment">--2</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> EI_SC (Sno, Cno, Grade)<br><span class="hljs-keyword">AS</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">WHERE</span> Sno <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> Sno<br><span class="hljs-keyword">FROM</span> Students<br><span class="hljs-keyword">WHERE</span> Dno<span class="hljs-operator">=</span> ‘IE’); <br><br><span class="hljs-comment">--3</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> Student_Grades (Sno, Sname, Cname, Grade)<br><span class="hljs-keyword">AS</span> <span class="hljs-keyword">SELECT</span> S.Sno, Sname, Cname, Grade<br><span class="hljs-keyword">FROM</span> Students S, SC, Courses C<br><span class="hljs-keyword">WHERE</span> S.Sno <span class="hljs-operator">=</span> SC.Sno <span class="hljs-keyword">AND</span> C.Cno <span class="hljs-operator">=</span> SC.Cno; <br><br><span class="hljs-comment">--4</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> CS_Student_Grades (Sno, Sname, Cname, Grade)<br><span class="hljs-keyword">AS</span> <span class="hljs-keyword">SELECT</span> S.Sno, S.Sname, Cname, Grade<br><span class="hljs-keyword">FROM</span> Students S, Student_Grades SG<br><span class="hljs-keyword">WHERE</span> S.Sno <span class="hljs-operator">=</span> SG.Sno <span class="hljs-keyword">AND</span> Speciality <span class="hljs-operator">=</span> ‘计算机科学与技术’;<br><br><span class="hljs-comment">--5</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> Student_Avg_Grades (Sno, Sname, Avg_Grade)<br><span class="hljs-keyword">AS</span> <span class="hljs-keyword">SELECT</span> S.Sno, Sname, <span class="hljs-built_in">AVG</span> (Grade)<br><span class="hljs-keyword">FROM</span> Students S, SC<br><span class="hljs-keyword">WHERE</span> S.Sno<span class="hljs-operator">=</span>SC.Sno<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> S.Sno, Sname; <br></code></pre></td></tr></table></figure><h4 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">VIEW</span> <span class="hljs-operator">&lt;</span>视图名<span class="hljs-operator">&gt;</span> [ CASCADE <span class="hljs-operator">|</span> RESTRICT ]<br><span class="hljs-comment">/*CASCADE或RESTRICT是可选的，缺省时为RESTRICT。*/</span><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">DROP VIEW Student_Grades或DROP VIEW Student_Grades RESTRICT不能删除例4.45定义的视图Student_Grades，因为视图CS_Student_Grades的定义依赖于它</span><br><span class="hljs-comment">DROP VIEW Student_Grades CASCADE将删除视图Student_Grades，并且级联地删除视图CS_Student_Grades</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h2 id="第五章-第六章"><a href="#第五章-第六章" class="headerlink" title="第五章&amp;&amp;第六章"></a>第五章&amp;&amp;第六章</h2><p>DBMS对各种完整性的支持机制</p><p>违反参照完整性的更新（4种，jiliangengxin，fukongzhi。。。），更新破环参照完整性时的措施（4种），SQL定义参照完整性的方法</p><p>SQL授权机制（GRANT，REVOKE）</p><p>MAC（修正）规则P134  为什么那么修正，为什么那么定义</p><p>触发器的定义模型（事件，条件，动作），触发器SQL的定义语句的阅读，写出来触发器的功能</p><h3 id="DBMS对各种完整性的支持机制"><a href="#DBMS对各种完整性的支持机制" class="headerlink" title="DBMS对各种完整性的支持机制"></a>DBMS对各种完整性的支持机制</h3><p>定义机制</p><p>检查机制</p><p>违约处理机制</p><h3 id="违反参照完整性的更新"><a href="#违反参照完整性的更新" class="headerlink" title="违反参照完整性的更新"></a>违反参照完整性的更新</h3><h4 id="向参照关系R插入元组tR"><a href="#向参照关系R插入元组tR" class="headerlink" title="向参照关系R插入元组tR"></a>向参照关系R插入元组tR</h4><p>若不存在S的元组tS 使得tR[FKR]&#x3D; tS[Ks]，则破坏参照完整性 </p><h4 id="修改参照关系R的元组tR外码上的值"><a href="#修改参照关系R的元组tR外码上的值" class="headerlink" title="修改参照关系R的元组tR外码上的值"></a>修改参照关系R的元组tR外码上的值</h4><p>若不存在S的元组tS 使得new(tR[FKR])&#x3D;tS[Ks]，则破坏参照完整性 </p><h4 id="删除被参照关系S的元组tS"><a href="#删除被参照关系S的元组tS" class="headerlink" title="删除被参照关系S的元组tS"></a>删除被参照关系S的元组tS</h4><p>若存在参照关系R的元组tR使得tS[Ks]&#x3D; tR[FKR]，则破坏参照完整性 </p><h4 id="修改被参照关系S的元组tS主码上的值"><a href="#修改被参照关系S的元组tS主码上的值" class="headerlink" title="修改被参照关系S的元组tS主码上的值"></a>修改被参照关系S的元组tS主码上的值</h4><p>若存在参照关系R的元组tR ，使得old(tS[Ks])&#x3D; tR[FKR]，则破坏参照完整性</p><h3 id="更新破环参照完整性时的措施"><a href="#更新破环参照完整性时的措施" class="headerlink" title="更新破环参照完整性时的措施"></a>更新破环参照完整性时的措施</h3><h4 id="拒绝"><a href="#拒绝" class="headerlink" title="拒绝"></a>拒绝</h4><p>拒绝违反参照完整性的更新</p><ul><li><p>对于参照关系R中插入新元组／修改参照关系R的元组外码上的值导致破坏参照完整性，一般只能拒绝</p></li><li><p>对于被参照关系S中删除元组／修改被参照关系S的元组主码上的值导致破坏参照完整性，还存在其他有意义的选择</p></li></ul><h4 id="级联"><a href="#级联" class="headerlink" title="级联"></a>级联</h4><p>进行更新，并且对更新导致违反参照完整性的参照关系元组进行相应更新。</p><ul><li><p>当删除被参照关系S中的元组tS破坏参照完整性时，同时删除参照关系R中所有违反参照完整性的元组tR</p></li><li><p>修改被参照关系S的元组tS主码上的值而破坏参照完整性时，用tS主码上的新值修改参照关系R上违反参照完整性的元组tR的外码</p></li></ul><h4 id="置空值"><a href="#置空值" class="headerlink" title="置空值"></a>置空值</h4><p>进行更新，并且对更新导致违反参照完整性的参照关系元组的外码置空值</p><p>这种处理方法仅当外码允许取空值时才能使用</p><ul><li>如果允许职工的部门属性取空值（尚未分配到具体部门，或者是公司总裁），当公司某个部门撤销时，可以删除该部门在Departments中的记录，同时将EMPS中相应职工的部门属性置空值</li></ul><h4 id="置缺省值"><a href="#置缺省值" class="headerlink" title="置缺省值"></a>置缺省值</h4><p>进行更新，并且对更新导致违反参照完整性的参照关系元组的外码置缺省值</p><p>其中缺省值必须是被参照关系某元组主码上的值</p><h3 id="SQL定义参照完整性的方法"><a href="#SQL定义参照完整性的方法" class="headerlink" title="SQL定义参照完整性的方法"></a>SQL定义参照完整性的方法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">FOREIGN</span> KEY (A1,…, Ak) <span class="hljs-keyword">REFERENCES</span> <span class="hljs-operator">&lt;</span>外表名<span class="hljs-operator">&gt;</span> (<span class="hljs-operator">&lt;</span>外表主码<span class="hljs-operator">&gt;</span>)    [<span class="hljs-operator">&lt;</span>参照触发动作<span class="hljs-operator">&gt;</span>]  <br></code></pre></td></tr></table></figure><ul><li><p>&lt;参照触发动作&gt;指出修改和删除违反参照完整性约束时触发的动作；缺省时，违反参照完整性的修改和删除将被拒绝 </p></li><li><p>&lt;参照触发动作&gt;可以是如下两种形式之一：  </p><ol><li>ON UPDATE &lt;参照动作&gt; [ON DELETE &lt;参照动作&gt;]  </li><li>ON DELETE &lt;参照动作&gt; [ON UPDATE &lt;参照动作&gt;]</li></ol></li><li><p>其中&lt;参照动作&gt;可以是CASCADE、SET NULL、SET DEFAULT和NO ACTION 之一，分别表示级联、置空值、置缺省值和拒绝 </p></li><li><p>ON DELETE &lt;参照动作&gt;缺省时，违反参照完整性的删除将被拒绝 </p></li><li><p>ON UPDATE &lt;参照动作&gt;缺省时，违反参照完整性的修改将被拒绝</p></li></ul><h3 id="SQL授权机制"><a href="#SQL授权机制" class="headerlink" title="SQL授权机制"></a>SQL授权机制</h3><h4 id="GRANT"><a href="#GRANT" class="headerlink" title="GRANT"></a>GRANT</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs SQL"> <span class="hljs-keyword">GRANT</span> <span class="hljs-operator">&lt;</span>权限列表<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">ON</span> <span class="hljs-operator">&lt;</span>对象名<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">TO</span> <span class="hljs-operator">&lt;</span>用户<span class="hljs-operator">/</span>角色列表<span class="hljs-operator">&gt;</span>  [<span class="hljs-keyword">WITH</span> <span class="hljs-keyword">GRANT</span> OPTION] <br> <span class="hljs-comment">/*</span><br><span class="hljs-comment"> &lt;权限列表&gt;可以是ALL PRIVILEGES（所有权限），或是如下权限的列表：</span><br><span class="hljs-comment"> SELECT</span><br><span class="hljs-comment"> DELETE</span><br><span class="hljs-comment"> INSERT [(&lt;属性列&gt;, …, &lt;属性列&gt;)]</span><br><span class="hljs-comment"> UPDATE [(&lt;属性列&gt;, …, &lt;属性列&gt;)]</span><br><span class="hljs-comment"> REFERENCES [(&lt;属性列&gt;, …, &lt;属性列&gt;)]：赋予用户创建关系时定义外码的能力</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">&lt;对象名&gt;可以是基本表或视图名。当对象名为基本表名时，表名前可以使用保留字TABLE</span><br><span class="hljs-comment">&lt;用户/角色列表&gt;可以是PUBLIC（所有用户）或指定的用户或角色的列表</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><ul><li><p>将一种或多种存取权限赋予一个或多个用户或角色 </p></li><li><p>包含可选短语WITH GRANT OPTION时，获得授权的用户还可以把他&#x2F;她获的权限授予其他用户；缺省时，获得权限的用户不能传播权限</p></li></ul><p>例子：</p><ol><li>把查询Students表权限授予所有用户</li><li>将对Students和Courses表的所有权限授予用户U1和U2</li><li>U1和U2都不能传播他们获得的权限，如果允许传播权限</li><li>把对表SC的插入元组权限和修改成绩（Grade）的权限授予用户U3</li></ol><p>答案：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">ON</span> Students <span class="hljs-keyword">TO</span> PUBLIC;<br><br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> PRIVILIGES <span class="hljs-keyword">ON</span> Students, Courses <span class="hljs-keyword">TO</span> U1, U2;<br><br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> PRIVILIGES <span class="hljs-keyword">ON</span> Students, Courses <span class="hljs-keyword">TO</span> U1, U2<br><span class="hljs-keyword">WITH</span> <span class="hljs-keyword">GRANT</span> OPTION;<br><br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">INSERT</span>, <span class="hljs-keyword">UPDATE</span> (Grade) <span class="hljs-keyword">ON</span> <span class="hljs-keyword">TABLE</span> SC <span class="hljs-keyword">TO</span> U3;<br></code></pre></td></tr></table></figure><h4 id="REVOKE"><a href="#REVOKE" class="headerlink" title="REVOKE"></a>REVOKE</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">REVOKE</span> <span class="hljs-operator">&lt;</span>权限列表<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">ON</span> <span class="hljs-operator">&lt;</span>对象名<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">FROM</span> <span class="hljs-operator">&lt;</span>用户<span class="hljs-operator">/</span>角色列表<span class="hljs-operator">&gt;</span> &#123;CASCADE <span class="hljs-operator">|</span> RESTRICT&#125;<br></code></pre></td></tr></table></figure><h4 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">CREATE</span>  ROLE  <span class="hljs-operator">&lt;</span>角色名<span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><p>例子:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">CREATE</span> ROLE Teller;<br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> PRIVILIGES <br><span class="hljs-keyword">ON</span> Account, Loan, Depositor, Borrower <span class="hljs-keyword">TO</span> Teller;<br><br><span class="hljs-keyword">REVOKE</span> <span class="hljs-keyword">ALL</span> PRIVILIGES <span class="hljs-keyword">ON</span> Loan, Borrower <span class="hljs-keyword">FROM</span> Teller;<br></code></pre></td></tr></table></figure><p>加入&#x2F;收回角色</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">GRANT</span> <span class="hljs-operator">&lt;</span>角色列表<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">TO</span> <span class="hljs-operator">&lt;</span>用户<span class="hljs-operator">/</span>角色列表<span class="hljs-operator">&gt;</span><br><span class="hljs-keyword">REVOKE</span> <span class="hljs-operator">&lt;</span>角色列表<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">FROM</span> <span class="hljs-operator">&lt;</span>用户<span class="hljs-operator">/</span>角色列表<span class="hljs-operator">&gt;</span> <br>&#123;CASCADE <span class="hljs-operator">|</span> RESTRICT&#125;<br></code></pre></td></tr></table></figure><p>例子:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">GRANT</span> Teller <span class="hljs-keyword">TO</span> LiMing, ZhangHua, Manager<br><span class="hljs-keyword">REVOKE</span> Teller <span class="hljs-keyword">FROM</span> LiMing CASCADE;<br></code></pre></td></tr></table></figure><h3 id="MAC（修正）规则"><a href="#MAC（修正）规则" class="headerlink" title="MAC（修正）规则"></a>MAC（修正）规则</h3><p>强制存取控制（MAC）是系统为保证更高程度的安全性所采取的强制存取检查手段</p><p> 当某一用户（或某一主体）注册进入系统时，系统要求他对任何客体的存取必须遵循下面两条规则： </p><p>(1) 仅当主体的许可证级别大于或等于客体的密级时，该主体才能读取相应的客体 </p><p>(2) 仅当主体的许可证级别等于客体的密级时，该主体才能写相应的客体</p><p> 某些系统修正了第2条规则： </p><p> (2’) 仅当主体的许可证级别小于或等于客体的密级时，该主体才能写相应的客体；即用户可以为写入的数据对象赋予高于自己的许可证级别的密级</p><h2 id="第七章"><a href="#第七章" class="headerlink" title="第七章"></a>第七章</h2><p>不好的数据库设计带来的问题：冗余及存储异常</p><p>函数依赖，属性闭包的求解，会求模式的码</p><p>范式的概念（1~BCNF）</p><p>会判断一个模式属于第几范式</p><p>检测分解的无损连接性算法</p><p>具有无损连接性的BCNF分解算法</p><h2 id="第八章"><a href="#第八章" class="headerlink" title="第八章"></a>第八章</h2><p>数据库设计步骤（可行性分析…）及各个阶段的任务与主要成果（输出）</p><p>索引的设计原则，为什么索引不是越多越好</p><p>关系模式水平分解和垂直分解的应用场景及作用（提高查询效率）</p><h3 id="数据库设计步骤"><a href="#数据库设计步骤" class="headerlink" title="数据库设计步骤"></a>数据库设计步骤</h3><ol><li>需求分析</li><li>概念结构设计</li><li>逻辑结构设计</li><li>物理结构设计</li><li>数据库实施、试运行</li><li>数据库运行和维护</li></ol><h3 id="为什么关系上定义的索引数并不是越多越好"><a href="#为什么关系上定义的索引数并不是越多越好" class="headerlink" title="为什么关系上定义的索引数并不是越多越好"></a>为什么关系上定义的索引数并不是越多越好</h3><p>系统为维护索引要付出代价，查找索引也要会出代价。例如，若一个关系的更新频率很高，这个关系上定义的索引数不能太多，因为一旦更新一个关系，就必须对这个关系上有关的索引做相应的修改。</p><h3 id="关系模式水平分解和垂直分解的应用场景及作用"><a href="#关系模式水平分解和垂直分解的应用场景及作用" class="headerlink" title="关系模式水平分解和垂直分解的应用场景及作用"></a>关系模式水平分解和垂直分解的应用场景及作用</h3><h4 id="水平分解"><a href="#水平分解" class="headerlink" title="水平分解"></a>水平分解</h4><p>水平分解就是把（基本）关系的元组分为若干子集，对每个子集定义一个子关系，以提高系统的效率。在水平分解下，每个子关系都具有相同的模式</p><ol><li>满足“80&#x2F;20原则”的应用：即在一个大关系中，经常被使用的数据只是关系的一部分，约20%。这时，把经常使用的数据分解出来，形成一个子关系，可以减少查询的I&#x2F;O量</li><li>并发事务经常存取不相交的数据：如果关系R上具有n个事务，而且多数事务存取的数据不相交，则R可分解为多个子关系，使每个事务存取的数据对应一个关系</li></ol><p> 例如，在学校的MIS中，学生信息的处理通常只涉及某个院系的学生，因此将学生关系可以按院系分解成若干个子关系可以提高大部分处理的速度 </p><h4 id="垂直分解"><a href="#垂直分解" class="headerlink" title="垂直分解"></a>垂直分解</h4><p>就是把关系模式R的属性分解为若干子集合，形成多个子关系模式，从而将对应的关系也分解成多个子关系。在垂直分解下， 不同的子关系具有不同的属性，但是都包含R的主码</p><p> 垂直分解的原则：将经常在一起使用的属性从R中分解出来形成子关系模式</p><p>例如，如果职工关系包含很多属性，而大部分查询只涉及职工的编号、姓名、性别、年龄等少量属性，则可以将这些属性分离出来，形成一个关系模式“职工基本信息”，其他属性连同职工编号形成“职工其他信息”</p><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>提高查询效率</p><h2 id="第十章"><a href="#第十章" class="headerlink" title="第十章"></a>第十章</h2><p>ACID特性</p><p>会判断事物的并发性执行引起的问题（给代码）</p><p>封锁协议，锁类型</p><p>活锁死锁的产生原因及处理策略</p><h3 id="ACID代表什么"><a href="#ACID代表什么" class="headerlink" title="ACID代表什么"></a>ACID代表什么</h3><ul><li>Atomicity（原子性）:一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被恢复（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</li><li>Consistency（一致性）:在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。</li><li>Isolation（隔离性):一个事务的执行不能被其他事物干扰。也就是说，即使多个事物并发执行，任何事物的更新操作直到其成功提交，对其他事物都是不可见的。</li><li>Durability（持久性）:事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失</li></ul><h3 id="封锁"><a href="#封锁" class="headerlink" title="封锁"></a>封锁</h3><h4 id="锁的类型"><a href="#锁的类型" class="headerlink" title="锁的类型"></a>锁的类型</h4><ul><li>共享锁S<br>又称读锁。如果事务T获得了数据对象Q上的共享锁，则T可以读但不能写Q，并且在T释放Q上的S锁之前，其它事务只能获得Q上的S锁，而不能获得Q上的X锁</li><li>排他锁X<br>又称写锁。如果事务T获得了数据项Q上的排它锁，则T既可以读又可以写Q，但是在T释放Q上的X锁之前，其它事务既不能获得Q上的S锁，也不能获得Q上的X锁</li></ul><h4 id="封锁类型"><a href="#封锁类型" class="headerlink" title="封锁类型"></a>封锁类型</h4><p> 数据对象加锁时需要约定一些规则，约定何时申请封锁何时释放封锁等，这些规则称为封锁协议。约定不同的规则，就形成了不同的封锁协议</p><ol><li>一级封锁协议:防止丢失修改</li><li>二级封锁协议:防止读“脏”数据</li><li>三级封锁协议:保证可重复读</li></ol><h4 id="活锁"><a href="#活锁" class="headerlink" title="活锁"></a>活锁</h4><p>活锁又称饥饿，是某个事务因等待锁而处于无限期等待状态</p><img src="huosuo.png" alt="活锁" style="zoom:67%;" /><h5 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h5><p>不公平的锁调度导致</p><h5 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h5><p> 可以采用先来先服务的策略来避免某个事务无限期等待<br> 即当多个事务请求封锁同一数据对象时，封锁子系统按请求封锁的先后次序对事务排队<br> 数据对象上的锁一旦释放，就将锁授予申请队列中的第一个事务</p><h4 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h4><p>死锁是两个或两个以上的事务之间的循环等待现象</p><img src="sisuo.png" alt="死锁" style="zoom: 33%;" /><h5 id="产生原因-1"><a href="#产生原因-1" class="headerlink" title="产生原因"></a>产生原因</h5><p>死锁发生时，两个或多个事务都处于等待状态，每个事务都等待其它事务释放锁，以便可以继续执行</p><h5 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h5><h6 id="预防"><a href="#预防" class="headerlink" title="预防"></a>预防</h6><ul><li>一次封锁法：每个事务必须一次将所有要使用的数据全部加锁后，再实际执行事务操作，否则事务不进行任何实际行动也不封锁任何数据</li><li>顺序封锁法：预先对数据对象规定一个封锁顺序，所有事务都按这个顺序实行封锁</li></ul><h6 id="检测与解除"><a href="#检测与解除" class="headerlink" title="检测与解除"></a>检测与解除</h6><ul><li><p>超时法: 超时法的优点是实现简单。但是，若时限限定太小，则对于运行时间长的事务可能误判；若时限限定太长，则死锁发生后不能及时发现</p></li><li><p>等待图法:  事务等待图是一个有向图G&#x3D;(T，U)，其中，T为顶点的集合，每个顶点表示正运行的事务；U为边的集合，每条边表示事务等待的情况，若T1等待T2，说明T1申请对T2已经封锁的数据对象进行加锁而处于等待状态，则T1 、 T2之间划一条有向边，从T1指向T2。<br> 系统发生死锁，当且仅当事务等待图中存在环（回路）。回路中的事务都处于死锁状态</p></li><li><p>解除死锁(Best): 解除死锁的基本方法是：选择一个或多个处于死锁状态的事务，将其撤销并释放这些事务持有的所有的锁，从而打破了循环等待条件，解除死锁，使得其他事务能够继续运行。当然，被撤消的事务对数据库的更新必须恢复（回滚），并且要在稍后重新运行</p></li></ul><h2 id="第十一章-数据库恢复技术"><a href="#第十一章-数据库恢复技术" class="headerlink" title="第十一章:数据库恢复技术"></a>第十一章:数据库恢复技术</h2><h3 id="故障分类"><a href="#故障分类" class="headerlink" title="故障分类"></a>故障分类</h3><h4 id="事务故障"><a href="#事务故障" class="headerlink" title="事务故障"></a>事务故障</h4><p>是指某个事务在运行过程中由于种种原因未能运行到正常终止而夭折 </p><h4 id="系统故障"><a href="#系统故障" class="headerlink" title="系统故障"></a>系统故障</h4><p>是指由于某种原因造成整个系统的正常运行突然停止，致使所有正在运行的事务都以非正常方式终止</p><h4 id="介质故障"><a href="#介质故障" class="headerlink" title="介质故障"></a>介质故障</h4><p>是指存储数据库的存储设备故障，数据库数据的传输过程中，由于磁头损坏或故障造成磁盘块上的内容丢失</p><h3 id="恢复的基本思想——冗余数据"><a href="#恢复的基本思想——冗余数据" class="headerlink" title="恢复的基本思想——冗余数据"></a>恢复的基本思想——冗余数据</h3><ul><li>在系统正常运行时建立冗余数据，保证有足够的信息可用于故障恢复 </li><li>故障发生后采取措施，将数据库内容恢复到某个一致性状态，保证事务原子性和持久性</li></ul><h3 id="故障恢复机制——基于登记的日志和转储数据的数据恢复技术"><a href="#故障恢复机制——基于登记的日志和转储数据的数据恢复技术" class="headerlink" title="故障恢复机制——基于登记的日志和转储数据的数据恢复技术"></a>故障恢复机制——基于登记的日志和转储数据的数据恢复技术</h3><h3 id="登记日志的原则（两条原则）"><a href="#登记日志的原则（两条原则）" class="headerlink" title="登记日志的原则（两条原则）"></a>登记日志的原则（两条原则）</h3><ol><li>日志记录必须严格按并发事务执行的时间次序登记</li><li>必须先记日志，后写数据库；也就是说，在每次事务执行write操作之前，必须在数据库被更新前建立该write操作的日志记录</li></ol><p>回复之后是多少应该能做出判断</p><h2 id="数据库实验"><a href="#数据库实验" class="headerlink" title="数据库实验"></a>数据库实验</h2><ul><li><input disabled="" type="checkbox"> 实验1</li><li><input checked="" disabled="" type="checkbox"> 实验2</li><li><input disabled="" type="checkbox"> 实验3</li><li><input checked="" disabled="" type="checkbox"> 实验4</li><li><input checked="" disabled="" type="checkbox"> 实验5</li><li><input checked="" disabled="" type="checkbox"> 实验6</li><li><input checked="" disabled="" type="checkbox"> 实验7</li><li><input disabled="" type="checkbox"> 实验8</li></ul>]]></content>
    
    
    <categories>
      
      <category>古老的学习笔记</category>
      
      <category>Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Database</tag>
      
      <tag>SQL server</tag>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
